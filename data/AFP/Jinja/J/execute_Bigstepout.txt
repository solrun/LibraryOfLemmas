Loading theory "Draft.Auxiliary" (required by "Draft.execute_BigstepMoreTemplates" via "Draft.execute_Bigstep" via "Draft.BigStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Code_Abstract_Nat" (required by "Draft.execute_BigstepMoreTemplates" via "Draft.execute_Bigstep" via "HOL-Library.Code_Target_Numeral" via "HOL-Library.Code_Target_Nat")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.execute_BigstepMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Code_Target_Int" (required by "Draft.execute_BigstepMoreTemplates" via "Draft.execute_Bigstep" via "HOL-Library.Code_Target_Numeral")
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### Code generator: dropping subsumed code equation
### 1 == Int.Pos num.One
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Neg ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Pos ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Neg ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Pos ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### 0 + ?l == ?l
### Code generator: dropping subsumed code equation
### ?k + 0 == ?k
### Code generator: dropping subsumed code equation
### - Int.Neg ?m == Int.Pos ?m
### Code generator: dropping subsumed code equation
### - Int.Pos ?m == Int.Neg ?m
### Code generator: dropping subsumed code equation
### - 0 == 0
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Neg ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Pos ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Neg ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Pos ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### 0 - ?l == - ?l
### Code generator: dropping subsumed code equation
### ?k - 0 == ?k
### Code generator: dropping subsumed code equation
### Int.dup (Int.Neg ?n) == Int.Neg (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup (Int.Pos ?n) == Int.Pos (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Neg ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Pos ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Neg ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Pos ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### 0 * ?l == 0
### Code generator: dropping subsumed code equation
### ?k * 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Neg ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Neg ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Pos ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Pos ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k div Int.Neg num.One == - ?k
### Code generator: dropping subsumed code equation
### ?k div Int.Pos num.One == ?k
### Code generator: dropping subsumed code equation
### 0 div ?k == 0
### Code generator: dropping subsumed code equation
### ?k div 0 == 0
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Neg ?n == - snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Neg ?n ==
### - Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Pos ?n ==
### Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Pos ?n == snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k mod Int.Neg num.One == 0
### Code generator: dropping subsumed code equation
### ?k mod Int.Pos num.One == 0
### theory "HOL-Library.Code_Abstract_Nat"
### 0.065s elapsed time, 0.295s cpu time, 0.000s GC time
### Code generator: dropping subsumed code equation
### 0 mod ?k == 0
### Code generator: dropping subsumed code equation
### ?k mod 0 == ?k
Loading theory "HOL-Library.Code_Target_Nat" (required by "Draft.execute_BigstepMoreTemplates" via "Draft.execute_Bigstep" via "HOL-Library.Code_Target_Numeral")
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### equal_class.equal ?k ?k == True
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Neg ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Pos ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Neg ?l == ?l <= ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Pos ?l == ?k <= ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= 0 == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Neg ?l == ?l < ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Pos ?l == ?k < ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k < 0 == False
### Code generator: dropping subsumed code equation
### 0 < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 < 0 == False
### theory "Draft.Auxiliary"
### 0.101s elapsed time, 0.430s cpu time, 0.027s GC time
Loading theory "Draft.Type" (required by "Draft.execute_BigstepMoreTemplates" via "Draft.execute_Bigstep" via "Draft.BigStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl")
### theory "HOL-Library.Function_Algebras"
### 0.126s elapsed time, 0.525s cpu time, 0.027s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.execute_BigstepMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### Code generator: dropping subsumed code equation
### divmod_nat ?m ?n ==
### if ?n = 0 | ?m < ?n then (0, ?m)
### else let (q, y) = divmod_nat (?m - ?n) ?n in (Suc q, y)
### Code generator: dropping subsumed code equation
### of_int (Int.Pos ?k) == numeral ?k
### Code generator: dropping subsumed code equation
### of_int 0 == 0::?'a
### Code generator: dropping subsumed code equation
### of_int (Int.Neg ?k) == - numeral ?k
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### nat (Int.Pos ?k) == nat_of_num ?k
### Code generator: dropping subsumed code equation
### nat 0 == 0
### Code generator: dropping subsumed code equation
### nat (Int.Neg ?k) == 0
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### Suc ?m <= ?n == ?m < ?n
### Code generator: dropping subsumed code equation
### 0 <= ?n == True
### Code generator: dropping subsumed code equation
### ?m < Suc ?n == ?m <= ?n
### Code generator: dropping subsumed code equation
### ?n < 0 == False
### theory "HOL-Library.Code_Target_Int"
### 0.151s elapsed time, 0.619s cpu time, 0.027s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.execute_BigstepMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### Code generator: dropping subsumed code equation
### of_nat ?n == semiring_1_class.of_nat_aux (%i. i + (1::?'a)) ?n (0::?'a)
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### theory "HOL-Library.Code_Target_Nat"
### 0.137s elapsed time, 0.534s cpu time, 0.027s GC time
Loading theory "HOL-Library.Code_Target_Numeral" (required by "Draft.execute_BigstepMoreTemplates" via "Draft.execute_Bigstep")
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Code_Target_Numeral"
### 0.142s elapsed time, 0.556s cpu time, 0.072s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.execute_BigstepMoreTemplates" via "Draft.execute_Bigstep" via "Draft.BigStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel")
Found termination order: "size_list size <*mlex*> {}"
Proofs for inductive predicate(s) "rtrancl_path"
  Proving monotonicity ...
### theory "HOL-Library.Set_Algebras"
### 0.257s elapsed time, 1.020s cpu time, 0.072s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.execute_BigstepMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
### theory "HOL-Library.Nat_Bijection"
### 0.332s elapsed time, 1.312s cpu time, 0.072s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.execute_BigstepMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Type"
### 0.455s elapsed time, 1.792s cpu time, 0.157s GC time
Loading theory "Draft.Decl" (required by "Draft.execute_BigstepMoreTemplates" via "Draft.execute_Bigstep" via "Draft.BigStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel")
### theory "Draft.Decl"
### 0.055s elapsed time, 0.223s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.execute_BigstepMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.305s elapsed time, 1.202s cpu time, 0.085s GC time
Loading theory "Draft.TypeRel" (required by "Draft.execute_BigstepMoreTemplates" via "Draft.execute_Bigstep" via "Draft.BigStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects")
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Methods"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
### Introduced fixed type variable(s): 'a in "y"
### Introduced fixed type variable(s): 'a in "z"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.167s elapsed time, 4.449s cpu time, 0.880s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.075s elapsed time, 4.056s cpu time, 0.860s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.TypeRel"
### 1.319s elapsed time, 4.456s cpu time, 0.824s GC time
Loading theory "Draft.Value" (required by "Draft.execute_BigstepMoreTemplates" via "Draft.execute_Bigstep" via "Draft.BigStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.359s elapsed time, 0.749s cpu time, 0.055s GC time
Loading theory "Draft.Objects" (required by "Draft.execute_BigstepMoreTemplates" via "Draft.execute_Bigstep" via "Draft.BigStep" via "Draft.Expr" via "Draft.Exceptions")
consts
  typeof_h ::
    "(nat => (char list * (char list * char list => val option)) option)
     => val => ty option"
### theory "HOL-Library.Tree"
### 2.063s elapsed time, 6.496s cpu time, 1.077s GC time
Loading theory "Draft.Templates" (required by "Draft.execute_BigstepMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Objects"
### 0.120s elapsed time, 0.256s cpu time, 0.032s GC time
Loading theory "Draft.Exceptions" (required by "Draft.execute_BigstepMoreTemplates" via "Draft.execute_Bigstep" via "Draft.BigStep" via "Draft.Expr")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.106s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.execute_BigstepMoreTemplates")
### theory "Draft.Exceptions"
### 0.079s elapsed time, 0.158s cpu time, 0.000s GC time
Loading theory "Draft.State" (required by "Draft.execute_BigstepMoreTemplates" via "Draft.execute_Bigstep" via "Draft.BigStep")
Loading theory "Draft.Expr" (required by "Draft.execute_BigstepMoreTemplates" via "Draft.execute_Bigstep" via "Draft.BigStep")
### theory "Draft.State"
### 0.059s elapsed time, 0.184s cpu time, 0.058s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.539s elapsed time, 1.176s cpu time, 0.128s GC time
Found termination order: "{}"
### Ambiguous input (line 81 of "$AFP/Jinja/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  fv :: "char list exp => char list set"
  fvs :: "char list exp list => char list set"
### theory "Draft.Expr"
### 3.321s elapsed time, 4.709s cpu time, 1.195s GC time
Loading theory "Draft.Examples" (required by "Draft.execute_BigstepMoreTemplates" via "Draft.execute_Bigstep")
Loading theory "Draft.BigStep" (required by "Draft.execute_BigstepMoreTemplates" via "Draft.execute_Bigstep")
### Ambiguous input (line 30 of "$AFP/Jinja/J/Examples.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" classL)
###   ("_tuple" ("_String" ("_position" ''L''))
###     ("_tuple_args" ("_position" Object)
###       ("_tuple_args"
###         ("_list"
###           ("_args"
###             ("_tuple" ("_String" ("_position" ''F''))
###               ("_tuple_arg" ("_position" Integer)))
###             ("_tuple" ("_String" ("_position" ''N''))
###               ("_tuple_arg"
###                 ("_applC" ("_position" Class)
###                   ("_String" ("_position" ''L'')))))))
###         ("_tuple_arg"
###           ("_list"
###             ("_tuple" ("_String" ("_position" ''app''))
###               ("_tuple_args"
###                 ("_list"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L''))))
###                 ("_tuple_args" ("_position" Void)
###                   ("_tuple_args" ("_list" ("_String" ("_position" ''l'')))
###                     ("_tuple_arg"
###                       ("\<^const>Expr.exp.Cond"
###                         ("\<^const>Expr.exp.BinOp"
###                           ("\<^const>Expr.exp.FAcc"
###                             ("_applC" ("_position" Var) ("_position" this))
###                             ("_String" ("_position" ''N''))
###                             ("_String" ("_position" ''L'')))
###                           ("_position" Eq) ("_position" null))
###                         ("\<^const>Expr.exp.LAss"
###                           ("\<^const>Expr.exp.FAcc"
###                             ("_applC" ("_position" Var) ("_position" this))
###                             ("_String" ("_position" ''N''))
###                             ("_String" ("_position" ''L'')))
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l''))))
###                         ("\<^const>Expr.exp.Call"
###                           ("\<^const>Expr.exp.FAcc"
###                             ("_applC" ("_position" Var) ("_position" this))
###                             ("_String" ("_position" ''N''))
###                             ("_String" ("_position" ''L'')))
###                           ("_String" ("_position" ''app''))
###                           ("_list"
###                             ("_applC" ("_position" Var)
###                               ("_String" ("_position" ''l'')))))))))))))))))
### ("\<^const>Pure.eq" ("_position" classL)
###   ("_tuple" ("_String" ("_position" ''L''))
###     ("_tuple_args" ("_position" Object)
###       ("_tuple_args"
###         ("_list"
###           ("_args"
###             ("_tuple" ("_String" ("_position" ''F''))
###               ("_tuple_arg" ("_position" Integer)))
###             ("_tuple" ("_String" ("_position" ''N''))
###               ("_tuple_arg"
###                 ("_applC" ("_position" Class)
###                   ("_String" ("_position" ''L'')))))))
###         ("_tuple_arg"
###           ("_list"
###             ("_tuple" ("_String" ("_position" ''app''))
###               ("_tuple_args"
###                 ("_list"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L''))))
###                 ("_tuple_args" ("_position" Void)
###                   ("_tuple_args" ("_list" ("_String" ("_position" ''l'')))
###                     ("_tuple_arg"
###                       ("\<^const>Expr.exp.Cond"
###                         ("\<^const>Expr.exp.BinOp"
###                           ("\<^const>Expr.exp.FAcc"
###                             ("_applC" ("_position" Var) ("_position" this))
###                             ("_String" ("_position" ''N''))
###                             ("_String" ("_position" ''L'')))
###                           ("_position" Eq) ("_position" null))
###                         ("\<^const>Expr.exp.FAss"
###                           ("_applC" ("_position" Var) ("_position" this))
###                           ("_String" ("_position" ''N''))
###                           ("_String" ("_position" ''L''))
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l''))))
###                         ("\<^const>Expr.exp.Call"
###                           ("\<^const>Expr.exp.FAcc"
###                             ("_applC" ("_position" Var) ("_position" this))
###                             ("_String" ("_position" ''N''))
###                             ("_String" ("_position" ''L'')))
###                           ("_String" ("_position" ''app''))
###                           ("_list"
###                             ("_applC" ("_position" Var)
###                               ("_String" ("_position" ''l'')))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 119 of "$AFP/Jinja/J/BigStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>0)
###             ("_updbind" ("_position" V) ("_position" None)))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg" ("_position" l\<^sub>1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>0)
###             ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg" ("_position" l\<^sub>1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>0)
###             ("_updbind" ("_position" V) ("_position" None)))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg" ("_position" l\<^sub>1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>0)
###             ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg" ("_position" l\<^sub>1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_arg" ("_position" l\<^sub>0)))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 175 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_arg"
###                   ("_MapUpd" ("_position" l\<^sub>1)
###                     ("_maplet" ("_position" V)
###                       ("_applC" ("_position" Addr) ("_position" a))))))
###               ("_position" e\<^sub>2')
###               ("_tuple" ("_position" h\<^sub>2)
###                 ("_tuple_arg" ("_position" l\<^sub>2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_arg"
###           ("_applC" ("_position" l\<^sub>2)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>1) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_arg" ("_position" l\<^sub>1)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_arg"
###                   ("_MapUpd" ("_position" l\<^sub>1)
###                     ("_maplet" ("_position" V)
###                       ("_applC" ("_position" Addr) ("_position" a))))))
###               ("_position" e\<^sub>2')
###               ("_tuple" ("_position" h\<^sub>2)
###                 ("_tuple_arg" ("_position" l\<^sub>2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_arg"
###           ("_Update" ("_position" l\<^sub>2)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>1) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 83 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" fs')
###               ("_MapUpd" ("_position" fs)
###                 ("_maplet"
###                   ("_tuple" ("_position" F) ("_tuple_arg" ("_position" D)))
###                   ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                 ("_MapUpd" ("_position" h\<^sub>2)
###                   ("_maplet" ("_position" a)
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" fs'))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_arg" ("_position" l\<^sub>2)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" fs')
###               ("_MapUpd" ("_position" fs)
###                 ("_maplet"
###                   ("_tuple" ("_position" F) ("_tuple_arg" ("_position" D)))
###                   ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                 ("_MapUpd" ("_position" h\<^sub>2)
###                   ("_maplet" ("_position" a)
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" fs'))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_arg" ("_position" l\<^sub>2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 88 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 92 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 96 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "eval", "evals"
  Proving monotonicity ...
### Ambiguous input (line 42 of "$AFP/Jinja/J/Examples.thy") produces 256 parse trees (10 displayed):
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###           ("_String" ("_position" ''F'')) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l2''))
###         ("\<^const>Expr.exp.LAss"
###           ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###           ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###             ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###           ("_String" ("_position" ''F'')) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l2''))
###         ("\<^const>Expr.exp.LAss"
###           ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###           ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###             ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###         ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l2''))
###         ("\<^const>Expr.exp.LAss"
###           ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###           ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###             ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###         ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l2''))
###         ("\<^const>Expr.exp.LAss"
###           ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###           ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###             ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###           ("_String" ("_position" ''F'')) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l2''))
###         ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###             ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###           ("_String" ("_position" ''F'')) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l2''))
###         ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###             ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###         ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l2''))
###         ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###             ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###         ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l2''))
###         ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###             ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###           ("_String" ("_position" ''F'')) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l2''))
###         ("\<^const>Expr.exp.LAss"
###           ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###           ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###               ("_String" ("_position" ''F''))
###               ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###           ("_String" ("_position" ''F'')) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l2''))
###         ("\<^const>Expr.exp.LAss"
###           ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###           ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###               ("_String" ("_position" ''F''))
###               ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 69 of "$AFP/Jinja/J/Examples.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("_position" testExpr5)
###   ("\<^const>Expr.exp.Seq"
###     ("_applC" ("_position" new) ("_String" ("_position" ''Object'')))
###     ("\<^const>Expr.exp.Block" ("_String" ("_position" ''V''))
###       ("\<^const>Expr.exp.LAss"
###         ("_applC" ("_position" Class) ("_String" ("_position" ''C'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''C''))))
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###           ("_String" ("_position" ''F'')) ("_String" ("_position" ''C'')))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg)
###             ("_Numeral" ("_constify" ("_position" 42)))))))))
### ("\<^const>Pure.eq" ("_position" testExpr5)
###   ("\<^const>Expr.exp.Seq"
###     ("_applC" ("_position" new) ("_String" ("_position" ''Object'')))
###     ("\<^const>Expr.InitBlock" ("_String" ("_position" ''V''))
###       ("_applC" ("_position" Class) ("_String" ("_position" ''C'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''C'')))
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###           ("_String" ("_position" ''F'')) ("_String" ("_position" ''C'')))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg)
###             ("_Numeral" ("_constify" ("_position" 42)))))))))
### ("\<^const>Pure.eq" ("_position" testExpr5)
###   ("\<^const>Expr.exp.Seq"
###     ("_applC" ("_position" new) ("_String" ("_position" ''Object'')))
###     ("\<^const>Expr.exp.Block" ("_String" ("_position" ''V''))
###       ("\<^const>Expr.exp.LAss"
###         ("_applC" ("_position" Class) ("_String" ("_position" ''C'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''C''))))
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###         ("_String" ("_position" ''F'')) ("_String" ("_position" ''C''))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg)
###             ("_Numeral" ("_constify" ("_position" 42)))))))))
### ("\<^const>Pure.eq" ("_position" testExpr5)
###   ("\<^const>Expr.exp.Seq"
###     ("_applC" ("_position" new) ("_String" ("_position" ''Object'')))
###     ("\<^const>Expr.InitBlock" ("_String" ("_position" ''V''))
###       ("_applC" ("_position" Class) ("_String" ("_position" ''C'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''C'')))
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###         ("_String" ("_position" ''F'')) ("_String" ("_position" ''C''))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg)
###             ("_Numeral" ("_constify" ("_position" 42)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 72 of "$AFP/Jinja/J/Examples.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" testExpr6)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''V''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''I'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''I''))))
###     ("\<^const>Expr.exp.Call"
###       ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###       ("_String" ("_position" ''mult''))
###       ("_list"
###         ("_args"
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 40)))))
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 4))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr6)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''V''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''I'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''I'')))
###     ("\<^const>Expr.exp.Call"
###       ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###       ("_String" ("_position" ''mult''))
###       ("_list"
###         ("_args"
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 40)))))
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 4))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 80 of "$AFP/Jinja/J/Examples.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" mb_add)
###   ("\<^const>Expr.exp.Seq"
###     ("\<^const>Expr.exp.FAss"
###       ("_applC" ("_position" Var) ("_position" this))
###       ("_String" ("_position" ''int'')) ("_String" ("_position" ''A''))
###       ("\<^const>Expr.exp.BinOp"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_position" this))
###           ("_String" ("_position" ''int'')) ("_String" ("_position" ''A'')))
###         ("_position" Add)
###         ("_applC" ("_position" Var) ("_String" ("_position" ''i'')))))
###     ("\<^const>Expr.exp.FAcc"
###       ("_applC" ("_position" Var) ("_position" this))
###       ("_String" ("_position" ''int'')) ("_String" ("_position" ''A'')))))
### ("\<^const>Pure.eq" ("_position" mb_add)
###   ("\<^const>Expr.exp.Seq"
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc"
###         ("_applC" ("_position" Var) ("_position" this))
###         ("_String" ("_position" ''int'')) ("_String" ("_position" ''A'')))
###       ("\<^const>Expr.exp.BinOp"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_position" this))
###           ("_String" ("_position" ''int'')) ("_String" ("_position" ''A'')))
###         ("_position" Add)
###         ("_applC" ("_position" Var) ("_String" ("_position" ''i'')))))
###     ("\<^const>Expr.exp.FAcc"
###       ("_applC" ("_position" Var) ("_position" this))
###       ("_String" ("_position" ''int'')) ("_String" ("_position" ''A'')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 92 of "$AFP/Jinja/J/Examples.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("_position" mb_mult)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''temp''))
###     ("\<^const>Expr.exp.LAss" ("_position" Integer)
###       ("_applC" ("_position" Val)
###         ("_applC" ("_position" Intg) ("\<^const>Groups.zero_class.zero"))))
###     ("\<^const>Expr.exp.Seq"
###       ("_applC" ("_position" While)
###         ("_cargs" ("_position" mb_mult_cond) ("_position" mb_mult_block)))
###       ("\<^const>Expr.exp.Seq"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc"
###             ("_applC" ("_position" Var) ("_position" this))
###             ("_String" ("_position" ''int''))
###             ("_String" ("_position" ''A'')))
###           ("_applC" ("_position" Var) ("_String" ("_position" ''temp''))))
###         ("_applC" ("_position" Var) ("_String" ("_position" ''temp'')))))))
### ("\<^const>Pure.eq" ("_position" mb_mult)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''temp''))
###     ("_position" Integer)
###     ("_applC" ("_position" Val)
###       ("_applC" ("_position" Intg) ("\<^const>Groups.zero_class.zero")))
###     ("\<^const>Expr.exp.Seq"
###       ("_applC" ("_position" While)
###         ("_cargs" ("_position" mb_mult_cond) ("_position" mb_mult_block)))
###       ("\<^const>Expr.exp.Seq"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc"
###             ("_applC" ("_position" Var) ("_position" this))
###             ("_String" ("_position" ''int''))
###             ("_String" ("_position" ''A'')))
###           ("_applC" ("_position" Var) ("_String" ("_position" ''temp''))))
###         ("_applC" ("_position" Var) ("_String" ("_position" ''temp'')))))))
### ("\<^const>Pure.eq" ("_position" mb_mult)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''temp''))
###     ("\<^const>Expr.exp.LAss" ("_position" Integer)
###       ("_applC" ("_position" Val)
###         ("_applC" ("_position" Intg) ("\<^const>Groups.zero_class.zero"))))
###     ("\<^const>Expr.exp.Seq"
###       ("_applC" ("_position" While)
###         ("_cargs" ("_position" mb_mult_cond) ("_position" mb_mult_block)))
###       ("\<^const>Expr.exp.Seq"
###         ("\<^const>Expr.exp.FAss"
###           ("_applC" ("_position" Var) ("_position" this))
###           ("_String" ("_position" ''int'')) ("_String" ("_position" ''A''))
###           ("_applC" ("_position" Var) ("_String" ("_position" ''temp''))))
###         ("_applC" ("_position" Var) ("_String" ("_position" ''temp'')))))))
### ("\<^const>Pure.eq" ("_position" mb_mult)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''temp''))
###     ("_position" Integer)
###     ("_applC" ("_position" Val)
###       ("_applC" ("_position" Intg) ("\<^const>Groups.zero_class.zero")))
###     ("\<^const>Expr.exp.Seq"
###       ("_applC" ("_position" While)
###         ("_cargs" ("_position" mb_mult_cond) ("_position" mb_mult_block)))
###       ("\<^const>Expr.exp.Seq"
###         ("\<^const>Expr.exp.FAss"
###           ("_applC" ("_position" Var) ("_position" this))
###           ("_String" ("_position" ''int'')) ("_String" ("_position" ''A''))
###           ("_applC" ("_position" Var) ("_String" ("_position" ''temp''))))
###         ("_applC" ("_position" Var) ("_String" ("_position" ''temp'')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 107 of "$AFP/Jinja/J/Examples.thy") produces 32 parse trees (10 displayed):
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''A1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''A'')))
###     ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A2''))
###       ("\<^const>Expr.exp.LAss"
###         ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''testint''))
###         ("\<^const>Expr.exp.LAss" ("_position" Integer)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 5))))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''int''))
###               ("_String" ("_position" ''A'')))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###     ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A2''))
###       ("\<^const>Expr.exp.LAss"
###         ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''testint''))
###         ("\<^const>Expr.exp.LAss" ("_position" Integer)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 5))))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''int''))
###               ("_String" ("_position" ''A'')))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''A1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''A'')))
###     ("\<^const>Expr.InitBlock" ("_String" ("_position" ''A2''))
###       ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''A'')))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''testint''))
###         ("\<^const>Expr.exp.LAss" ("_position" Integer)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 5))))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''int''))
###               ("_String" ("_position" ''A'')))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###     ("\<^const>Expr.InitBlock" ("_String" ("_position" ''A2''))
###       ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''A'')))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''testint''))
###         ("\<^const>Expr.exp.LAss" ("_position" Integer)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 5))))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''int''))
###               ("_String" ("_position" ''A'')))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''A1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''A'')))
###     ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A2''))
###       ("\<^const>Expr.exp.LAss"
###         ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###       ("\<^const>Expr.InitBlock" ("_String" ("_position" ''testint''))
###         ("_position" Integer)
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg)
###             ("_Numeral" ("_constify" ("_position" 5)))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''int''))
###               ("_String" ("_position" ''A'')))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###     ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A2''))
###       ("\<^const>Expr.exp.LAss"
###         ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###       ("\<^const>Expr.InitBlock" ("_String" ("_position" ''testint''))
###         ("_position" Integer)
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg)
###             ("_Numeral" ("_constify" ("_position" 5)))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''int''))
###               ("_String" ("_position" ''A'')))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''A1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''A'')))
###     ("\<^const>Expr.InitBlock" ("_String" ("_position" ''A2''))
###       ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''A'')))
###       ("\<^const>Expr.InitBlock" ("_String" ("_position" ''testint''))
###         ("_position" Integer)
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg)
###             ("_Numeral" ("_constify" ("_position" 5)))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''int''))
###               ("_String" ("_position" ''A'')))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###     ("\<^const>Expr.InitBlock" ("_String" ("_position" ''A2''))
###       ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''A'')))
###       ("\<^const>Expr.InitBlock" ("_String" ("_position" ''testint''))
###         ("_position" Integer)
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg)
###             ("_Numeral" ("_constify" ("_position" 5)))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''int''))
###               ("_String" ("_position" ''A'')))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''A1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''A'')))
###     ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A2''))
###       ("\<^const>Expr.exp.LAss"
###         ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''testint''))
###         ("\<^const>Expr.exp.LAss" ("_position" Integer)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 5))))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###             ("_String" ("_position" ''int''))
###             ("_String" ("_position" ''A''))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###     ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A2''))
###       ("\<^const>Expr.exp.LAss"
###         ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''testint''))
###         ("\<^const>Expr.exp.LAss" ("_position" Integer)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 5))))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###             ("_String" ("_position" ''int''))
###             ("_String" ("_position" ''A''))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Examples"
### 1.000s elapsed time, 2.832s cpu time, 1.015s GC time
### Ambiguous input (line 204 of "$AFP/Jinja/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.BigStep"
### 2.153s elapsed time, 4.261s cpu time, 1.098s GC time
Loading theory "Draft.execute_Bigstep" (required by "Draft.execute_BigstepMoreTemplates")
Proofs for inductive predicate(s) "map_val"
  Proving monotonicity ...
Proofs for inductive predicate(s) "map_val2"
  Proving monotonicity ...
### theory "Draft.execute_Bigstep"
### 13.847s elapsed time, 14.087s cpu time, 0.291s GC time
Loading theory "Draft.execute_BigstepMoreTemplates"
val templateLemmas =
   [("execute_Bigstep.map_val_conv",
     "(?xs = map Val ?ys) = map_val ?xs ?ys",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("execute_Bigstep.map_val_i_oI",
     "map_val ?x ?xa ==> pred.eval (map_val_i_o ?x) ?xa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("execute_Bigstep.map_val2_i_o_oI",
     "map_val2 ?x ?xa ?xb ==> pred.eval (map_val2_i_o_o ?x) (?xa, ?xb)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("execute_Bigstep.map_val_i_oE",
     "[| pred.eval (map_val_i_o ?x) ?xa; map_val ?x ?xa ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("execute_Bigstep.executeI",
     "?x \<turnstile> \<langle>?xa,?xb\<rangle> \<Rightarrow>
                      \<langle>?xc,?xd\<rangle> ==>
      pred.eval
       (?x \<turnstile> \<langle>?xa,?xb\<rangle> \<Rightarrow>
                        \<langle>_, _\<rangle>)
       (?xc, ?xd)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("execute_Bigstep.evals_i_i_Pii_o_PooI",
     "?x \<turnstile> \<langle>?xa,?xb\<rangle> [\<Rightarrow>]
                      \<langle>?xc,?xd\<rangle> ==>
      pred.eval (evals_i_i_Pii_o_Poo ?x ?xa ?xb) (?xc, ?xd)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("execute_Bigstep.map_val2_conv",
     "(?xs = map Val ?ys @ throw ?e # ?zs) =
      map_val2 ?xs ?ys (throw ?e # ?zs)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 3),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 2)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_var 0))),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)))),
    ("execute_Bigstep.map_val2_i_o_oE",
     "[| pred.eval (map_val2_i_o_o ?x) (?xa, ?xb);
         map_val2 ?x ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("execute_Bigstep.executeE",
     "[| pred.eval
          (?x \<turnstile> \<langle>?xa,?xb\<rangle> \<Rightarrow>
                           \<langle>_, _\<rangle>)
          (?xc, ?xd);
         ?x \<turnstile> \<langle>?xa,?xb\<rangle> \<Rightarrow>
                         \<langle>?xc,?xd\<rangle> ==>
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("execute_Bigstep.evals_i_i_Pii_o_PooE",
     "[| pred.eval (evals_i_i_Pii_o_Poo ?x ?xa ?xb) (?xc, ?xd);
         ?x \<turnstile> \<langle>?xa,?xb\<rangle> [\<Rightarrow>]
                         \<langle>?xc,?xd\<rangle> ==>
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("execute_Bigstep.CallNull2",
     "[| ?P \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>
                         \<langle>null,?s\<^sub>1\<rangle>;
         ?P \<turnstile> \<langle>?ps,?s\<^sub>1\<rangle> [\<Rightarrow>]
                         \<langle>?evs,?s\<^sub>2\<rangle>;
         map_val ?evs ?vs |]
      ==> ?P \<turnstile> \<langle>?e\<bullet>?M(?ps),
                           ?s\<^sub>0\<rangle> \<Rightarrow>
                          \<langle>THROW NullPointer,?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_var 8),
                    template_var 7),
                  template_var 6),
                template_app (template_hole 8, template_hole 7)),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 8),
                    template_var 4),
                  template_var 5),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 9, template_var 8),
                   template_app
                    (template_app
                      (template_app (template_hole 4, template_var 7),
                       template_var 0),
                     template_var 4)),
                 template_var 6),
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 8,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0))))),
             template_var 2)
           ))),
    ("execute_Bigstep.CallParamsThrow2",
     "[| ?P \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>
                         \<langle>Val ?v,?s\<^sub>1\<rangle>;
         ?P \<turnstile> \<langle>?es,?s\<^sub>1\<rangle> [\<Rightarrow>]
                         \<langle>?evs,?s\<^sub>2\<rangle>;
         map_val2 ?evs ?vs (throw ?ex # ?es'') |]
      ==> ?P \<turnstile> \<langle>?e\<bullet>?M(?es),
                           ?s\<^sub>0\<rangle> \<Rightarrow>
                          \<langle>throw ?ex,?s\<^sub>2\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 11),
                    template_var 10),
                  template_var 9),
                template_app (template_hole 5, template_var 8)),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 11),
                    template_var 6),
                  template_var 7),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 3),
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 2)),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 6, template_var 11),
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 10),
                       template_var 0),
                     template_var 6)),
                 template_var 9),
               template_app (template_hole 1, template_var 2)),
             template_var 4)
           ))),
    ("execute_Bigstep.Call2",
     "[| ?P \<turnstile> \<langle>?e,?s\<^sub>0\<rangle> \<Rightarrow>
                         \<langle>addr ?a,?s\<^sub>1\<rangle>;
         ?P \<turnstile> \<langle>?ps,?s\<^sub>1\<rangle> [\<Rightarrow>]
                         \<langle>?evs,(?h\<^sub>2, ?l\<^sub>2)\<rangle>;
         map_val ?evs ?vs; ?h\<^sub>2 ?a = \<lfloor>(?C, ?fs)\<rfloor>;
         ?P \<turnstile> ?C sees ?M: ?Ts\<rightarrow>?T = (?pns,
                     ?body) in ?D;
         length ?vs = length ?pns;
         ?l\<^sub>2' = [this |-> Addr ?a, ?pns [|->] ?vs];
         ?P \<turnstile> \<langle>?body,
                          (?h\<^sub>2, ?l\<^sub>2')\<rangle> \<Rightarrow>
                         \<langle>?e',(?h\<^sub>3, ?l\<^sub>3)\<rangle> |]
      ==> ?P \<turnstile> \<langle>?e\<bullet>?M(?ps),
                           ?s\<^sub>0\<rangle> \<Rightarrow>
                          \<langle>?e',(?h\<^sub>3, ?l\<^sub>2)\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 20, template_var 21),
                    template_var 20),
                  template_var 19),
                template_app
                 (template_hole 19,
                  template_app (template_hole 18, template_var 18))),
              template_var 17)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 17, template_var 21),
                    template_var 16),
                  template_var 17),
                template_var 15),
              template_app
               (template_app (template_hole 16, template_var 14),
                template_var 13))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 15),
              template_var 12)
            ),
        template_equation
         (template_app (template_var 14, template_var 18),
          template_app
           (template_hole 13,
            template_app
             (template_app (template_hole 12, template_var 11),
              template_var 10))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 11, template_var 21),
                        template_var 11),
                      template_var 9),
                    template_var 8),
                  template_var 7),
                template_app
                 (template_app (template_hole 10, template_var 6),
                  template_var 5)),
              template_var 4)
            ),
        template_equation
         (template_app (template_hole 8, template_var 12),
          template_app (template_hole 7, template_var 6)),
        template_equation
         (template_var 3,
          template_app
           (template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, t_empty),
                    template_hole 2),
                  template_app
                   (template_hole 1,
                    template_app (template_hole 18, template_var 18)))),
              template_var 6),
            template_var 12)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 20, template_var 21),
                    template_var 5),
                  template_app
                   (template_app (template_hole 16, template_var 14),
                    template_var 3)),
                template_var 2),
              template_app
               (template_app (template_hole 16, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 20, template_var 21),
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 20),
                       template_var 9),
                     template_var 16)),
                 template_var 19),
               template_var 2),
             template_app
              (template_app (template_hole 16, template_var 1),
               template_var 13))
           )))]:
   (string * thm * template) list
### theory "Draft.execute_BigstepMoreTemplates"
### 0.924s elapsed time, 3.527s cpu time, 1.581s GC time
val h = fn:
   Isabelle6374844.Generated_Code.nat ->
     (Isabelle6374844.Generated_Code.char list *
      (Isabelle6374844.Generated_Code.char list *
       Isabelle6374844.Generated_Code.char list
         -> Isabelle6374844.Generated_Code.vala option)
     )
     option
val fs1 = fn:
   Isabelle6374844.Generated_Code.char list *
   Isabelle6374844.Generated_Code.char list
     -> Isabelle6374844.Generated_Code.vala option
val fs2 = fn:
   Isabelle6374844.Generated_Code.char list *
   Isabelle6374844.Generated_Code.char list
     -> Isabelle6374844.Generated_Code.vala option
val fs3 = fn:
   Isabelle6374844.Generated_Code.char list *
   Isabelle6374844.Generated_Code.char list
     -> Isabelle6374844.Generated_Code.vala option
val fs4 = fn:
   Isabelle6374844.Generated_Code.char list *
   Isabelle6374844.Generated_Code.char list
     -> Isabelle6374844.Generated_Code.vala option
val F = [Chara (false, true, true, false, false, false, true, false)]:
   Isabelle6374844.Generated_Code.char list
val L = [Chara (false, false, true, true, false, false, true, false)]:
   Isabelle6374844.Generated_Code.char list
val N = [Chara (false, true, true, true, false, false, true, false)]:
   Isabelle6374844.Generated_Code.char list
val it = (): unit
val h = fn:
   Isabelle6375270.Generated_Code.nat ->
     (Isabelle6375270.Generated_Code.char list *
      (Isabelle6375270.Generated_Code.char list *
       Isabelle6375270.Generated_Code.char list
         -> Isabelle6375270.Generated_Code.vala option)
     )
     option
val l = fn:
   Isabelle6375270.Generated_Code.char list ->
     Isabelle6375270.Generated_Code.vala option
val fs1 = fn:
   Isabelle6375270.Generated_Code.char list *
   Isabelle6375270.Generated_Code.char list
     -> Isabelle6375270.Generated_Code.vala option
val fs2 = fn:
   Isabelle6375270.Generated_Code.char list *
   Isabelle6375270.Generated_Code.char list
     -> Isabelle6375270.Generated_Code.vala option
val i =
   [Chara (true, false, false, true, false, true, true, false),
    Chara (false, true, true, true, false, true, true, false),
    Chara (false, false, true, false, true, true, true, false)]:
   Isabelle6375270.Generated_Code.char list
val t =
   [Chara (false, false, true, false, true, true, true, false),
    Chara (true, false, true, false, false, true, true, false),
    Chara (true, true, false, false, true, true, true, false),
    Chara (false, false, true, false, true, true, true, false)]:
   Isabelle6375270.Generated_Code.char list
val A = [Chara (true, false, false, false, false, false, true, false)]:
   Isabelle6375270.Generated_Code.char list
val it = (): unit
val l = fn:
   Isabelle6374508.Generated_Code.char list ->
     Isabelle6374508.Generated_Code.vala option
val h = fn:
   Isabelle6374508.Generated_Code.nat ->
     (Isabelle6374508.Generated_Code.char list *
      (Isabelle6374508.Generated_Code.char list *
       Isabelle6374508.Generated_Code.char list
         -> Isabelle6374508.Generated_Code.vala option)
     )
     option
val c = [Chara (true, true, false, false, false, false, true, false)]:
   Isabelle6374508.Generated_Code.char list
val fs = fn:
   Isabelle6374508.Generated_Code.char list *
   Isabelle6374508.Generated_Code.char list
     -> Isabelle6374508.Generated_Code.vala option
val obj =
   [Chara (true, true, true, true, false, false, true, false),
    Chara (false, true, false, false, false, true, true, false),
    Chara (false, true, false, true, false, true, true, false),
    Chara (true, false, true, false, false, true, true, false),
    Chara (true, true, false, false, false, true, true, false),
    Chara (false, false, true, false, true, true, true, false)]:
   Isabelle6374508.Generated_Code.char list
val i = Int_of_integer 42: Isabelle6374508.Generated_Code.inta
val it = (): unit
val it = (): unit
