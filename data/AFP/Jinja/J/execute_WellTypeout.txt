Loading theory "Draft.Auxiliary" (required by "Draft.execute_WellTypeMoreTemplates" via "Draft.execute_WellType" via "Draft.WellType" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.execute_WellTypeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.execute_WellTypeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.execute_WellTypeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Auxiliary"
### 0.118s elapsed time, 0.499s cpu time, 0.036s GC time
Loading theory "Draft.Type" (required by "Draft.execute_WellTypeMoreTemplates" via "Draft.execute_WellType" via "Draft.WellType" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl")
### theory "HOL-Library.Function_Algebras"
### 0.120s elapsed time, 0.501s cpu time, 0.036s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.execute_WellTypeMoreTemplates" via "Draft.execute_WellType" via "Draft.WellType" via "Draft.Objects" via "Draft.TypeRel")
Proofs for inductive predicate(s) "rtrancl_path"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.216s elapsed time, 0.885s cpu time, 0.036s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.execute_WellTypeMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.323s elapsed time, 1.297s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.execute_WellTypeMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.282s elapsed time, 1.115s cpu time, 0.084s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.execute_WellTypeMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Type"
### 0.404s elapsed time, 1.586s cpu time, 0.162s GC time
Loading theory "Draft.Decl" (required by "Draft.execute_WellTypeMoreTemplates" via "Draft.execute_WellType" via "Draft.WellType" via "Draft.Objects" via "Draft.TypeRel")
### theory "Draft.Decl"
### 0.056s elapsed time, 0.225s cpu time, 0.000s GC time
Loading theory "Draft.TypeRel" (required by "Draft.execute_WellTypeMoreTemplates" via "Draft.execute_WellType" via "Draft.WellType" via "Draft.Objects")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for inductive predicate(s) "subcls1p"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Proofs for inductive predicate(s) "widen"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Methods"
  Proving monotonicity ...
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.095s elapsed time, 4.157s cpu time, 0.852s GC time
### Introduced fixed type variable(s): 'a in "y"
### Introduced fixed type variable(s): 'a in "z"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.063s elapsed time, 4.006s cpu time, 0.852s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.TypeRel"
### 1.301s elapsed time, 4.168s cpu time, 0.822s GC time
Loading theory "Draft.Value" (required by "Draft.execute_WellTypeMoreTemplates" via "Draft.execute_WellType" via "Draft.WellType" via "Draft.Objects")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.363s elapsed time, 0.770s cpu time, 0.091s GC time
Loading theory "Draft.Objects" (required by "Draft.execute_WellTypeMoreTemplates" via "Draft.execute_WellType" via "Draft.WellType")
### theory "HOL-Library.Tree"
### 2.032s elapsed time, 6.382s cpu time, 1.075s GC time
Loading theory "Draft.Templates" (required by "Draft.execute_WellTypeMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.106s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.execute_WellTypeMoreTemplates")
consts
  typeof_h ::
    "(nat => (char list * (char list * char list => val option)) option)
     => val => ty option"
### theory "Draft.Objects"
### 0.126s elapsed time, 0.269s cpu time, 0.048s GC time
Loading theory "Draft.Exceptions" (required by "Draft.execute_WellTypeMoreTemplates" via "Draft.execute_WellType" via "Draft.WellType" via "Draft.Expr")
### theory "Draft.Exceptions"
### 0.077s elapsed time, 0.153s cpu time, 0.000s GC time
Loading theory "Draft.Expr" (required by "Draft.execute_WellTypeMoreTemplates" via "Draft.execute_WellType" via "Draft.WellType")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.533s elapsed time, 1.115s cpu time, 0.108s GC time
Found termination order: "{}"
### Ambiguous input (line 81 of "$AFP/Jinja/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  fv :: "char list exp => char list set"
  fvs :: "char list exp list => char list set"
### theory "Draft.Expr"
### 3.188s elapsed time, 4.399s cpu time, 1.164s GC time
Loading theory "Draft.Examples" (required by "Draft.execute_WellTypeMoreTemplates" via "Draft.execute_WellType")
Loading theory "Draft.WellType" (required by "Draft.execute_WellTypeMoreTemplates" via "Draft.execute_WellType")
### Ambiguous input (line 63 of "$AFP/Jinja/J/WellType.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" T) ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" T) ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 30 of "$AFP/Jinja/J/Examples.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" classL)
###   ("_tuple" ("_String" ("_position" ''L''))
###     ("_tuple_args" ("_position" Object)
###       ("_tuple_args"
###         ("_list"
###           ("_args"
###             ("_tuple" ("_String" ("_position" ''F''))
###               ("_tuple_arg" ("_position" Integer)))
###             ("_tuple" ("_String" ("_position" ''N''))
###               ("_tuple_arg"
###                 ("_applC" ("_position" Class)
###                   ("_String" ("_position" ''L'')))))))
###         ("_tuple_arg"
###           ("_list"
###             ("_tuple" ("_String" ("_position" ''app''))
###               ("_tuple_args"
###                 ("_list"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L''))))
###                 ("_tuple_args" ("_position" Void)
###                   ("_tuple_args" ("_list" ("_String" ("_position" ''l'')))
###                     ("_tuple_arg"
###                       ("\<^const>Expr.exp.Cond"
###                         ("\<^const>Expr.exp.BinOp"
###                           ("\<^const>Expr.exp.FAcc"
###                             ("_applC" ("_position" Var) ("_position" this))
###                             ("_String" ("_position" ''N''))
###                             ("_String" ("_position" ''L'')))
###                           ("_position" Eq) ("_position" null))
###                         ("\<^const>Expr.exp.LAss"
###                           ("\<^const>Expr.exp.FAcc"
###                             ("_applC" ("_position" Var) ("_position" this))
###                             ("_String" ("_position" ''N''))
###                             ("_String" ("_position" ''L'')))
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l''))))
###                         ("\<^const>Expr.exp.Call"
###                           ("\<^const>Expr.exp.FAcc"
###                             ("_applC" ("_position" Var) ("_position" this))
###                             ("_String" ("_position" ''N''))
###                             ("_String" ("_position" ''L'')))
###                           ("_String" ("_position" ''app''))
###                           ("_list"
###                             ("_applC" ("_position" Var)
###                               ("_String" ("_position" ''l'')))))))))))))))))
### ("\<^const>Pure.eq" ("_position" classL)
###   ("_tuple" ("_String" ("_position" ''L''))
###     ("_tuple_args" ("_position" Object)
###       ("_tuple_args"
###         ("_list"
###           ("_args"
###             ("_tuple" ("_String" ("_position" ''F''))
###               ("_tuple_arg" ("_position" Integer)))
###             ("_tuple" ("_String" ("_position" ''N''))
###               ("_tuple_arg"
###                 ("_applC" ("_position" Class)
###                   ("_String" ("_position" ''L'')))))))
###         ("_tuple_arg"
###           ("_list"
###             ("_tuple" ("_String" ("_position" ''app''))
###               ("_tuple_args"
###                 ("_list"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L''))))
###                 ("_tuple_args" ("_position" Void)
###                   ("_tuple_args" ("_list" ("_String" ("_position" ''l'')))
###                     ("_tuple_arg"
###                       ("\<^const>Expr.exp.Cond"
###                         ("\<^const>Expr.exp.BinOp"
###                           ("\<^const>Expr.exp.FAcc"
###                             ("_applC" ("_position" Var) ("_position" this))
###                             ("_String" ("_position" ''N''))
###                             ("_String" ("_position" ''L'')))
###                           ("_position" Eq) ("_position" null))
###                         ("\<^const>Expr.exp.FAss"
###                           ("_applC" ("_position" Var) ("_position" this))
###                           ("_String" ("_position" ''N''))
###                           ("_String" ("_position" ''L''))
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l''))))
###                         ("\<^const>Expr.exp.Call"
###                           ("\<^const>Expr.exp.FAcc"
###                             ("_applC" ("_position" Var) ("_position" this))
###                             ("_String" ("_position" ''N''))
###                             ("_String" ("_position" ''L'')))
###                           ("_String" ("_position" ''app''))
###                           ("_list"
###                             ("_applC" ("_position" Var)
###                               ("_String" ("_position" ''l'')))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WT", "WTs"
  Proving monotonicity ...
### Ambiguous input (line 119 of "$AFP/Jinja/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E) ("_position" e)
###       ("\<^const>HOL.conj" ("_position" T)
###         ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###           ("_position" es) ("_position" Ts))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>HOL.conj"
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e) ("_position" T))
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("_position" es) ("_position" Ts)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 122 of "$AFP/Jinja/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e) ("_position" U))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es) ("_position" Us)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e)
###           ("\<^const>HOL.conj" ("_position" U)
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es) ("_position" Us))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 126 of "$AFP/Jinja/J/WellType.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>HOL.conj"
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>1) ("_position" Ts\<^sub>1))
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>2) ("_position" Ts\<^sub>2))))))))
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es\<^sub>1)
###             ("\<^const>HOL.conj" ("_position" Ts\<^sub>1)
###               ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###                 ("_position" es\<^sub>2) ("_position" Ts\<^sub>2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 147 of "$AFP/Jinja/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Val) ("_position" v)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Val) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
### Ambiguous input (line 150 of "$AFP/Jinja/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Var) ("_position" V)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Var) ("_position" V))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ambiguous input (line 153 of "$AFP/Jinja/J/WellType.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>HOL.conj"
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1)
###         ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1)
###           ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###             ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###               ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 168 of "$AFP/Jinja/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.FAss" ("_position" a) ("_position" F)
###       ("_position" D) ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" a) ("_position" F)
###         ("_position" D))
###       ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 42 of "$AFP/Jinja/J/Examples.thy") produces 256 parse trees (10 displayed):
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###           ("_String" ("_position" ''F'')) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l2''))
###         ("\<^const>Expr.exp.LAss"
###           ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###           ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###             ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###           ("_String" ("_position" ''F'')) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l2''))
###         ("\<^const>Expr.exp.LAss"
###           ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###           ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###             ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###         ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l2''))
###         ("\<^const>Expr.exp.LAss"
###           ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###           ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###             ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###         ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l2''))
###         ("\<^const>Expr.exp.LAss"
###           ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###           ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###             ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###           ("_String" ("_position" ''F'')) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l2''))
###         ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###             ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###           ("_String" ("_position" ''F'')) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l2''))
###         ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###             ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###         ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l2''))
###         ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###             ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###         ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l2''))
###         ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###             ("_String" ("_position" ''F'')) ("_String" ("_position" ''L''))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###           ("_String" ("_position" ''F'')) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l2''))
###         ("\<^const>Expr.exp.LAss"
###           ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###           ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###               ("_String" ("_position" ''F''))
###               ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_BuildList)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###     ("\<^const>Expr.exp.Seq"
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''l1'')))
###           ("_String" ("_position" ''F'')) ("_String" ("_position" ''L'')))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg) ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l2''))
###         ("\<^const>Expr.exp.LAss"
###           ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###           ("_applC" ("_position" new) ("_String" ("_position" ''L''))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''l2'')))
###               ("_String" ("_position" ''F''))
###               ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" Val)
###               ("_applC" ("_position" Intg)
###                 ("_Numeral" ("_constify" ("_position" 2))))))
###           ("\<^const>Expr.InitBlock" ("_String" ("_position" ''l3''))
###             ("_applC" ("_position" Class) ("_String" ("_position" ''L'')))
###             ("_applC" ("_position" new) ("_String" ("_position" ''L'')))
###             ("\<^const>Expr.exp.Seq"
###               ("\<^const>Expr.exp.LAss"
###                 ("\<^const>Expr.exp.FAcc"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''l3'')))
###                   ("_String" ("_position" ''F''))
###                   ("_String" ("_position" ''L'')))
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" Intg)
###                     ("_Numeral" ("_constify" ("_position" 3))))))
###               ("\<^const>Expr.exp.Block" ("_String" ("_position" ''l4''))
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" Class)
###                     ("_String" ("_position" ''L'')))
###                   ("_applC" ("_position" new)
###                     ("_String" ("_position" ''L''))))
###                 ("\<^const>Expr.exp.Seq"
###                   ("\<^const>Expr.exp.FAss"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''l4'')))
###                     ("_String" ("_position" ''F''))
###                     ("_String" ("_position" ''L''))
###                     ("_applC" ("_position" Val)
###                       ("_applC" ("_position" Intg)
###                         ("_Numeral" ("_constify" ("_position" 4))))))
###                   ("\<^const>Expr.exp.Seq"
###                     ("\<^const>Expr.exp.Call"
###                       ("_applC" ("_position" Var)
###                         ("_String" ("_position" ''l1'')))
###                       ("_String" ("_position" ''app''))
###                       ("_list"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l2'')))))
###                     ("\<^const>Expr.exp.Seq"
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l3'')))))
###                       ("\<^const>Expr.exp.Call"
###                         ("_applC" ("_position" Var)
###                           ("_String" ("_position" ''l1'')))
###                         ("_String" ("_position" ''app''))
###                         ("_list"
###                           ("_applC" ("_position" Var)
###                             ("_String" ("_position" ''l4''))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 69 of "$AFP/Jinja/J/Examples.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("_position" testExpr5)
###   ("\<^const>Expr.exp.Seq"
###     ("_applC" ("_position" new) ("_String" ("_position" ''Object'')))
###     ("\<^const>Expr.exp.Block" ("_String" ("_position" ''V''))
###       ("\<^const>Expr.exp.LAss"
###         ("_applC" ("_position" Class) ("_String" ("_position" ''C'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''C''))))
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###           ("_String" ("_position" ''F'')) ("_String" ("_position" ''C'')))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg)
###             ("_Numeral" ("_constify" ("_position" 42)))))))))
### ("\<^const>Pure.eq" ("_position" testExpr5)
###   ("\<^const>Expr.exp.Seq"
###     ("_applC" ("_position" new) ("_String" ("_position" ''Object'')))
###     ("\<^const>Expr.InitBlock" ("_String" ("_position" ''V''))
###       ("_applC" ("_position" Class) ("_String" ("_position" ''C'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''C'')))
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###           ("_String" ("_position" ''F'')) ("_String" ("_position" ''C'')))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg)
###             ("_Numeral" ("_constify" ("_position" 42)))))))))
### ("\<^const>Pure.eq" ("_position" testExpr5)
###   ("\<^const>Expr.exp.Seq"
###     ("_applC" ("_position" new) ("_String" ("_position" ''Object'')))
###     ("\<^const>Expr.exp.Block" ("_String" ("_position" ''V''))
###       ("\<^const>Expr.exp.LAss"
###         ("_applC" ("_position" Class) ("_String" ("_position" ''C'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''C''))))
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###         ("_String" ("_position" ''F'')) ("_String" ("_position" ''C''))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg)
###             ("_Numeral" ("_constify" ("_position" 42)))))))))
### ("\<^const>Pure.eq" ("_position" testExpr5)
###   ("\<^const>Expr.exp.Seq"
###     ("_applC" ("_position" new) ("_String" ("_position" ''Object'')))
###     ("\<^const>Expr.InitBlock" ("_String" ("_position" ''V''))
###       ("_applC" ("_position" Class) ("_String" ("_position" ''C'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''C'')))
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###         ("_String" ("_position" ''F'')) ("_String" ("_position" ''C''))
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg)
###             ("_Numeral" ("_constify" ("_position" 42)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WellType"
### 0.883s elapsed time, 2.690s cpu time, 1.132s GC time
### Ambiguous input (line 72 of "$AFP/Jinja/J/Examples.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" testExpr6)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''V''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''I'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''I''))))
###     ("\<^const>Expr.exp.Call"
###       ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###       ("_String" ("_position" ''mult''))
###       ("_list"
###         ("_args"
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 40)))))
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 4))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr6)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''V''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''I'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''I'')))
###     ("\<^const>Expr.exp.Call"
###       ("_applC" ("_position" Var) ("_String" ("_position" ''V'')))
###       ("_String" ("_position" ''mult''))
###       ("_list"
###         ("_args"
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 40)))))
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 4))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 80 of "$AFP/Jinja/J/Examples.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" mb_add)
###   ("\<^const>Expr.exp.Seq"
###     ("\<^const>Expr.exp.FAss"
###       ("_applC" ("_position" Var) ("_position" this))
###       ("_String" ("_position" ''int'')) ("_String" ("_position" ''A''))
###       ("\<^const>Expr.exp.BinOp"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_position" this))
###           ("_String" ("_position" ''int'')) ("_String" ("_position" ''A'')))
###         ("_position" Add)
###         ("_applC" ("_position" Var) ("_String" ("_position" ''i'')))))
###     ("\<^const>Expr.exp.FAcc"
###       ("_applC" ("_position" Var) ("_position" this))
###       ("_String" ("_position" ''int'')) ("_String" ("_position" ''A'')))))
### ("\<^const>Pure.eq" ("_position" mb_add)
###   ("\<^const>Expr.exp.Seq"
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc"
###         ("_applC" ("_position" Var) ("_position" this))
###         ("_String" ("_position" ''int'')) ("_String" ("_position" ''A'')))
###       ("\<^const>Expr.exp.BinOp"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_position" this))
###           ("_String" ("_position" ''int'')) ("_String" ("_position" ''A'')))
###         ("_position" Add)
###         ("_applC" ("_position" Var) ("_String" ("_position" ''i'')))))
###     ("\<^const>Expr.exp.FAcc"
###       ("_applC" ("_position" Var) ("_position" this))
###       ("_String" ("_position" ''int'')) ("_String" ("_position" ''A'')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 92 of "$AFP/Jinja/J/Examples.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("_position" mb_mult)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''temp''))
###     ("\<^const>Expr.exp.LAss" ("_position" Integer)
###       ("_applC" ("_position" Val)
###         ("_applC" ("_position" Intg) ("\<^const>Groups.zero_class.zero"))))
###     ("\<^const>Expr.exp.Seq"
###       ("_applC" ("_position" While)
###         ("_cargs" ("_position" mb_mult_cond) ("_position" mb_mult_block)))
###       ("\<^const>Expr.exp.Seq"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc"
###             ("_applC" ("_position" Var) ("_position" this))
###             ("_String" ("_position" ''int''))
###             ("_String" ("_position" ''A'')))
###           ("_applC" ("_position" Var) ("_String" ("_position" ''temp''))))
###         ("_applC" ("_position" Var) ("_String" ("_position" ''temp'')))))))
### ("\<^const>Pure.eq" ("_position" mb_mult)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''temp''))
###     ("_position" Integer)
###     ("_applC" ("_position" Val)
###       ("_applC" ("_position" Intg) ("\<^const>Groups.zero_class.zero")))
###     ("\<^const>Expr.exp.Seq"
###       ("_applC" ("_position" While)
###         ("_cargs" ("_position" mb_mult_cond) ("_position" mb_mult_block)))
###       ("\<^const>Expr.exp.Seq"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc"
###             ("_applC" ("_position" Var) ("_position" this))
###             ("_String" ("_position" ''int''))
###             ("_String" ("_position" ''A'')))
###           ("_applC" ("_position" Var) ("_String" ("_position" ''temp''))))
###         ("_applC" ("_position" Var) ("_String" ("_position" ''temp'')))))))
### ("\<^const>Pure.eq" ("_position" mb_mult)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''temp''))
###     ("\<^const>Expr.exp.LAss" ("_position" Integer)
###       ("_applC" ("_position" Val)
###         ("_applC" ("_position" Intg) ("\<^const>Groups.zero_class.zero"))))
###     ("\<^const>Expr.exp.Seq"
###       ("_applC" ("_position" While)
###         ("_cargs" ("_position" mb_mult_cond) ("_position" mb_mult_block)))
###       ("\<^const>Expr.exp.Seq"
###         ("\<^const>Expr.exp.FAss"
###           ("_applC" ("_position" Var) ("_position" this))
###           ("_String" ("_position" ''int'')) ("_String" ("_position" ''A''))
###           ("_applC" ("_position" Var) ("_String" ("_position" ''temp''))))
###         ("_applC" ("_position" Var) ("_String" ("_position" ''temp'')))))))
### ("\<^const>Pure.eq" ("_position" mb_mult)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''temp''))
###     ("_position" Integer)
###     ("_applC" ("_position" Val)
###       ("_applC" ("_position" Intg) ("\<^const>Groups.zero_class.zero")))
###     ("\<^const>Expr.exp.Seq"
###       ("_applC" ("_position" While)
###         ("_cargs" ("_position" mb_mult_cond) ("_position" mb_mult_block)))
###       ("\<^const>Expr.exp.Seq"
###         ("\<^const>Expr.exp.FAss"
###           ("_applC" ("_position" Var) ("_position" this))
###           ("_String" ("_position" ''int'')) ("_String" ("_position" ''A''))
###           ("_applC" ("_position" Var) ("_String" ("_position" ''temp''))))
###         ("_applC" ("_position" Var) ("_String" ("_position" ''temp'')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 107 of "$AFP/Jinja/J/Examples.thy") produces 32 parse trees (10 displayed):
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''A1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''A'')))
###     ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A2''))
###       ("\<^const>Expr.exp.LAss"
###         ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''testint''))
###         ("\<^const>Expr.exp.LAss" ("_position" Integer)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 5))))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''int''))
###               ("_String" ("_position" ''A'')))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###     ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A2''))
###       ("\<^const>Expr.exp.LAss"
###         ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''testint''))
###         ("\<^const>Expr.exp.LAss" ("_position" Integer)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 5))))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''int''))
###               ("_String" ("_position" ''A'')))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''A1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''A'')))
###     ("\<^const>Expr.InitBlock" ("_String" ("_position" ''A2''))
###       ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''A'')))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''testint''))
###         ("\<^const>Expr.exp.LAss" ("_position" Integer)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 5))))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''int''))
###               ("_String" ("_position" ''A'')))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###     ("\<^const>Expr.InitBlock" ("_String" ("_position" ''A2''))
###       ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''A'')))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''testint''))
###         ("\<^const>Expr.exp.LAss" ("_position" Integer)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 5))))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''int''))
###               ("_String" ("_position" ''A'')))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''A1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''A'')))
###     ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A2''))
###       ("\<^const>Expr.exp.LAss"
###         ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###       ("\<^const>Expr.InitBlock" ("_String" ("_position" ''testint''))
###         ("_position" Integer)
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg)
###             ("_Numeral" ("_constify" ("_position" 5)))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''int''))
###               ("_String" ("_position" ''A'')))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###     ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A2''))
###       ("\<^const>Expr.exp.LAss"
###         ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###       ("\<^const>Expr.InitBlock" ("_String" ("_position" ''testint''))
###         ("_position" Integer)
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg)
###             ("_Numeral" ("_constify" ("_position" 5)))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''int''))
###               ("_String" ("_position" ''A'')))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''A1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''A'')))
###     ("\<^const>Expr.InitBlock" ("_String" ("_position" ''A2''))
###       ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''A'')))
###       ("\<^const>Expr.InitBlock" ("_String" ("_position" ''testint''))
###         ("_position" Integer)
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg)
###             ("_Numeral" ("_constify" ("_position" 5)))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''int''))
###               ("_String" ("_position" ''A'')))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###     ("\<^const>Expr.InitBlock" ("_String" ("_position" ''A2''))
###       ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''A'')))
###       ("\<^const>Expr.InitBlock" ("_String" ("_position" ''testint''))
###         ("_position" Integer)
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" Intg)
###             ("_Numeral" ("_constify" ("_position" 5)))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''int''))
###               ("_String" ("_position" ''A'')))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.InitBlock" ("_String" ("_position" ''A1''))
###     ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###     ("_applC" ("_position" new) ("_String" ("_position" ''A'')))
###     ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A2''))
###       ("\<^const>Expr.exp.LAss"
###         ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''testint''))
###         ("\<^const>Expr.exp.LAss" ("_position" Integer)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 5))))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###             ("_String" ("_position" ''int''))
###             ("_String" ("_position" ''A''))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### ("\<^const>Pure.eq" ("_position" testExpr_ClassA)
###   ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A1''))
###     ("\<^const>Expr.exp.LAss"
###       ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###       ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###     ("\<^const>Expr.exp.Block" ("_String" ("_position" ''A2''))
###       ("\<^const>Expr.exp.LAss"
###         ("_applC" ("_position" Class) ("_String" ("_position" ''A'')))
###         ("_applC" ("_position" new) ("_String" ("_position" ''A''))))
###       ("\<^const>Expr.exp.Block" ("_String" ("_position" ''testint''))
###         ("\<^const>Expr.exp.LAss" ("_position" Integer)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" Intg)
###               ("_Numeral" ("_constify" ("_position" 5))))))
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.FAss"
###             ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###             ("_String" ("_position" ''int''))
###             ("_String" ("_position" ''A''))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A1'')))
###               ("_String" ("_position" ''add''))
###               ("_list"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''testint''))))))
###           ("\<^const>Expr.exp.Seq"
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A2'')))
###                 ("_String" ("_position" ''int''))
###                 ("_String" ("_position" ''A'')))
###               ("\<^const>Expr.exp.Call"
###                 ("_applC" ("_position" Var)
###                   ("_String" ("_position" ''A1'')))
###                 ("_String" ("_position" ''add''))
###                 ("_list"
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))
###             ("\<^const>Expr.exp.Call"
###               ("_applC" ("_position" Var) ("_String" ("_position" ''A2'')))
###               ("_String" ("_position" ''mult''))
###               ("_list"
###                 ("_args"
###                   ("\<^const>Expr.exp.FAcc"
###                     ("_applC" ("_position" Var)
###                       ("_String" ("_position" ''A2'')))
###                     ("_String" ("_position" ''int''))
###                     ("_String" ("_position" ''A'')))
###                   ("_applC" ("_position" Var)
###                     ("_String" ("_position" ''testint''))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Examples"
### 1.025s elapsed time, 2.873s cpu time, 1.132s GC time
Loading theory "Draft.execute_WellType" (required by "Draft.execute_WellTypeMoreTemplates")
### Ignoring duplicate rewrite rule:
### widen_i_i_i == %x xa xb. pred.Pred (%xc. x \<turnstile> xa \<le> xb)
### Ignoring duplicate rewrite rule:
### widen_i_i_i == %x xa xb. pred.Pred (%xc. x \<turnstile> xa \<le> xb)
### Ignoring duplicate rewrite rule:
### widen_i_i_i == %x xa xb. pred.Pred (%xc. x \<turnstile> xa \<le> xb)
### Ignoring duplicate rewrite rule:
### widen_i_i_i == %x xa xb. pred.Pred (%xc. x \<turnstile> xa \<le> xb)
### theory "Draft.execute_WellType"
### 1.391s elapsed time, 1.482s cpu time, 0.071s GC time
Loading theory "Draft.execute_WellTypeMoreTemplates"
val templateLemmas =
   [("execute_WellType.infer_typeI",
     "?x,?xa \<turnstile> ?xb :: ?xc ==>
      pred.eval (?x,?xa \<turnstile> ?xb :: _) ?xc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("execute_WellType.WTs_i_i_i_oI",
     "?x,?xa \<turnstile> ?xb [::] ?xc ==>
      pred.eval (WTs_i_i_i_o ?x ?xa ?xb) ?xc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("execute_WellType.type_checkI",
     "?x,?xa \<turnstile> ?xb :: ?xc ==>
      pred.eval (type_check ?x ?xa ?xb ?xc) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("execute_WellType.WTs_i_i_i_iI",
     "?x,?xa \<turnstile> ?xb [::] ?xc ==>
      pred.eval (WTs_i_i_i_i ?x ?xa ?xb ?xc) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("execute_WellType.infer_typeE",
     "[| pred.eval (?x,?xa \<turnstile> ?xb :: _) ?xc;
         ?x,?xa \<turnstile> ?xb :: ?xc ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("execute_WellType.WTs_i_i_i_oE",
     "[| pred.eval (WTs_i_i_i_o ?x ?xa ?xb) ?xc;
         ?x,?xa \<turnstile> ?xb [::] ?xc ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("execute_WellType.WTs_i_i_i_iE",
     "[| pred.eval (WTs_i_i_i_i ?x ?xa ?xb ?xc) ?y;
         ?x,?xa \<turnstile> ?xb [::] ?xc ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("execute_WellType.type_checkE",
     "[| pred.eval (type_check ?x ?xa ?xb ?xc) ?y;
         ?x,?xa \<turnstile> ?xb :: ?xc ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("execute_WellType.WTCond1",
     "[| ?P,?E \<turnstile> ?e :: Boolean;
         ?P,?E \<turnstile> ?e\<^sub>1 :: ?T\<^sub>1;
         ?P,?E \<turnstile> ?e\<^sub>2 :: ?T\<^sub>2;
         ?P \<turnstile> ?T\<^sub>1 \<le> ?T\<^sub>2;
         ?P \<turnstile> ?T\<^sub>2 \<le> ?T\<^sub>1 -->
         ?T\<^sub>2 = ?T\<^sub>1 |]
      ==> ?P,?E \<turnstile> if (?e) ?e\<^sub>1
          else ?e\<^sub>2 :: ?T\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 6),
                  template_var 5),
                template_var 4),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 6),
                  template_var 5),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 6),
                  template_var 5),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 6),
                template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 6),
                    template_var 0),
                  template_var 2)),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 6),
                 template_var 5),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 1)),
             template_var 0)
           ))),
    ("execute_WellType.WTCond2",
     "[| ?P,?E \<turnstile> ?e :: Boolean;
         ?P,?E \<turnstile> ?e\<^sub>1 :: ?T\<^sub>1;
         ?P,?E \<turnstile> ?e\<^sub>2 :: ?T\<^sub>2;
         ?P \<turnstile> ?T\<^sub>2 \<le> ?T\<^sub>1;
         ?P \<turnstile> ?T\<^sub>1 \<le> ?T\<^sub>2 -->
         ?T\<^sub>1 = ?T\<^sub>2 |]
      ==> ?P,?E \<turnstile> if (?e) ?e\<^sub>1
          else ?e\<^sub>2 :: ?T\<^sub>1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 6),
                  template_var 5),
                template_var 4),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 6),
                  template_var 5),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 6),
                  template_var 5),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 6),
                template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 6),
                    template_var 2),
                  template_var 0)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 6),
                 template_var 5),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 1)),
             template_var 2)
           )))]:
   (string * thm * template) list
### theory "Draft.execute_WellTypeMoreTemplates"
### 0.554s elapsed time, 2.177s cpu time, 0.177s GC time
val it = (): unit
