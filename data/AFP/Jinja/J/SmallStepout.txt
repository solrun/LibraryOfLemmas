Loading theory "Draft.Auxiliary" (required by "Draft.SmallStepMoreTemplates" via "Draft.SmallStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SmallStepMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SmallStepMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SmallStepMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "Draft.Auxiliary"
### 0.114s elapsed time, 0.468s cpu time, 0.048s GC time
Loading theory "Draft.Type" (required by "Draft.SmallStepMoreTemplates" via "Draft.SmallStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl")
### theory "HOL-Library.Function_Algebras"
### 0.118s elapsed time, 0.485s cpu time, 0.048s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.SmallStepMoreTemplates" via "Draft.SmallStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "rtrancl_path"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
### theory "HOL-Library.Set_Algebras"
### 0.199s elapsed time, 0.807s cpu time, 0.048s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SmallStepMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.333s elapsed time, 1.322s cpu time, 0.140s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SmallStepMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.284s elapsed time, 1.120s cpu time, 0.093s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SmallStepMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Type"
### 0.395s elapsed time, 1.547s cpu time, 0.182s GC time
Loading theory "Draft.Decl" (required by "Draft.SmallStepMoreTemplates" via "Draft.SmallStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel")
### theory "Draft.Decl"
### 0.055s elapsed time, 0.210s cpu time, 0.000s GC time
Loading theory "Draft.TypeRel" (required by "Draft.SmallStepMoreTemplates" via "Draft.SmallStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects")
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "widen"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Proofs for inductive predicate(s) "Methods"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
  Proving monotonicity ...
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Proofs for inductive predicate(s) "Fields"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### Introduced fixed type variable(s): 'a in "y"
### Introduced fixed type variable(s): 'a in "z"
### theory "HOL-Library.Stream"
### 1.093s elapsed time, 4.161s cpu time, 0.951s GC time
### theory "HOL-Library.BigO"
### 1.044s elapsed time, 3.963s cpu time, 0.951s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.TypeRel"
### 1.325s elapsed time, 4.275s cpu time, 0.964s GC time
Loading theory "Draft.Value" (required by "Draft.SmallStepMoreTemplates" via "Draft.SmallStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.019s elapsed time, 6.391s cpu time, 1.200s GC time
Loading theory "Draft.Templates" (required by "Draft.SmallStepMoreTemplates" via "Draft.ExtrEqs")
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.350s elapsed time, 0.728s cpu time, 0.054s GC time
Loading theory "Draft.Objects" (required by "Draft.SmallStepMoreTemplates" via "Draft.SmallStep" via "Draft.Expr" via "Draft.Exceptions")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.058s elapsed time, 0.119s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SmallStepMoreTemplates")
consts
  typeof_h ::
    "(nat => (char list * (char list * char list => val option)) option)
     => val => ty option"
### theory "Draft.Objects"
### 0.128s elapsed time, 0.283s cpu time, 0.061s GC time
Loading theory "Draft.Exceptions" (required by "Draft.SmallStepMoreTemplates" via "Draft.SmallStep" via "Draft.Expr")
### theory "Draft.Exceptions"
### 0.078s elapsed time, 0.154s cpu time, 0.000s GC time
Loading theory "Draft.Expr" (required by "Draft.SmallStepMoreTemplates" via "Draft.SmallStep")
Loading theory "Draft.State" (required by "Draft.SmallStepMoreTemplates" via "Draft.SmallStep")
### theory "Draft.State"
### 0.040s elapsed time, 0.117s cpu time, 0.000s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.553s elapsed time, 1.204s cpu time, 0.129s GC time
Found termination order: "{}"
### Ambiguous input (line 81 of "$AFP/Jinja/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  fv :: "char list exp => char list set"
  fvs :: "char list exp list => char list set"
### theory "Draft.Expr"
### 3.331s elapsed time, 4.691s cpu time, 1.315s GC time
Loading theory "Draft.SmallStep" (required by "Draft.SmallStepMoreTemplates")
### Ambiguous input (line 14 of "$AFP/Jinja/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blocks)
###       ("_tuple" ("\<^const>List.list.Cons" ("_position" V) ("_position" Vs))
###         ("_tuple_args"
###           ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts))
###           ("_tuple_args"
###             ("\<^const>List.list.Cons" ("_position" v) ("_position" vs))
###             ("_tuple_arg" ("_position" e))))))
###     ("\<^const>Expr.exp.Block" ("_position" V)
###       ("\<^const>Expr.exp.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_applC" ("_position" blocks)
###         ("_tuple" ("_position" Vs)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" vs)
###               ("_tuple_arg" ("_position" e)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blocks)
###       ("_tuple" ("\<^const>List.list.Cons" ("_position" V) ("_position" Vs))
###         ("_tuple_args"
###           ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts))
###           ("_tuple_args"
###             ("\<^const>List.list.Cons" ("_position" v) ("_position" vs))
###             ("_tuple_arg" ("_position" e))))))
###     ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v))
###       ("_applC" ("_position" blocks)
###         ("_tuple" ("_position" Vs)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" vs)
###               ("_tuple_arg" ("_position" e)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### !!vc vd vb. blocks ([], vc # vd, vb) = undefined
### !!v ve vf vd. blocks ([], v, ve # vf, vd) = undefined
### !!va vb vc. blocks (va # vb, [], vc) = undefined
### (3 more)
Found termination order:
  "(%p. size_list size (fst (snd (snd p)))) <*mlex*> {}"
### Ambiguous input (line 113 of "$AFP/Jinja/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" null) ("_position" F)
###         ("_position" D))
###       ("_applC" ("_position" Val) ("_position" v)))
###     ("_position" s) ("_applC" ("_position" THROW) ("_position" NullPointer))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" null) ("_position" F)
###       ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###     ("_position" s) ("_applC" ("_position" THROW) ("_position" NullPointer))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 206 of "$AFP/Jinja/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D))
###       ("_applC" ("_position" throw) ("_position" e)))
###     ("_position" s) ("_applC" ("_position" throw) ("_position" e))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###       ("_position" F) ("_position" D)
###       ("_applC" ("_position" throw) ("_position" e)))
###     ("_position" s) ("_applC" ("_position" throw) ("_position" e))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 183 of "$AFP/Jinja/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" hp)
###           ("_cargs" ("_position" s) ("_position" a)))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###           ("_position" C)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch"
###         ("_applC" ("_position" Throw) ("_position" a)) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss"
###           ("_applC" ("_position" Class) ("_position" C))
###           ("_applC" ("_position" addr) ("_position" a)))
###         ("_position" e\<^sub>2))
###       ("_position" s))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" hp)
###           ("_cargs" ("_position" s) ("_position" a)))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###           ("_position" C)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch"
###         ("_applC" ("_position" Throw) ("_position" a)) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.InitBlock" ("_position" V)
###         ("_applC" ("_position" Class) ("_position" C))
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" e\<^sub>2))
###       ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 101 of "$AFP/Jinja/J/SmallStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e') ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e') ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.exp.FAss" ("_position" e') ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s)
###       ("\<^const>Expr.exp.FAss" ("_position" e') ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 210 of "$AFP/Jinja/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v))
###       ("_applC" ("_position" Throw) ("_position" a)))
###     ("_position" s) ("_applC" ("_position" Throw) ("_position" a))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.Block" ("_position" V)
###       ("\<^const>Expr.exp.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_applC" ("_position" Throw) ("_position" a)))
###     ("_position" s) ("_applC" ("_position" Throw) ("_position" a))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 205 of "$AFP/Jinja/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc"
###         ("_applC" ("_position" throw) ("_position" e)) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_applC" ("_position" throw) ("_position" e))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_applC" ("_position" throw) ("_position" e))
###       ("_position" F) ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_applC" ("_position" throw) ("_position" e))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 105 of "$AFP/Jinja/J/SmallStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e'))
###       ("_position" s'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e))
###       ("_position" s)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e'))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 131 of "$AFP/Jinja/J/SmallStep.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 109 of "$AFP/Jinja/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###       ("_applC" ("_position" Some)
###         ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("_position" unit)
###       ("_tuple"
###         ("_MapUpd" ("_position" h)
###           ("_maplet" ("_position" a)
###             ("_tuple" ("_position" C)
###               ("_tuple_arg"
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))))
###         ("_tuple_arg" ("_position" l))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###       ("_applC" ("_position" Some)
###         ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("_position" unit)
###       ("_tuple"
###         ("_MapUpd" ("_position" h)
###           ("_maplet" ("_position" a)
###             ("_tuple" ("_position" C)
###               ("_tuple_arg"
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))))
###         ("_tuple_arg" ("_position" l))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 135 of "$AFP/Jinja/J/SmallStep.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V)
###                 ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 139 of "$AFP/Jinja/J/SmallStep.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_arg"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))))
###         ("_position" e')
###         ("_tuple" ("_position" h') ("_tuple_arg" ("_position" l')))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h) ("_tuple_arg" ("_position" l)))
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_arg"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 146 of "$AFP/Jinja/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v))
###       ("_applC" ("_position" Val) ("_position" u)))
###     ("_position" s) ("_applC" ("_position" Val) ("_position" u))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.Block" ("_position" V)
###       ("\<^const>Expr.exp.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_applC" ("_position" Val) ("_position" u)))
###     ("_position" s) ("_applC" ("_position" Val) ("_position" u))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "redp", "redsp"
  Proving monotonicity ...
### theory "Draft.SmallStep"
### 2.839s elapsed time, 3.786s cpu time, 1.168s GC time
Loading theory "Draft.SmallStepMoreTemplates"
val templateLemmas =
   [("SmallStep.redp_red_eq", "redp ?P = red' ?P",
     template_equation
      (template_app (template_hole 4, template_var 0), t_empty)),
    ("SmallStep.redsp_reds_eq", "redsp ?P = reds' ?P",
     template_equation
      (template_app (template_hole 4, template_var 0), t_empty)),
    ("SmallStep.red_hext_incr",
     "?P \<turnstile> \<langle>?e,(?h, ?l)\<rangle> \<rightarrow>
                      \<langle>?e',(?h', ?l')\<rangle> ==>
      ?h \<unlhd> ?h'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 6),
                      template_app
                       (template_app (template_hole 2, template_var 5),
                        template_var 4))),
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_app
                     (template_app (template_hole 2, template_var 2),
                      template_var 1)))),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 5), template_var 2)
           ))),
    ("SmallStep.reds_hext_incr",
     "?P \<turnstile> \<langle>?es,(?h, ?l)\<rangle> [\<rightarrow>]
                      \<langle>?es',(?h', ?l')\<rangle> ==>
      ?h \<unlhd> ?h'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 6),
                      template_app
                       (template_app (template_hole 2, template_var 5),
                        template_var 4))),
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_app
                     (template_app (template_hole 2, template_var 2),
                      template_var 1)))),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 5), template_var 2)
           ))),
    ("SmallStep.red_lcl_incr",
     "?P \<turnstile> \<langle>?e,
                       (?h\<^sub>0, ?l\<^sub>0)\<rangle> \<rightarrow>
                      \<langle>?e',(?h\<^sub>1, ?l\<^sub>1)\<rangle> ==>
      dom ?l\<^sub>0 <= dom ?l\<^sub>1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 6),
                      template_app
                       (template_app (template_hole 3, template_var 5),
                        template_var 4))),
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_app
                     (template_app (template_hole 3, template_var 2),
                      template_var 1)))),
              template_app (template_hole 2, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 4),
         template_app (template_hole 0, template_var 1)))),
    ("SmallStep.red_lcl_add",
     "?P \<turnstile> \<langle>?e,(?h, ?l)\<rangle> \<rightarrow>
                      \<langle>?e',(?h', ?l')\<rangle> ==>
      ?P \<turnstile> \<langle>?e,
                       (?h, ?l\<^sub>0 ++ ?l)\<rangle> \<rightarrow>
                      \<langle>?e',(?h', ?l\<^sub>0 ++ ?l')\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 7),
                      template_app
                       (template_app (template_hole 2, template_var 6),
                        template_var 5))),
                  template_app
                   (template_app (template_hole 3, template_var 4),
                    template_app
                     (template_app (template_hole 2, template_var 3),
                      template_var 2)))),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 7),
                     template_app
                      (template_app (template_hole 2, template_var 6),
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 5)))),
                 template_app
                  (template_app (template_hole 3, template_var 4),
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 2))))),
             template_app (template_hole 1, template_var 1))
           ))),
    ("SmallStep.Red_lcl_add",
     "?P \<turnstile> \<langle>?e,(?h, ?l)\<rangle> \<rightarrow>*
                      \<langle>?e',(?h', ?l')\<rangle> ==>
      ?P \<turnstile> \<langle>?e,
                       (?h, ?l\<^sub>0 ++ ?l)\<rangle> \<rightarrow>*
                      \<langle>?e',(?h', ?l\<^sub>0 ++ ?l')\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 7),
                      template_app
                       (template_app (template_hole 3, template_var 6),
                        template_var 5))),
                  template_app
                   (template_app (template_hole 4, template_var 4),
                    template_app
                     (template_app (template_hole 3, template_var 3),
                      template_var 2)))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 7),
                     template_app
                      (template_app (template_hole 3, template_var 6),
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 5)))),
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 2))))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)))
           ))),
    ("SmallStep.converse_rtrancl_induct_red",
     "[| ?P \<turnstile> \<langle>?e,(?h, ?l)\<rangle> \<rightarrow>*
                         \<langle>?e',(?h', ?l')\<rangle>;
         !!e h l. ?R e h l e h l;
         !!e\<^sub>0 h\<^sub>0 l\<^sub>0 e\<^sub>1 h\<^sub>1 l\<^sub>1 e' h'
            l'.
            [| ?P \<turnstile> \<langle>e\<^sub>0,
                                (h\<^sub>0,
                                 l\<^sub>0)\<rangle> \<rightarrow>
                               \<langle>e\<^sub>1,
                                (h\<^sub>1, l\<^sub>1)\<rangle>;
               ?R e\<^sub>1 h\<^sub>1 l\<^sub>1 e' h' l' |]
            ==> ?R e\<^sub>0 h\<^sub>0 l\<^sub>0 e' h' l' |]
      ==> ?R ?e ?h ?l ?e' ?h' ?l'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 7),
                      template_app
                       (template_app (template_hole 5, template_var 6),
                        template_var 5))),
                  template_app
                   (template_app (template_hole 6, template_var 4),
                    template_app
                     (template_app (template_hole 5, template_var 3),
                      template_var 2)))),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)))
            ),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_var 0, template_var 7),
                     template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("SmallStep.blocks_induct",
     "[| !!V Vs T Ts v vs e.
            ?P Vs Ts vs e ==> ?P (V # Vs) (T # Ts) (v # vs) e;
         !!e. ?P [] [] [] e; !!vc vd a b. ?P [] (vc # vd) a b;
         !!v ve vf vd. ?P [] v (ve # vf) vd;
         !!va vb a b. ?P (va # vb) [] a b;
         !!v vd ve vb. ?P v [] (vd # ve) vb;
         !!va vc vb ve. ?P (va # vc) vb [] ve;
         !!v va vc ve. ?P v (va # vc) [] ve |]
      ==> ?P ?a0a ?a0b ?a0c ?a0d",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_var 4, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("SmallStep.red_reds_inducts",
     "[| ?P \<turnstile> \<langle>?x1a,(?x2a, ?x2b)\<rangle> \<rightarrow>
                         \<langle>?x3a,(?x4a, ?x4b)\<rangle>;
         !!h a C FDTs h' l.
            [| new_Addr h = \<lfloor>a\<rfloor>;
               ?P \<turnstile> C has_fields FDTs;
               h' = h(a |-> (C, init_fields FDTs)) |]
            ==> ?P1.0 (new C) h l (addr a) h' l;
         !!h C l.
            new_Addr h = None ==> ?P1.0 (new C) h l (THROW OutOfMemory) h l;
         !!e a b e' aa ba C.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (Cast C e) a b (Cast C e') aa ba;
         !!C a b. ?P1.0 (Cast C null) a b null a b;
         !!a b aa D fs C.
            [| hp (a, b) aa = \<lfloor>(D, fs)\<rfloor>;
               ?P \<turnstile> D \<preceq>\<^sup>* C |]
            ==> ?P1.0 (Cast C (addr aa)) a b (addr aa) a b;
         !!a b aa D fs C.
            [| hp (a, b) aa = \<lfloor>(D, fs)\<rfloor>;
               (D, C) ~: (subcls1 ?P)^* |]
            ==> ?P1.0 (Cast C (addr aa)) a b (THROW ClassCast) a b;
         !!e a b e' aa ba bop e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (e \<guillemotleft>bop\<guillemotright> e\<^sub>2) a b
                 (e' \<guillemotleft>bop\<guillemotright> e\<^sub>2) aa ba;
         !!e a b e' aa ba v\<^sub>1 bop.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> e)
                 a b (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> e')
                 aa ba;
         !!bop v\<^sub>1 v\<^sub>2 v a b.
            binop (bop, v\<^sub>1, v\<^sub>2) = \<lfloor>v\<rfloor> ==>
            ?P1.0
             (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> Val
                            v\<^sub>2)
             a b (Val v) a b;
         !!a b V v.
            lcl (a, b) V = \<lfloor>v\<rfloor> ==>
            ?P1.0 (Var V) a b (Val v) a b;
         !!e a b e' aa ba V.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (V:=e) a b (V:=e') aa ba;
         !!V v h l. ?P1.0 (V:=Val v) h l unit h (l(V |-> v));
         !!e a b e' aa ba F D.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (e\<bullet>F{D}) a b (e'\<bullet>F{D}) aa ba;
         !!a b aa C fs F D v.
            [| hp (a, b) aa = \<lfloor>(C, fs)\<rfloor>;
               fs (F, D) = \<lfloor>v\<rfloor> |]
            ==> ?P1.0 (addr aa\<bullet>F{D}) a b (Val v) a b;
         !!F D a b. ?P1.0 (null\<bullet>F{D}) a b (THROW NullPointer) a b;
         !!e a b e' aa ba F D e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (e\<bullet>F{D} := e\<^sub>2) a b
                 (e'\<bullet>F{D} := e\<^sub>2) aa ba;
         !!e a b e' aa ba v F D.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (Val v\<bullet>F{D} := e) a b
                 (Val v\<bullet>F{D} := e') aa ba;
         !!h a C fs F D v l.
            h a = \<lfloor>(C, fs)\<rfloor> ==>
            ?P1.0 (addr a\<bullet>F{D} := Val v) h l unit
             (h(a |-> (C, fs((F, D) |-> v)))) l;
         !!F D v a b.
            ?P1.0 (null\<bullet>F{D} := Val v) a b (THROW NullPointer) a b;
         !!e a b e' aa ba M es.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (e\<bullet>M(es)) a b (e'\<bullet>M(es)) aa ba;
         !!es a b es' aa ba v M.
            [| ?P \<turnstile> \<langle>es,(a, b)\<rangle> [\<rightarrow>]
                               \<langle>es',(aa, ba)\<rangle>;
               ?P2.0 es a b es' aa ba |]
            ==> ?P1.0 (Val v\<bullet>M(es)) a b (Val v\<bullet>M(es')) aa
                 ba;
         !!a b aa C fs M Ts T pns body D vs.
            [| hp (a, b) aa = \<lfloor>(C, fs)\<rfloor>;
               ?P \<turnstile> C sees M: Ts\<rightarrow>T = (pns,
                       body) in D;
               length vs = length pns; length Ts = length pns |]
            ==> ?P1.0 (addr aa\<bullet>M(map Val vs)) a b
                 (blocks (this # pns, Class D # Ts, Addr aa # vs, body)) a
                 b;
         !!M vs a b.
            ?P1.0 (null\<bullet>M(map Val vs)) a b (THROW NullPointer) a b;
         !!e h l V e' h' l' T.
            [| ?P \<turnstile> \<langle>e,
                                (h, l(V := None))\<rangle> \<rightarrow>
                               \<langle>e',(h', l')\<rangle>;
               ?P1.0 e h (l(V := None)) e' h' l'; l' V = None;
               ~ assigned V e |]
            ==> ?P1.0 {V:T; e} h l {V:T; e'} h' (l'(V := l V));
         !!e h l V e' h' l' v T.
            [| ?P \<turnstile> \<langle>e,
                                (h, l(V := None))\<rangle> \<rightarrow>
                               \<langle>e',(h', l')\<rangle>;
               ?P1.0 e h (l(V := None)) e' h' l';
               l' V = \<lfloor>v\<rfloor>; ~ assigned V e |]
            ==> ?P1.0 {V:T; e} h l {V:T; V:=Val v;; e'} h' (l'(V := l V));
         !!e h l V v e' h' l' v' T.
            [| ?P \<turnstile> \<langle>e,
                                (h, l(V |-> v))\<rangle> \<rightarrow>
                               \<langle>e',(h', l')\<rangle>;
               ?P1.0 e h (l(V |-> v)) e' h' l';
               l' V = \<lfloor>v'\<rfloor> |]
            ==> ?P1.0 {V:T; V:=Val v;; e} h l {V:T; V:=Val v';; e'} h'
                 (l'(V := l V));
         !!V T u a b. ?P1.0 {V:T; Val u} a b (Val u) a b;
         !!V T v u a b. ?P1.0 {V:T; V:=Val v;; Val u} a b (Val u) a b;
         !!e a b e' aa ba e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (e;; e\<^sub>2) a b (e';; e\<^sub>2) aa ba;
         !!v e\<^sub>2 a b. ?P1.0 (Val v;; e\<^sub>2) a b e\<^sub>2 a b;
         !!e a b e' aa ba e\<^sub>1 e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (if (e) e\<^sub>1 else e\<^sub>2) a b
                 (if (e') e\<^sub>1 else e\<^sub>2) aa ba;
         !!e\<^sub>1 e\<^sub>2 a b.
            ?P1.0 (if (true) e\<^sub>1 else e\<^sub>2) a b e\<^sub>1 a b;
         !!e\<^sub>1 e\<^sub>2 a b.
            ?P1.0 (if (false) e\<^sub>1 else e\<^sub>2) a b e\<^sub>2 a b;
         !!b c a ba.
            ?P1.0 (while (b) c) a ba (if (b) (c;; while (b) c) else unit) a
             ba;
         !!e a b e' aa ba.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (throw e) a b (throw e') aa ba;
         !!a b. ?P1.0 (throw null) a b (THROW NullPointer) a b;
         !!e a b e' aa ba C V e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (try e catch(C V) e\<^sub>2) a b
                 (try e' catch(C V) e\<^sub>2) aa ba;
         !!v C V e\<^sub>2 a b.
            ?P1.0 (try Val v catch(C V) e\<^sub>2) a b (Val v) a b;
         !!a b aa D fs C V e\<^sub>2.
            [| hp (a, b) aa = \<lfloor>(D, fs)\<rfloor>;
               ?P \<turnstile> D \<preceq>\<^sup>* C |]
            ==> ?P1.0 (try Throw aa catch(C V) e\<^sub>2) a b
                 {V:Class C; V:=addr aa;; e\<^sub>2} a b;
         !!a b aa D fs C V e\<^sub>2.
            [| hp (a, b) aa = \<lfloor>(D, fs)\<rfloor>;
               (D, C) ~: (subcls1 ?P)^* |]
            ==> ?P1.0 (try Throw aa catch(C V) e\<^sub>2) a b (Throw aa) a
                 b;
         !!e a b e' aa ba es.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P2.0 (e # es) a b (e' # es) aa ba;
         !!es a b es' aa ba v.
            [| ?P \<turnstile> \<langle>es,(a, b)\<rangle> [\<rightarrow>]
                               \<langle>es',(aa, ba)\<rangle>;
               ?P2.0 es a b es' aa ba |]
            ==> ?P2.0 (Val v # es) a b (Val v # es') aa ba;
         !!C e a b. ?P1.0 (Cast C (throw e)) a b (throw e) a b;
         !!e bop e\<^sub>2 a b.
            ?P1.0 (throw e \<guillemotleft>bop\<guillemotright> e\<^sub>2) a
             b (throw e) a b;
         !!v\<^sub>1 bop e a b.
            ?P1.0
             (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> throw e) a
             b (throw e) a b;
         !!V e a b. ?P1.0 (V:=throw e) a b (throw e) a b;
         !!e F D a b. ?P1.0 (throw e\<bullet>F{D}) a b (throw e) a b;
         !!e F D e\<^sub>2 a b.
            ?P1.0 (throw e\<bullet>F{D} := e\<^sub>2) a b (throw e) a b;
         !!v F D e a b.
            ?P1.0 (Val v\<bullet>F{D} := throw e) a b (throw e) a b;
         !!e M es a b. ?P1.0 (throw e\<bullet>M(es)) a b (throw e) a b;
         !!es vs e es' v M a b.
            es = map Val vs @ throw e # es' ==>
            ?P1.0 (Val v\<bullet>M(es)) a b (throw e) a b;
         !!V T a aa b. ?P1.0 {V:T; Throw a} aa b (Throw a) aa b;
         !!V T v a aa b.
            ?P1.0 {V:T; V:=Val v;; Throw a} aa b (Throw a) aa b;
         !!e e\<^sub>2 a b. ?P1.0 (throw e;; e\<^sub>2) a b (throw e) a b;
         !!e e\<^sub>1 e\<^sub>2 a b.
            ?P1.0 (if (throw e) e\<^sub>1 else e\<^sub>2) a b (throw e) a b;
         !!e a b. ?P1.0 (throw (throw e)) a b (throw e) a b |]
      ==> ?P1.0 ?x1a ?x2a ?x2b ?x3a ?x4a ?x4b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 93,
                template_app
                 (template_app
                   (template_hole 92,
                    template_app
                     (template_app (template_hole 91, template_var 8),
                      template_app
                       (template_app (template_hole 90, template_var 7),
                        template_var 6))),
                  template_app
                   (template_app (template_hole 91, template_var 5),
                    template_app
                     (template_app (template_hole 90, template_var 4),
                      template_var 3)))),
              template_app (template_hole 89, template_var 2))
            ),
        template_predicate (template_app (template_hole 88, t_empty)),
        template_predicate (template_app (template_hole 88, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 86, t_empty)),
        template_predicate (template_app (template_hole 88, t_empty)),
        template_predicate (template_app (template_hole 88, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 55, t_empty)),
        template_predicate (template_app (template_hole 88, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 86, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 88, t_empty)),
        template_predicate (template_app (template_hole 86, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 88, t_empty)),
        template_predicate (template_app (template_hole 86, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 38, t_empty)),
        template_predicate (template_app (template_hole 88, t_empty)),
        template_predicate (template_app (template_hole 86, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 86, t_empty)),
        template_predicate (template_app (template_hole 86, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 53, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 88, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 53, t_empty)),
        template_predicate (template_app (template_hole 88, t_empty)),
        template_predicate (template_app (template_hole 88, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 38, t_empty)),
        template_predicate (template_app (template_hole 86, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 53, t_empty)),
        template_predicate (template_app (template_hole 86, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 53, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 38, t_empty)),
        template_predicate (template_app (template_hole 86, t_empty)),
        template_predicate (template_app (template_hole 86, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_var 1, template_var 8),
                     template_var 7),
                   template_var 6),
                 template_var 5),
               template_var 4),
             template_var 3)
           ))),
    ("SmallStep.red_reds_inducts",
     "[| ?P \<turnstile> \<langle>?x5a,(?x6a, ?x6b)\<rangle> [\<rightarrow>]
                         \<langle>?x7a,(?x8a, ?x8b)\<rangle>;
         !!h a C FDTs h' l.
            [| new_Addr h = \<lfloor>a\<rfloor>;
               ?P \<turnstile> C has_fields FDTs;
               h' = h(a |-> (C, init_fields FDTs)) |]
            ==> ?P1.0 (new C) h l (addr a) h' l;
         !!h C l.
            new_Addr h = None ==> ?P1.0 (new C) h l (THROW OutOfMemory) h l;
         !!e a b e' aa ba C.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (Cast C e) a b (Cast C e') aa ba;
         !!C a b. ?P1.0 (Cast C null) a b null a b;
         !!a b aa D fs C.
            [| hp (a, b) aa = \<lfloor>(D, fs)\<rfloor>;
               ?P \<turnstile> D \<preceq>\<^sup>* C |]
            ==> ?P1.0 (Cast C (addr aa)) a b (addr aa) a b;
         !!a b aa D fs C.
            [| hp (a, b) aa = \<lfloor>(D, fs)\<rfloor>;
               (D, C) ~: (subcls1 ?P)^* |]
            ==> ?P1.0 (Cast C (addr aa)) a b (THROW ClassCast) a b;
         !!e a b e' aa ba bop e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (e \<guillemotleft>bop\<guillemotright> e\<^sub>2) a b
                 (e' \<guillemotleft>bop\<guillemotright> e\<^sub>2) aa ba;
         !!e a b e' aa ba v\<^sub>1 bop.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> e)
                 a b (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> e')
                 aa ba;
         !!bop v\<^sub>1 v\<^sub>2 v a b.
            binop (bop, v\<^sub>1, v\<^sub>2) = \<lfloor>v\<rfloor> ==>
            ?P1.0
             (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> Val
                            v\<^sub>2)
             a b (Val v) a b;
         !!a b V v.
            lcl (a, b) V = \<lfloor>v\<rfloor> ==>
            ?P1.0 (Var V) a b (Val v) a b;
         !!e a b e' aa ba V.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (V:=e) a b (V:=e') aa ba;
         !!V v h l. ?P1.0 (V:=Val v) h l unit h (l(V |-> v));
         !!e a b e' aa ba F D.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (e\<bullet>F{D}) a b (e'\<bullet>F{D}) aa ba;
         !!a b aa C fs F D v.
            [| hp (a, b) aa = \<lfloor>(C, fs)\<rfloor>;
               fs (F, D) = \<lfloor>v\<rfloor> |]
            ==> ?P1.0 (addr aa\<bullet>F{D}) a b (Val v) a b;
         !!F D a b. ?P1.0 (null\<bullet>F{D}) a b (THROW NullPointer) a b;
         !!e a b e' aa ba F D e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (e\<bullet>F{D} := e\<^sub>2) a b
                 (e'\<bullet>F{D} := e\<^sub>2) aa ba;
         !!e a b e' aa ba v F D.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (Val v\<bullet>F{D} := e) a b
                 (Val v\<bullet>F{D} := e') aa ba;
         !!h a C fs F D v l.
            h a = \<lfloor>(C, fs)\<rfloor> ==>
            ?P1.0 (addr a\<bullet>F{D} := Val v) h l unit
             (h(a |-> (C, fs((F, D) |-> v)))) l;
         !!F D v a b.
            ?P1.0 (null\<bullet>F{D} := Val v) a b (THROW NullPointer) a b;
         !!e a b e' aa ba M es.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (e\<bullet>M(es)) a b (e'\<bullet>M(es)) aa ba;
         !!es a b es' aa ba v M.
            [| ?P \<turnstile> \<langle>es,(a, b)\<rangle> [\<rightarrow>]
                               \<langle>es',(aa, ba)\<rangle>;
               ?P2.0 es a b es' aa ba |]
            ==> ?P1.0 (Val v\<bullet>M(es)) a b (Val v\<bullet>M(es')) aa
                 ba;
         !!a b aa C fs M Ts T pns body D vs.
            [| hp (a, b) aa = \<lfloor>(C, fs)\<rfloor>;
               ?P \<turnstile> C sees M: Ts\<rightarrow>T = (pns,
                       body) in D;
               length vs = length pns; length Ts = length pns |]
            ==> ?P1.0 (addr aa\<bullet>M(map Val vs)) a b
                 (blocks (this # pns, Class D # Ts, Addr aa # vs, body)) a
                 b;
         !!M vs a b.
            ?P1.0 (null\<bullet>M(map Val vs)) a b (THROW NullPointer) a b;
         !!e h l V e' h' l' T.
            [| ?P \<turnstile> \<langle>e,
                                (h, l(V := None))\<rangle> \<rightarrow>
                               \<langle>e',(h', l')\<rangle>;
               ?P1.0 e h (l(V := None)) e' h' l'; l' V = None;
               ~ assigned V e |]
            ==> ?P1.0 {V:T; e} h l {V:T; e'} h' (l'(V := l V));
         !!e h l V e' h' l' v T.
            [| ?P \<turnstile> \<langle>e,
                                (h, l(V := None))\<rangle> \<rightarrow>
                               \<langle>e',(h', l')\<rangle>;
               ?P1.0 e h (l(V := None)) e' h' l';
               l' V = \<lfloor>v\<rfloor>; ~ assigned V e |]
            ==> ?P1.0 {V:T; e} h l {V:T; V:=Val v;; e'} h' (l'(V := l V));
         !!e h l V v e' h' l' v' T.
            [| ?P \<turnstile> \<langle>e,
                                (h, l(V |-> v))\<rangle> \<rightarrow>
                               \<langle>e',(h', l')\<rangle>;
               ?P1.0 e h (l(V |-> v)) e' h' l';
               l' V = \<lfloor>v'\<rfloor> |]
            ==> ?P1.0 {V:T; V:=Val v;; e} h l {V:T; V:=Val v';; e'} h'
                 (l'(V := l V));
         !!V T u a b. ?P1.0 {V:T; Val u} a b (Val u) a b;
         !!V T v u a b. ?P1.0 {V:T; V:=Val v;; Val u} a b (Val u) a b;
         !!e a b e' aa ba e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (e;; e\<^sub>2) a b (e';; e\<^sub>2) aa ba;
         !!v e\<^sub>2 a b. ?P1.0 (Val v;; e\<^sub>2) a b e\<^sub>2 a b;
         !!e a b e' aa ba e\<^sub>1 e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (if (e) e\<^sub>1 else e\<^sub>2) a b
                 (if (e') e\<^sub>1 else e\<^sub>2) aa ba;
         !!e\<^sub>1 e\<^sub>2 a b.
            ?P1.0 (if (true) e\<^sub>1 else e\<^sub>2) a b e\<^sub>1 a b;
         !!e\<^sub>1 e\<^sub>2 a b.
            ?P1.0 (if (false) e\<^sub>1 else e\<^sub>2) a b e\<^sub>2 a b;
         !!b c a ba.
            ?P1.0 (while (b) c) a ba (if (b) (c;; while (b) c) else unit) a
             ba;
         !!e a b e' aa ba.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (throw e) a b (throw e') aa ba;
         !!a b. ?P1.0 (throw null) a b (THROW NullPointer) a b;
         !!e a b e' aa ba C V e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (try e catch(C V) e\<^sub>2) a b
                 (try e' catch(C V) e\<^sub>2) aa ba;
         !!v C V e\<^sub>2 a b.
            ?P1.0 (try Val v catch(C V) e\<^sub>2) a b (Val v) a b;
         !!a b aa D fs C V e\<^sub>2.
            [| hp (a, b) aa = \<lfloor>(D, fs)\<rfloor>;
               ?P \<turnstile> D \<preceq>\<^sup>* C |]
            ==> ?P1.0 (try Throw aa catch(C V) e\<^sub>2) a b
                 {V:Class C; V:=addr aa;; e\<^sub>2} a b;
         !!a b aa D fs C V e\<^sub>2.
            [| hp (a, b) aa = \<lfloor>(D, fs)\<rfloor>;
               (D, C) ~: (subcls1 ?P)^* |]
            ==> ?P1.0 (try Throw aa catch(C V) e\<^sub>2) a b (Throw aa) a
                 b;
         !!e a b e' aa ba es.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P2.0 (e # es) a b (e' # es) aa ba;
         !!es a b es' aa ba v.
            [| ?P \<turnstile> \<langle>es,(a, b)\<rangle> [\<rightarrow>]
                               \<langle>es',(aa, ba)\<rangle>;
               ?P2.0 es a b es' aa ba |]
            ==> ?P2.0 (Val v # es) a b (Val v # es') aa ba;
         !!C e a b. ?P1.0 (Cast C (throw e)) a b (throw e) a b;
         !!e bop e\<^sub>2 a b.
            ?P1.0 (throw e \<guillemotleft>bop\<guillemotright> e\<^sub>2) a
             b (throw e) a b;
         !!v\<^sub>1 bop e a b.
            ?P1.0
             (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> throw e) a
             b (throw e) a b;
         !!V e a b. ?P1.0 (V:=throw e) a b (throw e) a b;
         !!e F D a b. ?P1.0 (throw e\<bullet>F{D}) a b (throw e) a b;
         !!e F D e\<^sub>2 a b.
            ?P1.0 (throw e\<bullet>F{D} := e\<^sub>2) a b (throw e) a b;
         !!v F D e a b.
            ?P1.0 (Val v\<bullet>F{D} := throw e) a b (throw e) a b;
         !!e M es a b. ?P1.0 (throw e\<bullet>M(es)) a b (throw e) a b;
         !!es vs e es' v M a b.
            es = map Val vs @ throw e # es' ==>
            ?P1.0 (Val v\<bullet>M(es)) a b (throw e) a b;
         !!V T a aa b. ?P1.0 {V:T; Throw a} aa b (Throw a) aa b;
         !!V T v a aa b.
            ?P1.0 {V:T; V:=Val v;; Throw a} aa b (Throw a) aa b;
         !!e e\<^sub>2 a b. ?P1.0 (throw e;; e\<^sub>2) a b (throw e) a b;
         !!e e\<^sub>1 e\<^sub>2 a b.
            ?P1.0 (if (throw e) e\<^sub>1 else e\<^sub>2) a b (throw e) a b;
         !!e a b. ?P1.0 (throw (throw e)) a b (throw e) a b |]
      ==> ?P2.0 ?x5a ?x6a ?x6b ?x7a ?x8a ?x8b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 93,
                template_app
                 (template_app
                   (template_hole 92,
                    template_app
                     (template_app (template_hole 91, template_var 8),
                      template_app
                       (template_app (template_hole 90, template_var 7),
                        template_var 6))),
                  template_app
                   (template_app (template_hole 91, template_var 5),
                    template_app
                     (template_app (template_hole 90, template_var 4),
                      template_var 3)))),
              template_app (template_hole 89, template_var 2))
            ),
        template_predicate (template_app (template_hole 88, t_empty)),
        template_predicate (template_app (template_hole 88, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 86, t_empty)),
        template_predicate (template_app (template_hole 88, t_empty)),
        template_predicate (template_app (template_hole 88, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 51, t_empty)),
        template_predicate (template_app (template_hole 88, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 86, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 88, t_empty)),
        template_predicate (template_app (template_hole 86, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 88, t_empty)),
        template_predicate (template_app (template_hole 86, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 88, t_empty)),
        template_predicate (template_app (template_hole 86, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 86, t_empty)),
        template_predicate (template_app (template_hole 86, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 49, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 88, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 49, t_empty)),
        template_predicate (template_app (template_hole 88, t_empty)),
        template_predicate (template_app (template_hole 88, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 86, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 49, t_empty)),
        template_predicate (template_app (template_hole 86, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 49, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 86, t_empty)),
        template_predicate (template_app (template_hole 86, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty)),
        template_predicate (template_app (template_hole 67, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_var 0, template_var 8),
                     template_var 7),
                   template_var 6),
                 template_var 5),
               template_var 4),
             template_var 3)
           ))),
    ("SmallStep.red_reds_induct",
     "[| !!h a C FDTs h' l.
            [| new_Addr h = \<lfloor>a\<rfloor>;
               ?P \<turnstile> C has_fields FDTs;
               h' = h(a |-> (C, init_fields FDTs)) |]
            ==> ?P1.0 (new C) h l (addr a) h' l;
         !!h C l.
            new_Addr h = None ==> ?P1.0 (new C) h l (THROW OutOfMemory) h l;
         !!e a b e' aa ba C.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (Cast C e) a b (Cast C e') aa ba;
         !!C a b. ?P1.0 (Cast C null) a b null a b;
         !!a b aa D fs C.
            [| hp (a, b) aa = \<lfloor>(D, fs)\<rfloor>;
               ?P \<turnstile> D \<preceq>\<^sup>* C |]
            ==> ?P1.0 (Cast C (addr aa)) a b (addr aa) a b;
         !!a b aa D fs C.
            [| hp (a, b) aa = \<lfloor>(D, fs)\<rfloor>;
               (D, C) ~: (subcls1 ?P)^* |]
            ==> ?P1.0 (Cast C (addr aa)) a b (THROW ClassCast) a b;
         !!e a b e' aa ba bop e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (e \<guillemotleft>bop\<guillemotright> e\<^sub>2) a b
                 (e' \<guillemotleft>bop\<guillemotright> e\<^sub>2) aa ba;
         !!e a b e' aa ba v\<^sub>1 bop.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> e)
                 a b (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> e')
                 aa ba;
         !!bop v\<^sub>1 v\<^sub>2 v a b.
            binop (bop, v\<^sub>1, v\<^sub>2) = \<lfloor>v\<rfloor> ==>
            ?P1.0
             (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> Val
                            v\<^sub>2)
             a b (Val v) a b;
         !!a b V v.
            lcl (a, b) V = \<lfloor>v\<rfloor> ==>
            ?P1.0 (Var V) a b (Val v) a b;
         !!e a b e' aa ba V.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (V:=e) a b (V:=e') aa ba;
         !!V v h l. ?P1.0 (V:=Val v) h l unit h (l(V |-> v));
         !!e a b e' aa ba F D.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (e\<bullet>F{D}) a b (e'\<bullet>F{D}) aa ba;
         !!a b aa C fs F D v.
            [| hp (a, b) aa = \<lfloor>(C, fs)\<rfloor>;
               fs (F, D) = \<lfloor>v\<rfloor> |]
            ==> ?P1.0 (addr aa\<bullet>F{D}) a b (Val v) a b;
         !!F D a b. ?P1.0 (null\<bullet>F{D}) a b (THROW NullPointer) a b;
         !!e a b e' aa ba F D e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (e\<bullet>F{D} := e\<^sub>2) a b
                 (e'\<bullet>F{D} := e\<^sub>2) aa ba;
         !!e a b e' aa ba v F D.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (Val v\<bullet>F{D} := e) a b
                 (Val v\<bullet>F{D} := e') aa ba;
         !!h a C fs F D v l.
            h a = \<lfloor>(C, fs)\<rfloor> ==>
            ?P1.0 (addr a\<bullet>F{D} := Val v) h l unit
             (h(a |-> (C, fs((F, D) |-> v)))) l;
         !!F D v a b.
            ?P1.0 (null\<bullet>F{D} := Val v) a b (THROW NullPointer) a b;
         !!e a b e' aa ba M es.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (e\<bullet>M(es)) a b (e'\<bullet>M(es)) aa ba;
         !!es a b es' aa ba v M.
            [| ?P \<turnstile> \<langle>es,(a, b)\<rangle> [\<rightarrow>]
                               \<langle>es',(aa, ba)\<rangle>;
               ?P2.0 es a b es' aa ba |]
            ==> ?P1.0 (Val v\<bullet>M(es)) a b (Val v\<bullet>M(es')) aa
                 ba;
         !!a b aa C fs M Ts T pns body D vs.
            [| hp (a, b) aa = \<lfloor>(C, fs)\<rfloor>;
               ?P \<turnstile> C sees M: Ts\<rightarrow>T = (pns,
                       body) in D;
               length vs = length pns; length Ts = length pns |]
            ==> ?P1.0 (addr aa\<bullet>M(map Val vs)) a b
                 (blocks (this # pns, Class D # Ts, Addr aa # vs, body)) a
                 b;
         !!M vs a b.
            ?P1.0 (null\<bullet>M(map Val vs)) a b (THROW NullPointer) a b;
         !!e h l V e' h' l' T.
            [| ?P \<turnstile> \<langle>e,
                                (h, l(V := None))\<rangle> \<rightarrow>
                               \<langle>e',(h', l')\<rangle>;
               ?P1.0 e h (l(V := None)) e' h' l'; l' V = None;
               ~ assigned V e |]
            ==> ?P1.0 {V:T; e} h l {V:T; e'} h' (l'(V := l V));
         !!e h l V e' h' l' v T.
            [| ?P \<turnstile> \<langle>e,
                                (h, l(V := None))\<rangle> \<rightarrow>
                               \<langle>e',(h', l')\<rangle>;
               ?P1.0 e h (l(V := None)) e' h' l';
               l' V = \<lfloor>v\<rfloor>; ~ assigned V e |]
            ==> ?P1.0 {V:T; e} h l {V:T; V:=Val v;; e'} h' (l'(V := l V));
         !!e h l V v e' h' l' v' T.
            [| ?P \<turnstile> \<langle>e,
                                (h, l(V |-> v))\<rangle> \<rightarrow>
                               \<langle>e',(h', l')\<rangle>;
               ?P1.0 e h (l(V |-> v)) e' h' l';
               l' V = \<lfloor>v'\<rfloor> |]
            ==> ?P1.0 {V:T; V:=Val v;; e} h l {V:T; V:=Val v';; e'} h'
                 (l'(V := l V));
         !!V T u a b. ?P1.0 {V:T; Val u} a b (Val u) a b;
         !!V T v u a b. ?P1.0 {V:T; V:=Val v;; Val u} a b (Val u) a b;
         !!e a b e' aa ba e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (e;; e\<^sub>2) a b (e';; e\<^sub>2) aa ba;
         !!v e\<^sub>2 a b. ?P1.0 (Val v;; e\<^sub>2) a b e\<^sub>2 a b;
         !!e a b e' aa ba e\<^sub>1 e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (if (e) e\<^sub>1 else e\<^sub>2) a b
                 (if (e') e\<^sub>1 else e\<^sub>2) aa ba;
         !!e\<^sub>1 e\<^sub>2 a b.
            ?P1.0 (if (true) e\<^sub>1 else e\<^sub>2) a b e\<^sub>1 a b;
         !!e\<^sub>1 e\<^sub>2 a b.
            ?P1.0 (if (false) e\<^sub>1 else e\<^sub>2) a b e\<^sub>2 a b;
         !!b c a ba.
            ?P1.0 (while (b) c) a ba (if (b) (c;; while (b) c) else unit) a
             ba;
         !!e a b e' aa ba.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (throw e) a b (throw e') aa ba;
         !!a b. ?P1.0 (throw null) a b (THROW NullPointer) a b;
         !!e a b e' aa ba C V e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P1.0 (try e catch(C V) e\<^sub>2) a b
                 (try e' catch(C V) e\<^sub>2) aa ba;
         !!v C V e\<^sub>2 a b.
            ?P1.0 (try Val v catch(C V) e\<^sub>2) a b (Val v) a b;
         !!a b aa D fs C V e\<^sub>2.
            [| hp (a, b) aa = \<lfloor>(D, fs)\<rfloor>;
               ?P \<turnstile> D \<preceq>\<^sup>* C |]
            ==> ?P1.0 (try Throw aa catch(C V) e\<^sub>2) a b
                 {V:Class C; V:=addr aa;; e\<^sub>2} a b;
         !!a b aa D fs C V e\<^sub>2.
            [| hp (a, b) aa = \<lfloor>(D, fs)\<rfloor>;
               (D, C) ~: (subcls1 ?P)^* |]
            ==> ?P1.0 (try Throw aa catch(C V) e\<^sub>2) a b (Throw aa) a
                 b;
         !!e a b e' aa ba es.
            [| ?P \<turnstile> \<langle>e,(a, b)\<rangle> \<rightarrow>
                               \<langle>e',(aa, ba)\<rangle>;
               ?P1.0 e a b e' aa ba |]
            ==> ?P2.0 (e # es) a b (e' # es) aa ba;
         !!es a b es' aa ba v.
            [| ?P \<turnstile> \<langle>es,(a, b)\<rangle> [\<rightarrow>]
                               \<langle>es',(aa, ba)\<rangle>;
               ?P2.0 es a b es' aa ba |]
            ==> ?P2.0 (Val v # es) a b (Val v # es') aa ba;
         !!C e a b. ?P1.0 (Cast C (throw e)) a b (throw e) a b;
         !!e bop e\<^sub>2 a b.
            ?P1.0 (throw e \<guillemotleft>bop\<guillemotright> e\<^sub>2) a
             b (throw e) a b;
         !!v\<^sub>1 bop e a b.
            ?P1.0
             (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> throw e) a
             b (throw e) a b;
         !!V e a b. ?P1.0 (V:=throw e) a b (throw e) a b;
         !!e F D a b. ?P1.0 (throw e\<bullet>F{D}) a b (throw e) a b;
         !!e F D e\<^sub>2 a b.
            ?P1.0 (throw e\<bullet>F{D} := e\<^sub>2) a b (throw e) a b;
         !!v F D e a b.
            ?P1.0 (Val v\<bullet>F{D} := throw e) a b (throw e) a b;
         !!e M es a b. ?P1.0 (throw e\<bullet>M(es)) a b (throw e) a b;
         !!es vs e es' v M a b.
            es = map Val vs @ throw e # es' ==>
            ?P1.0 (Val v\<bullet>M(es)) a b (throw e) a b;
         !!V T a aa b. ?P1.0 {V:T; Throw a} aa b (Throw a) aa b;
         !!V T v a aa b.
            ?P1.0 {V:T; V:=Val v;; Throw a} aa b (Throw a) aa b;
         !!e e\<^sub>2 a b. ?P1.0 (throw e;; e\<^sub>2) a b (throw e) a b;
         !!e e\<^sub>1 e\<^sub>2 a b.
            ?P1.0 (if (throw e) e\<^sub>1 else e\<^sub>2) a b (throw e) a b;
         !!e a b. ?P1.0 (throw (throw e)) a b (throw e) a b |]
      ==> (?P \<turnstile> \<langle>?x1a,(?x2a, ?x2b)\<rangle> \<rightarrow>
                           \<langle>?x3a,(?x4a, ?x4b)\<rangle> -->
           ?P1.0 ?x1a ?x2a ?x2b ?x3a ?x4a ?x4b) &
          (?P \<turnstile> \<langle>?x5a,
                            (?x6a, ?x6b)\<rangle> [\<rightarrow>]
                           \<langle>?x7a,(?x8a, ?x8b)\<rangle> -->
           ?P2.0 ?x5a ?x6a ?x6b ?x7a ?x8a ?x8b)",
     template_implication
      ([template_predicate (template_app (template_hole 96, t_empty)),
        template_predicate (template_app (template_hole 96, t_empty)),
        template_predicate (template_app (template_hole 74, t_empty)),
        template_predicate (template_app (template_hole 94, t_empty)),
        template_predicate (template_app (template_hole 96, t_empty)),
        template_predicate (template_app (template_hole 96, t_empty)),
        template_predicate (template_app (template_hole 74, t_empty)),
        template_predicate (template_app (template_hole 74, t_empty)),
        template_predicate (template_app (template_hole 57, t_empty)),
        template_predicate (template_app (template_hole 96, t_empty)),
        template_predicate (template_app (template_hole 74, t_empty)),
        template_predicate (template_app (template_hole 94, t_empty)),
        template_predicate (template_app (template_hole 74, t_empty)),
        template_predicate (template_app (template_hole 96, t_empty)),
        template_predicate (template_app (template_hole 94, t_empty)),
        template_predicate (template_app (template_hole 74, t_empty)),
        template_predicate (template_app (template_hole 74, t_empty)),
        template_predicate (template_app (template_hole 96, t_empty)),
        template_predicate (template_app (template_hole 94, t_empty)),
        template_predicate (template_app (template_hole 74, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 96, t_empty)),
        template_predicate (template_app (template_hole 94, t_empty)),
        template_predicate (template_app (template_hole 74, t_empty)),
        template_predicate (template_app (template_hole 74, t_empty)),
        template_predicate (template_app (template_hole 74, t_empty)),
        template_predicate (template_app (template_hole 94, t_empty)),
        template_predicate (template_app (template_hole 94, t_empty)),
        template_predicate (template_app (template_hole 74, t_empty)),
        template_predicate (template_app (template_hole 55, t_empty)),
        template_predicate (template_app (template_hole 74, t_empty)),
        template_predicate (template_app (template_hole 74, t_empty)),
        template_predicate (template_app (template_hole 74, t_empty)),
        template_predicate (template_app (template_hole 74, t_empty)),
        template_predicate (template_app (template_hole 74, t_empty)),
        template_predicate (template_app (template_hole 96, t_empty)),
        template_predicate (template_app (template_hole 74, t_empty)),
        template_predicate (template_app (template_hole 55, t_empty)),
        template_predicate (template_app (template_hole 96, t_empty)),
        template_predicate (template_app (template_hole 96, t_empty)),
        template_predicate (template_app (template_hole 74, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 94, t_empty)),
        template_predicate (template_app (template_hole 74, t_empty)),
        template_predicate (template_app (template_hole 55, t_empty)),
        template_predicate (template_app (template_hole 94, t_empty)),
        template_predicate (template_app (template_hole 74, t_empty)),
        template_predicate (template_app (template_hole 74, t_empty)),
        template_predicate (template_app (template_hole 55, t_empty)),
        template_predicate (template_app (template_hole 74, t_empty)),
        template_predicate (template_app (template_hole 40, t_empty)),
        template_predicate (template_app (template_hole 94, t_empty)),
        template_predicate (template_app (template_hole 94, t_empty)),
        template_predicate (template_app (template_hole 74, t_empty)),
        template_predicate (template_app (template_hole 74, t_empty)),
        template_predicate (template_app (template_hole 74, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_hole 73,
                       template_app
                        (template_app
                          (template_hole 72,
                           template_app
                            (template_app
                              (template_hole 71, template_var 11),
                             template_app
                              (template_app
                                (template_hole 70, template_var 10),
                               template_var 9))),
                         template_app
                          (template_app (template_hole 71, template_var 8),
                           template_app
                            (template_app
                              (template_hole 70, template_var 7),
                             template_var 6)))),
                     template_app (template_hole 69, template_var 14))),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_var 13, template_var 11),
                           template_var 10),
                         template_var 9),
                       template_var 8),
                     template_var 7),
                   template_var 6))),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 38,
                     template_app
                      (template_app
                        (template_hole 37,
                         template_app
                          (template_app (template_hole 36, template_var 5),
                           template_app
                            (template_app
                              (template_hole 70, template_var 4),
                             template_var 3))),
                       template_app
                        (template_app (template_hole 36, template_var 2),
                         template_app
                          (template_app (template_hole 70, template_var 1),
                           template_var 0)))),
                   template_app (template_hole 35, template_var 14))),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_var 12, template_var 5),
                         template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)))
           )))]:
   (string * thm * template) list
### theory "Draft.SmallStepMoreTemplates"
### 1.013s elapsed time, 1.170s cpu time, 0.034s GC time
val it = (): unit
