Loading theory "Draft.Auxiliary" (required by "Draft.WellTypeMoreTemplates" via "Draft.WellType" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.WellTypeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.WellTypeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.WellTypeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Auxiliary"
### 0.100s elapsed time, 0.415s cpu time, 0.034s GC time
Loading theory "Draft.Type" (required by "Draft.WellTypeMoreTemplates" via "Draft.WellType" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.121s elapsed time, 0.499s cpu time, 0.034s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.WellTypeMoreTemplates" via "Draft.WellType" via "Draft.Objects" via "Draft.TypeRel")
Proofs for inductive predicate(s) "rtrancl_path"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
### theory "HOL-Library.Set_Algebras"
### 0.196s elapsed time, 0.797s cpu time, 0.034s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.WellTypeMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.349s elapsed time, 1.391s cpu time, 0.141s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.WellTypeMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.305s elapsed time, 1.201s cpu time, 0.107s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.WellTypeMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Type"
### 0.425s elapsed time, 1.662s cpu time, 0.200s GC time
Loading theory "Draft.Decl" (required by "Draft.WellTypeMoreTemplates" via "Draft.WellType" via "Draft.Objects" via "Draft.TypeRel")
### theory "Draft.Decl"
### 0.055s elapsed time, 0.211s cpu time, 0.000s GC time
Loading theory "Draft.TypeRel" (required by "Draft.WellTypeMoreTemplates" via "Draft.WellType" via "Draft.Objects")
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "widen"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
Proofs for inductive predicate(s) "Methods"
  Proving monotonicity ...
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.106s elapsed time, 4.212s cpu time, 0.961s GC time
### Introduced fixed type variable(s): 'a in "y"
### Introduced fixed type variable(s): 'a in "z"
### theory "HOL-Library.BigO"
### 1.024s elapsed time, 3.890s cpu time, 0.868s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.TypeRel"
### 1.353s elapsed time, 4.346s cpu time, 0.962s GC time
Loading theory "Draft.Value" (required by "Draft.WellTypeMoreTemplates" via "Draft.WellType" via "Draft.Objects")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.038s elapsed time, 6.478s cpu time, 1.204s GC time
Loading theory "Draft.Templates" (required by "Draft.WellTypeMoreTemplates" via "Draft.ExtrEqs")
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.349s elapsed time, 0.720s cpu time, 0.042s GC time
Loading theory "Draft.Objects" (required by "Draft.WellTypeMoreTemplates" via "Draft.WellType")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.112s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.WellTypeMoreTemplates")
consts
  typeof_h ::
    "(nat => (char list * (char list * char list => val option)) option)
     => val => ty option"
### theory "Draft.Objects"
### 0.128s elapsed time, 0.282s cpu time, 0.058s GC time
Loading theory "Draft.Exceptions" (required by "Draft.WellTypeMoreTemplates" via "Draft.WellType" via "Draft.Expr")
### theory "Draft.Exceptions"
### 0.077s elapsed time, 0.153s cpu time, 0.000s GC time
Loading theory "Draft.Expr" (required by "Draft.WellTypeMoreTemplates" via "Draft.WellType")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.537s elapsed time, 1.123s cpu time, 0.115s GC time
Found termination order: "{}"
### Ambiguous input (line 81 of "$AFP/Jinja/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  fv :: "char list exp => char list set"
  fvs :: "char list exp list => char list set"
### theory "Draft.Expr"
### 3.288s elapsed time, 4.459s cpu time, 1.171s GC time
Loading theory "Draft.WellType" (required by "Draft.WellTypeMoreTemplates")
### Ambiguous input (line 63 of "$AFP/Jinja/J/WellType.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" T) ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" T) ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WT", "WTs"
  Proving monotonicity ...
### Ambiguous input (line 119 of "$AFP/Jinja/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E) ("_position" e)
###       ("\<^const>HOL.conj" ("_position" T)
###         ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###           ("_position" es) ("_position" Ts))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>HOL.conj"
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e) ("_position" T))
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("_position" es) ("_position" Ts)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 122 of "$AFP/Jinja/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e) ("_position" U))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es) ("_position" Us)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e)
###           ("\<^const>HOL.conj" ("_position" U)
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es) ("_position" Us))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 126 of "$AFP/Jinja/J/WellType.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>HOL.conj"
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>1) ("_position" Ts\<^sub>1))
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>2) ("_position" Ts\<^sub>2))))))))
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es\<^sub>1)
###             ("\<^const>HOL.conj" ("_position" Ts\<^sub>1)
###               ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###                 ("_position" es\<^sub>2) ("_position" Ts\<^sub>2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 147 of "$AFP/Jinja/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Val) ("_position" v)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Val) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
### Ambiguous input (line 150 of "$AFP/Jinja/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Var) ("_position" V)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Var) ("_position" V))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ambiguous input (line 153 of "$AFP/Jinja/J/WellType.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>HOL.conj"
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1)
###         ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1)
###           ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###             ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###               ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 168 of "$AFP/Jinja/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.FAss" ("_position" a) ("_position" F)
###       ("_position" D) ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" a) ("_position" F)
###         ("_position" D))
###       ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WellType"
### 0.488s elapsed time, 0.599s cpu time, 0.079s GC time
Loading theory "Draft.WellTypeMoreTemplates"
val templateLemmas =
   [("WellType.WT_fv", "?P,?E \<turnstile> ?e :: ?T ==> fv ?e <= dom ?E",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 2)))),
    ("WellType.wt_env_mono",
     "[| ?P,?E \<turnstile> ?e :: ?T; ?E \<subseteq>\<^sub>m ?E' |]
      ==> ?P,?E' \<turnstile> ?e :: ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> new ?C :: ?T;
         [| ?T = Class ?C; is_class ?P ?C |] ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3),
                template_app (template_hole 3, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 1, template_var 2))],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 2)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> throw ?e :: ?T;
         !!C. [| ?T = Void; ?P,?E \<turnstile> ?e :: Class C |] ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3),
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> ?a\<bullet>?F{?D} :: ?T;
         !!C. [| ?P,?E \<turnstile> ?a :: Class C;
                 ?P \<turnstile> C sees ?F:?T in ?D |]
              ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> while (?e) ?c :: ?T;
         !!T. [| ?T = Void; ?P,?E \<turnstile> ?e :: Boolean;
                 ?P,?E \<turnstile> ?c :: T |]
              ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> try ?e\<^sub>1 catch(?C ?V) ?e\<^sub>2 :: ?T;
         [| ?P,?E \<turnstile> ?e\<^sub>1 :: ?T;
            ?P,?E(?V |-> Class ?C) \<turnstile> ?e\<^sub>2 :: ?T;
            is_class ?P ?C |]
         ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 7),
                  template_var 6),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 5, template_var 7),
                     template_var 6),
                   template_var 5),
                 template_var 1)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 5, template_var 7),
                       template_app
                        (template_app
                          (template_app (template_hole 3, template_var 6),
                           template_var 3),
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1, template_var 4)))),
                     template_var 2),
                   template_var 1)
                 )],
            template_implication
             ([template_predicate
                (
                   template_app
                    (template_app (template_hole 0, template_var 7),
                     template_var 4)
                   )],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> ?V:=?e :: ?T;
         !!T T'.
            [| ?T = Void; ?E ?V = \<lfloor>T\<rfloor>;
               ?P,?E \<turnstile> ?e :: T'; ?P \<turnstile> T' \<le> T;
               ?V ~= this |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> Cast ?D ?e :: ?T;
         !!D. [| ?T = Class ?D; ?P,?E \<turnstile> ?e :: Class D;
                 is_class ?P ?D;
                 ?P \<turnstile> ?D \<preceq>\<^sup>* D |
                 ?P \<turnstile> D \<preceq>\<^sup>* ?D |]
              ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> ?a\<bullet>?F{?D} := ?v :: ?T;
         !!C T T'.
            [| ?T = Void; ?P,?E \<turnstile> ?a :: Class C;
               ?P \<turnstile> C sees ?F:T in ?D;
               ?P,?E \<turnstile> ?v :: T'; ?P \<turnstile> T' \<le> T |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 7),
                  template_var 6),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 7, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> ?e\<bullet>?M(?ps) :: ?T;
         !!C Ts pns body D Ts'.
            [| ?P,?E \<turnstile> ?e :: Class C;
               ?P \<turnstile> C sees ?M: Ts\<rightarrow>?T = (pns,
                         body) in D;
               ?P,?E \<turnstile> ?ps [::] Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 10, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> if (?e) ?e\<^sub>1 else ?e\<^sub>2 :: ?T;
         !!T\<^sub>1 T\<^sub>2.
            [| ?P,?E \<turnstile> ?e :: Boolean;
               ?P,?E \<turnstile> ?e\<^sub>1 :: T\<^sub>1;
               ?P,?E \<turnstile> ?e\<^sub>2 :: T\<^sub>2;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 --> ?T = T\<^sub>2;
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1 -->
               ?T = T\<^sub>1 |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> ?e\<^sub>1 \<guillemotleft>?bop\<guillemotright> ?e\<^sub>2 :: ?T;
         !!T\<^sub>1 T\<^sub>2.
            [| ?bop = Eq; ?T = Boolean;
               ?P,?E \<turnstile> ?e\<^sub>1 :: T\<^sub>1;
               ?P,?E \<turnstile> ?e\<^sub>2 :: T\<^sub>2;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1 |]
            ==> ?Pa;
         [| ?bop = Add; ?T = Integer;
            ?P,?E \<turnstile> ?e\<^sub>1 :: Integer;
            ?P,?E \<turnstile> ?e\<^sub>2 :: Integer |]
         ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 9, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_implication
         ([template_equation (template_var 3, template_hole 1)],
          template_implication
           ([template_equation (template_var 1, template_hole 0)],
            template_implication
             ([template_predicate
                (
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 10, template_var 6),
                         template_var 5),
                       template_var 4),
                     template_hole 0)
                   )],
              template_implication
               ([template_predicate
                  (
                     template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 10, template_var 6),
                           template_var 5),
                         template_var 2),
                       template_hole 0)
                     )],
                template_predicate (template_var 0)))))],
       template_predicate (template_var 0))),
    ("WellType.WT_WTs_inducts",
     "[| ?P,?x1a \<turnstile> ?x2a :: ?x3a;
         !!C E. is_class ?P C ==> ?P1.0 E (new C) (Class C);
         !!E e D C.
            [| ?P,E \<turnstile> e :: Class D; ?P1.0 E e (Class D);
               is_class ?P C;
               ?P \<turnstile> C \<preceq>\<^sup>* D |
               ?P \<turnstile> D \<preceq>\<^sup>* C |]
            ==> ?P1.0 E (Cast C e) (Class C);
         !!v T E. typeof v = \<lfloor>T\<rfloor> ==> ?P1.0 E (Val v) T;
         !!E V T. E V = \<lfloor>T\<rfloor> ==> ?P1.0 E (Var V) T;
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2.
            [| ?P,E \<turnstile> e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile> e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1 |]
            ==> ?P1.0 E
                 (e\<^sub>1 \<guillemotleft>Eq\<guillemotright> e\<^sub>2)
                 Boolean;
         !!E e\<^sub>1 e\<^sub>2.
            [| ?P,E \<turnstile> e\<^sub>1 :: Integer;
               ?P1.0 E e\<^sub>1 Integer;
               ?P,E \<turnstile> e\<^sub>2 :: Integer;
               ?P1.0 E e\<^sub>2 Integer |]
            ==> ?P1.0 E
                 (e\<^sub>1 \<guillemotleft>Add\<guillemotright> e\<^sub>2)
                 Integer;
         !!E V T e T'.
            [| E V = \<lfloor>T\<rfloor>; ?P,E \<turnstile> e :: T';
               ?P1.0 E e T'; ?P \<turnstile> T' \<le> T; V ~= this |]
            ==> ?P1.0 E (V:=e) Void;
         !!E e C F T D.
            [| ?P,E \<turnstile> e :: Class C; ?P1.0 E e (Class C);
               ?P \<turnstile> C sees F:T in D |]
            ==> ?P1.0 E (e\<bullet>F{D}) T;
         !!E e\<^sub>1 C F T D e\<^sub>2 T'.
            [| ?P,E \<turnstile> e\<^sub>1 :: Class C;
               ?P1.0 E e\<^sub>1 (Class C); ?P \<turnstile> C sees F:T in D;
               ?P,E \<turnstile> e\<^sub>2 :: T'; ?P1.0 E e\<^sub>2 T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E (e\<^sub>1\<bullet>F{D} := e\<^sub>2) Void;
         !!E e C M Ts T pns body D es Ts'.
            [| ?P,E \<turnstile> e :: Class C; ?P1.0 E e (Class C);
               ?P \<turnstile> C sees M: Ts\<rightarrow>T = (pns,
                       body) in D;
               ?P,E \<turnstile> es [::] Ts'; ?P2.0 E es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?P1.0 E (e\<bullet>M(es)) T;
         !!T E V e T'.
            [| is_type ?P T; ?P,E(V |-> T) \<turnstile> e :: T';
               ?P1.0 (E(V |-> T)) e T' |]
            ==> ?P1.0 E {V:T; e} T';
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2.
            [| ?P,E \<turnstile> e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile> e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2 |]
            ==> ?P1.0 E (e\<^sub>1;; e\<^sub>2) T\<^sub>2;
         !!E e e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2 T.
            [| ?P,E \<turnstile> e :: Boolean; ?P1.0 E e Boolean;
               ?P,E \<turnstile> e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile> e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 --> T = T\<^sub>2;
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1 -->
               T = T\<^sub>1 |]
            ==> ?P1.0 E (if (e) e\<^sub>1 else e\<^sub>2) T;
         !!E e c T.
            [| ?P,E \<turnstile> e :: Boolean; ?P1.0 E e Boolean;
               ?P,E \<turnstile> c :: T; ?P1.0 E c T |]
            ==> ?P1.0 E (while (e) c) Void;
         !!E e C.
            [| ?P,E \<turnstile> e :: Class C; ?P1.0 E e (Class C) |]
            ==> ?P1.0 E (throw e) Void;
         !!E e\<^sub>1 T V C e\<^sub>2.
            [| ?P,E \<turnstile> e\<^sub>1 :: T; ?P1.0 E e\<^sub>1 T;
               ?P,E(V |-> Class C) \<turnstile> e\<^sub>2 :: T;
               ?P1.0 (E(V |-> Class C)) e\<^sub>2 T; is_class ?P C |]
            ==> ?P1.0 E (try e\<^sub>1 catch(C V) e\<^sub>2) T;
         !!E. ?P2.0 E [] [];
         !!E e T es Ts.
            [| ?P,E \<turnstile> e :: T; ?P1.0 E e T;
               ?P,E \<turnstile> es [::] Ts; ?P2.0 E es Ts |]
            ==> ?P2.0 E (e # es) (T # Ts) |]
      ==> ?P1.0 ?x1a ?x2a ?x3a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 56, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 55, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 43, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 42, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 1, template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("WellType.WT_WTs_inducts",
     "[| ?P,?x4a \<turnstile> ?x5a [::] ?x6a;
         !!C E. is_class ?P C ==> ?P1.0 E (new C) (Class C);
         !!E e D C.
            [| ?P,E \<turnstile> e :: Class D; ?P1.0 E e (Class D);
               is_class ?P C;
               ?P \<turnstile> C \<preceq>\<^sup>* D |
               ?P \<turnstile> D \<preceq>\<^sup>* C |]
            ==> ?P1.0 E (Cast C e) (Class C);
         !!v T E. typeof v = \<lfloor>T\<rfloor> ==> ?P1.0 E (Val v) T;
         !!E V T. E V = \<lfloor>T\<rfloor> ==> ?P1.0 E (Var V) T;
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2.
            [| ?P,E \<turnstile> e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile> e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1 |]
            ==> ?P1.0 E
                 (e\<^sub>1 \<guillemotleft>Eq\<guillemotright> e\<^sub>2)
                 Boolean;
         !!E e\<^sub>1 e\<^sub>2.
            [| ?P,E \<turnstile> e\<^sub>1 :: Integer;
               ?P1.0 E e\<^sub>1 Integer;
               ?P,E \<turnstile> e\<^sub>2 :: Integer;
               ?P1.0 E e\<^sub>2 Integer |]
            ==> ?P1.0 E
                 (e\<^sub>1 \<guillemotleft>Add\<guillemotright> e\<^sub>2)
                 Integer;
         !!E V T e T'.
            [| E V = \<lfloor>T\<rfloor>; ?P,E \<turnstile> e :: T';
               ?P1.0 E e T'; ?P \<turnstile> T' \<le> T; V ~= this |]
            ==> ?P1.0 E (V:=e) Void;
         !!E e C F T D.
            [| ?P,E \<turnstile> e :: Class C; ?P1.0 E e (Class C);
               ?P \<turnstile> C sees F:T in D |]
            ==> ?P1.0 E (e\<bullet>F{D}) T;
         !!E e\<^sub>1 C F T D e\<^sub>2 T'.
            [| ?P,E \<turnstile> e\<^sub>1 :: Class C;
               ?P1.0 E e\<^sub>1 (Class C); ?P \<turnstile> C sees F:T in D;
               ?P,E \<turnstile> e\<^sub>2 :: T'; ?P1.0 E e\<^sub>2 T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E (e\<^sub>1\<bullet>F{D} := e\<^sub>2) Void;
         !!E e C M Ts T pns body D es Ts'.
            [| ?P,E \<turnstile> e :: Class C; ?P1.0 E e (Class C);
               ?P \<turnstile> C sees M: Ts\<rightarrow>T = (pns,
                       body) in D;
               ?P,E \<turnstile> es [::] Ts'; ?P2.0 E es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?P1.0 E (e\<bullet>M(es)) T;
         !!T E V e T'.
            [| is_type ?P T; ?P,E(V |-> T) \<turnstile> e :: T';
               ?P1.0 (E(V |-> T)) e T' |]
            ==> ?P1.0 E {V:T; e} T';
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2.
            [| ?P,E \<turnstile> e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile> e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2 |]
            ==> ?P1.0 E (e\<^sub>1;; e\<^sub>2) T\<^sub>2;
         !!E e e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2 T.
            [| ?P,E \<turnstile> e :: Boolean; ?P1.0 E e Boolean;
               ?P,E \<turnstile> e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile> e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 --> T = T\<^sub>2;
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1 -->
               T = T\<^sub>1 |]
            ==> ?P1.0 E (if (e) e\<^sub>1 else e\<^sub>2) T;
         !!E e c T.
            [| ?P,E \<turnstile> e :: Boolean; ?P1.0 E e Boolean;
               ?P,E \<turnstile> c :: T; ?P1.0 E c T |]
            ==> ?P1.0 E (while (e) c) Void;
         !!E e C.
            [| ?P,E \<turnstile> e :: Class C; ?P1.0 E e (Class C) |]
            ==> ?P1.0 E (throw e) Void;
         !!E e\<^sub>1 T V C e\<^sub>2.
            [| ?P,E \<turnstile> e\<^sub>1 :: T; ?P1.0 E e\<^sub>1 T;
               ?P,E(V |-> Class C) \<turnstile> e\<^sub>2 :: T;
               ?P1.0 (E(V |-> Class C)) e\<^sub>2 T; is_class ?P C |]
            ==> ?P1.0 E (try e\<^sub>1 catch(C V) e\<^sub>2) T;
         !!E. ?P2.0 E [] [];
         !!E e T es Ts.
            [| ?P,E \<turnstile> e :: T; ?P1.0 E e T;
               ?P,E \<turnstile> es [::] Ts; ?P2.0 E es Ts |]
            ==> ?P2.0 E (e # es) (T # Ts) |]
      ==> ?P2.0 ?x4a ?x5a ?x6a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 56, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 55, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 42, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 41, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty)),
        template_predicate (template_app (template_hole 54, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 0, template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("WellType.WT_WTs_induct",
     "[| !!C E. is_class ?P C ==> ?P1.0 E (new C) (Class C);
         !!E e D C.
            [| ?P,E \<turnstile> e :: Class D; ?P1.0 E e (Class D);
               is_class ?P C;
               ?P \<turnstile> C \<preceq>\<^sup>* D |
               ?P \<turnstile> D \<preceq>\<^sup>* C |]
            ==> ?P1.0 E (Cast C e) (Class C);
         !!v T E. typeof v = \<lfloor>T\<rfloor> ==> ?P1.0 E (Val v) T;
         !!E V T. E V = \<lfloor>T\<rfloor> ==> ?P1.0 E (Var V) T;
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2.
            [| ?P,E \<turnstile> e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile> e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1 |]
            ==> ?P1.0 E
                 (e\<^sub>1 \<guillemotleft>Eq\<guillemotright> e\<^sub>2)
                 Boolean;
         !!E e\<^sub>1 e\<^sub>2.
            [| ?P,E \<turnstile> e\<^sub>1 :: Integer;
               ?P1.0 E e\<^sub>1 Integer;
               ?P,E \<turnstile> e\<^sub>2 :: Integer;
               ?P1.0 E e\<^sub>2 Integer |]
            ==> ?P1.0 E
                 (e\<^sub>1 \<guillemotleft>Add\<guillemotright> e\<^sub>2)
                 Integer;
         !!E V T e T'.
            [| E V = \<lfloor>T\<rfloor>; ?P,E \<turnstile> e :: T';
               ?P1.0 E e T'; ?P \<turnstile> T' \<le> T; V ~= this |]
            ==> ?P1.0 E (V:=e) Void;
         !!E e C F T D.
            [| ?P,E \<turnstile> e :: Class C; ?P1.0 E e (Class C);
               ?P \<turnstile> C sees F:T in D |]
            ==> ?P1.0 E (e\<bullet>F{D}) T;
         !!E e\<^sub>1 C F T D e\<^sub>2 T'.
            [| ?P,E \<turnstile> e\<^sub>1 :: Class C;
               ?P1.0 E e\<^sub>1 (Class C); ?P \<turnstile> C sees F:T in D;
               ?P,E \<turnstile> e\<^sub>2 :: T'; ?P1.0 E e\<^sub>2 T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E (e\<^sub>1\<bullet>F{D} := e\<^sub>2) Void;
         !!E e C M Ts T pns body D es Ts'.
            [| ?P,E \<turnstile> e :: Class C; ?P1.0 E e (Class C);
               ?P \<turnstile> C sees M: Ts\<rightarrow>T = (pns,
                       body) in D;
               ?P,E \<turnstile> es [::] Ts'; ?P2.0 E es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?P1.0 E (e\<bullet>M(es)) T;
         !!T E V e T'.
            [| is_type ?P T; ?P,E(V |-> T) \<turnstile> e :: T';
               ?P1.0 (E(V |-> T)) e T' |]
            ==> ?P1.0 E {V:T; e} T';
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2.
            [| ?P,E \<turnstile> e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile> e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2 |]
            ==> ?P1.0 E (e\<^sub>1;; e\<^sub>2) T\<^sub>2;
         !!E e e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2 T.
            [| ?P,E \<turnstile> e :: Boolean; ?P1.0 E e Boolean;
               ?P,E \<turnstile> e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile> e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 --> T = T\<^sub>2;
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1 -->
               T = T\<^sub>1 |]
            ==> ?P1.0 E (if (e) e\<^sub>1 else e\<^sub>2) T;
         !!E e c T.
            [| ?P,E \<turnstile> e :: Boolean; ?P1.0 E e Boolean;
               ?P,E \<turnstile> c :: T; ?P1.0 E c T |]
            ==> ?P1.0 E (while (e) c) Void;
         !!E e C.
            [| ?P,E \<turnstile> e :: Class C; ?P1.0 E e (Class C) |]
            ==> ?P1.0 E (throw e) Void;
         !!E e\<^sub>1 T V C e\<^sub>2.
            [| ?P,E \<turnstile> e\<^sub>1 :: T; ?P1.0 E e\<^sub>1 T;
               ?P,E(V |-> Class C) \<turnstile> e\<^sub>2 :: T;
               ?P1.0 (E(V |-> Class C)) e\<^sub>2 T; is_class ?P C |]
            ==> ?P1.0 E (try e\<^sub>1 catch(C V) e\<^sub>2) T;
         !!E. ?P2.0 E [] [];
         !!E e T es Ts.
            [| ?P,E \<turnstile> e :: T; ?P1.0 E e T;
               ?P,E \<turnstile> es [::] Ts; ?P2.0 E es Ts |]
            ==> ?P2.0 E (e # es) (T # Ts) |]
      ==> (?P,?x1a \<turnstile> ?x2a :: ?x3a --> ?P1.0 ?x1a ?x2a ?x3a) &
          (?P,?x4a \<turnstile> ?x5a [::] ?x6a --> ?P2.0 ?x4a ?x5a ?x6a)",
     template_implication
      ([template_predicate (template_app (template_hole 58, t_empty)),
        template_predicate (template_app (template_hole 57, t_empty)),
        template_predicate (template_app (template_hole 44, t_empty)),
        template_predicate (template_app (template_hole 57, t_empty)),
        template_predicate (template_app (template_hole 57, t_empty)),
        template_predicate (template_app (template_hole 57, t_empty)),
        template_predicate (template_app (template_hole 57, t_empty)),
        template_predicate (template_app (template_hole 57, t_empty)),
        template_predicate (template_app (template_hole 57, t_empty)),
        template_predicate (template_app (template_hole 57, t_empty)),
        template_predicate (template_app (template_hole 43, t_empty)),
        template_predicate (template_app (template_hole 57, t_empty)),
        template_predicate (template_app (template_hole 57, t_empty)),
        template_predicate (template_app (template_hole 57, t_empty)),
        template_predicate (template_app (template_hole 57, t_empty)),
        template_predicate (template_app (template_hole 57, t_empty)),
        template_predicate (template_app (template_hole 57, t_empty)),
        template_predicate (template_app (template_hole 57, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 51, template_var 8),
                         template_var 5),
                       template_var 4),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_app (template_var 7, template_var 5),
                     template_var 4),
                   template_var 3))),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 17, template_var 8),
                       template_var 2),
                     template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_app (template_var 6, template_var 2),
                   template_var 1),
                 template_var 0)))
           )))]:
   (string * thm * template) list
### theory "Draft.WellTypeMoreTemplates"
### 0.415s elapsed time, 0.559s cpu time, 0.034s GC time
val it = (): unit
