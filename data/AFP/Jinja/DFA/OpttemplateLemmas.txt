   [("Option.inj_Some", "inj_on Some ?A",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Option.is_none_simps", "~ Option.is_none (Some ?x)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("Opt.None_in_opt", "None : opt ?A",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Option.is_none_code", "Option.is_none (Some ?x) = False",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Option.bind_runit", "Option.bind ?x Some = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Opt.None_bot", "None <=_(Opt.le ?r) ?ox",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("Option.None_notin_image_Some", "None ~: Some ` ?A",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))
             )
         )),
    ("Option.these_image_Some_eq", "Option.these (Some ` ?A) = ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_var 0)),
    ("Option.equal_None_code_unfold",
     "equal_class.equal ?x None = Option.is_none ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Option.bind_rzero", "Option.bind ?x Map.empty = None",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), t_empty),
       template_hole 0)),
    ("Option.combine_options_simps", "combine_options ?f None ?y = ?y",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_var 0),
       template_var 0)),
    ("Option.combine_options_simps", "combine_options ?f ?x None = ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_var 0)),
    ("Option.these_insert_None",
     "Option.these (insert None ?A) = Option.these ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Option.is_none_map_option",
     "Option.is_none (map_option ?f ?x) = Option.is_none ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Opt.OK_None_bot", "OK None <=_(Err.le (Opt.le ?r)) ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1))),
           template_var 0)
         )),
    ("Opt.acc_le_optI", "acc ?r ==> acc (Opt.le ?r)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Opt.sup_None2", "None +_(Opt.sup ?f) ?x = OK ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Opt.sup_None1", "?x +_(Opt.sup ?f) None = OK ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 1))),
    ("Option.set_empty_eq", "(set_option ?xo = {}) = (?xo = None)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Option.rel_option_None1", "rel_option ?P None ?x = (?x = None)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_hole 2),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Option.rel_option_None2", "rel_option ?P ?x None = (?x = None)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_hole 2)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Option.elem_set", "(?x : set_option ?xo) = (?xo = Some ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_var 0, template_app (template_hole 0, template_var 1)))),
    ("Option.in_these_eq", "(?x : Option.these ?A) = (Some ?x : ?A)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Option.None_eq_map_option_iff",
     "(None = map_option ?f ?x) = (?x = None)",
     template_bimplication
      (template_equation
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_equation (template_var 0, template_hole 0))),
    ("Option.map_option_is_None",
     "(map_option ?f ?opt = None) = (?opt = None)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Opt.le_None", "(?x <=_(Opt.le ?r) None) = (?x = None)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_app (template_hole 2, template_var 0)),
              template_hole 1)
            )],
       template_equation (template_var 1, template_hole 1))),
    ("Opt.top_le_opt_Some",
     "Semilat.top (Opt.le ?r) (Some ?T) = Semilat.top ?r ?T",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Opt.Some_in_opt", "(Some ?x : opt ?A) = (?x : ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Option.map_conv_bind_option",
     "map_option ?f ?x = Option.bind ?x (Some o ?f)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 1)))),
    ("Opt.semilat_opt", "err_semilat ?L ==> err_semilat (Opt.esl ?L)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Option.pred_option_parametric",
     "rel_fun (rel_fun ?A (=)) (rel_fun (rel_option ?A) (=)) pred_option
       pred_option",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_hole 4)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_hole 4)),
             template_hole 1),
           template_hole 0)
         )),
    ("Option.rel_option_inf",
     "inf (rel_option ?A) (rel_option ?B) = rel_option (inf ?A ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Option.these_insert_Some",
     "Option.these (insert (Some ?x) ?A) = insert ?x (Option.these ?A)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 3, template_var 0)))),
    ("Option.notin_range_Some", "(?x ~: range Some) = (?x = None)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 0),
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_hole 2)))
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Opt.order_le_opt", "order ?r ?A ==> order (Opt.le ?r) (opt ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Option.not_None_eq", "(?x ~= None) = (EX y. ?x = Some y)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app (template_hole 1, t_empty))),
    ("Option.not_Some_eq", "(ALL y. ?x ~= Some y) = (?x = None)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 0, template_hole 0))),
    ("Option.map_option_case",
     "map_option ?f ?y = (case ?y of None => None | Some x => Some (?f x))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), t_empty),
         template_var 0))),
    ("Option.bind_map_option",
     "Option.bind (map_option ?f ?x) ?g = Option.bind ?x (?g o ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Option.combine_options_simps",
     "combine_options ?f (Some ?a) (Some ?b) = Some (?f ?a ?b)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_var 2, template_var 1),
           template_var 0)))),
    ("Option.option_bind_transfer",
     "rel_fun (rel_option ?A)
       (rel_fun (rel_fun ?A (rel_option ?B)) (rel_option ?B)) Option.bind
       Option.bind",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 1)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_app (template_hole 2, template_var 0))),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Option.set_bind_option",
     "set_option (Option.bind ?x ?f) =
      \<Union> ((set_option o ?f) ` set_option ?x)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 5),
               template_var 0)),
           template_app (template_hole 0, template_var 1))))),
    ("Option.is_none_bind",
     "Option.is_none (Option.bind ?f ?g) =
      (Option.is_none ?f | Option.is_none (?g (the ?f)))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app
          (template_hole 4,
           template_app
            (template_var 0,
             template_app (template_hole 0, template_var 1)))))),
    ("Option.map_option_bind",
     "map_option ?f (Option.bind ?x ?g) =
      Option.bind ?x (map_option ?f o ?g)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 2)),
           template_var 0)))),
    ("Option.bind_option_cong_code",
     "?x = ?y ==> Option.bind ?x ?f = Option.bind ?y ?f",
     template_implication
      ([template_equation (template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Option.case_map_option",
     "(case map_option ?f ?x of None => ?g | Some x => ?h x) =
      (case ?x of None => ?g | Some x => (?h o ?f) x)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Option.split_option_all",
     "(ALL x. ?P x) = (?P None & (ALL x. ?P (Some x)))",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app
        (template_app
          (template_hole 3, template_app (template_var 0, template_hole 2)),
         template_app (template_hole 1, t_empty)))),
    ("Option.split_option_ex",
     "(EX x. ?P x) = (?P None | (EX x. ?P (Some x)))",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app
        (template_app
          (template_hole 3, template_app (template_var 0, template_hole 2)),
         template_app (template_hole 1, t_empty)))),
    ("Option.bind_assoc",
     "Option.bind (Option.bind ?x ?f) ?g =
      Option.bind ?x (%y. Option.bind (?f y) ?g)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Option.the_map_option",
     "~ Option.is_none ?x ==> the (map_option ?f ?x) = ?f (the ?x)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_var 0,
           template_app (template_hole 0, template_var 1))))),
    ("Option.these_empty_eq",
     "(Option.these ?B = {}) = (?B = {} | ?B = {None})",
     template_bimplication
      (template_equation
        (template_app (template_hole 6, template_var 0), template_hole 5),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_hole 2)))
           ))),
    ("Option.Some_image_these_eq",
     "Some ` Option.these ?A = {x: ?A. x ~= None}",
     template_equation
      (template_app
        (template_app (template_hole 8, template_hole 7),
         template_app (template_hole 6, template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("Option.bind_eq_None_conv",
     "(Option.bind ?a ?f = None) = (?a = None | ?f (the ?a) = None)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_hole 4),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_var 0,
                   template_app (template_hole 0, template_var 1))),
               template_hole 4))
           ))),
    ("Option.map_option_o_case_sum",
     "map_option ?f o case_sum ?g ?h =
      case_sum (map_option ?f o ?g) (map_option ?f o ?h)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 4, template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 2)),
           template_var 0)))),
    ("Option.option_rel_Some2",
     "rel_option ?A ?x (Some ?y) = (EX x'. ?x = Some x' & ?A x' ?y)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Option.option_rel_Some1",
     "rel_option ?A (Some ?x) ?y = (EX y'. ?y = Some y' & ?A ?x y')",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2),
           template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Opt.le_opt_refl",
     "[| order ?r ?A; ?x : opt ?A |] ==> ?x <=_(Opt.le ?r) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 2)),
             template_var 0)
           ))),
    ("Option.ospec",
     "[| ALL x:set_option ?A. ?P x; ?A = Some ?x |] ==> ?P ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)),
              t_empty)
            ),
        template_equation
         (template_var 2, template_app (template_hole 0, template_var 0))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Option.these_not_empty_eq",
     "(Option.these ?B ~= {}) = (?B ~= {} & ?B ~= {None})",
     template_bimplication
      (template_negation
        (
           template_equation
            (template_app (template_hole 6, template_var 0),
             template_hole 5)
           ),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2))),
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_hole 2))))
           ))),
    ("Option.rel_option_reflI",
     "(!!x. x : set_option ?y ==> ?P x x) ==> rel_option ?P ?y ?y",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_var 1)
           ))),
    ("Option.map_option_eq_Some",
     "(map_option ?f ?xo = Some ?y) = (EX z. ?xo = Some z & ?f z = ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Opt.Some_le",
     "(Some ?x <=_(Opt.le ?r) ?z) = (EX y. ?z = Some y & ?x <=_?r y)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 2)),
           template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Option.bind_eq_Some_conv",
     "(Option.bind ?f ?g = Some ?x) = (EX y. ?f = Some y & ?g y = Some ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Option.map_option_idI",
     "(!!y. y : set_option ?x ==> ?f y = y) ==> map_option ?f ?x = ?x",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Opt.unfold_le_opt",
     "(?o\<^sub>1 <=_(Opt.le ?r) ?o\<^sub>2) =
      (case ?o\<^sub>2 of None => ?o\<^sub>1 = None
       | Some y => case ?o\<^sub>1 of None => True | Some x => x <=_?r y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_hole 2)),
               t_empty),
             template_var 0)
           ))),
    ("Option.bind_split",
     "?P (Option.bind ?m ?f) =
      ((?m = None --> ?P None) & (ALL v. ?m = Some v --> ?P (?f v)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 2,
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_hole 3)),
                 template_app (template_var 2, template_hole 2))),
             template_app (template_hole 1, t_empty))
           ))),
    ("Option.combine_options_commute",
     "(!!x y. ?f x y = ?f y x) ==>
      combine_options ?f ?x ?y = combine_options ?f ?y ?x",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 1)))),
    ("Option.rel_option_unfold",
     "rel_option ?R ?x ?y =
      (Option.is_none ?x = Option.is_none ?y &
       (~ Option.is_none ?x -->
        ~ Option.is_none ?y --> ?R (the ?x) (the ?y)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 5, template_var 1)),
                 template_app (template_hole 4, template_var 0))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 5, template_var 1))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 4, template_var 0))),
                 template_app
                  (template_app
                    (template_var 2,
                     template_app (template_hole 1, template_var 1)),
                   template_app (template_hole 0, template_var 0)))))
           ))),
    ("Option.bind_split_asm",
     "?P (Option.bind ?m ?f) =
      (~ (?m = None & ~ ?P None | (EX x. ?m = Some x & ~ ?P (?f x))))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 2,
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 1),
                         template_hole 3)),
                     template_app
                      (template_hole 7,
                       template_app (template_var 2, template_hole 2)))),
                 template_app (template_hole 1, t_empty))
               )
           ))),
    ("Option.rel_option_iff",
     "rel_option ?R ?x ?y =
      (case (?x, ?y) of (None, None) => True | (None, Some a) => False
       | (Some x, None) => False | (Some x, Some y) => ?R x y)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 5, t_empty),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Opt.map_option_in_optionI",
     "[| ?ox : opt ?S; ALL x:?S. ?ox = Some x --> ?f x : ?S |]
      ==> map_option ?f ?ox : opt ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app (template_hole 6, template_var 1))
           ))),
    ("Option.bind_option_cong_simp",
     "[| ?x = ?y; !!z. z : set_option ?y =simp=> ?f z = ?g z |]
      ==> Option.bind ?x ?f = Option.bind ?y ?g",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Option.map_option_cong",
     "[| ?x = ?y; !!a. ?y = Some a ==> ?f a = ?g a |]
      ==> map_option ?f ?x = map_option ?g ?y",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Option.bind_cong",
     "[| ?x = ?y; !!a. ?y = Some a ==> ?f a = ?g a |]
      ==> Option.bind ?x ?f = Option.bind ?y ?g",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Option.bind_option_cong",
     "[| ?x = ?y; !!z. z : set_option ?y ==> ?f z = ?g z |]
      ==> Option.bind ?x ?f = Option.bind ?y ?g",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Option.rel_optionI",
     "[| Option.is_none ?x = Option.is_none ?y;
         [| ~ Option.is_none ?x; ~ Option.is_none ?y |]
         ==> ?P (the ?x) (the ?y) |]
      ==> rel_option ?P ?x ?y",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 2),
          template_app (template_hole 4, template_var 1)),
        template_implication
         ([template_negation
            (
               template_predicate
                (template_app (template_hole 5, template_var 2))
               )],
          template_implication
           ([template_negation
              (
                 template_predicate
                  (template_app (template_hole 4, template_var 1))
                 )],
            template_predicate
             (
                template_app
                 (template_app
                   (template_var 0,
                    template_app (template_hole 2, template_var 2)),
                  template_app (template_hole 1, template_var 1))
                )))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Opt.Top_le_conv",
     "[| order ?r ?A; Semilat.top ?r ?T; ?x : ?A; ?T : ?A |]
      ==> (?T <=_?r ?x) = (?x = ?T)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 2)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 3),
                template_var 0)
              )],
         template_equation (template_var 0, template_var 1)))),
    ("Option.combine_options_assoc",
     "(!!x y z. ?f (?f x y) z = ?f x (?f y z)) ==>
      combine_options ?f (combine_options ?f ?x ?y) ?z =
      combine_options ?f ?x (combine_options ?f ?y ?z)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0))))),
    ("Option.case_optionE",
     "[| case ?x of None => ?P | Some y => ?Q y;
         [| ?x = None; ?P |] ==> ?thesis;
         !!y. [| ?x = Some y; ?Q y |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3), t_empty),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_hole 2)],
          template_implication
           ([template_predicate (template_var 3)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Opt.le_opt_antisym",
     "[| order ?r ?A; ?x : opt ?A; ?y : opt ?A; ?z : opt ?A;
         ?x <=_(Opt.le ?r) ?y; ?y <=_(Opt.le ?r) ?x |]
      ==> ?x = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 4)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_app (template_hole 1, template_var 4)),
              template_var 2)
            )],
       template_equation (template_var 2, template_var 1))),
    ("Opt.le_opt_trans",
     "[| order ?r ?A; ?x : opt ?A; ?y : opt ?A; ?z : opt ?A;
         ?x <=_(Opt.le ?r) ?y; ?y <=_(Opt.le ?r) ?z |]
      ==> ?x <=_(Opt.le ?r) ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_app (template_hole 0, template_var 4)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_app (template_hole 0, template_var 4)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 4)),
             template_var 0)
           ))),
    ("Option.combine_options_cases",
     "[| ?x = None ==> ?P ?x ?y; ?y = None ==> ?P ?x ?y;
         !!a b. [| ?x = Some a; ?y = Some b |] ==> ?P ?x ?y |]
      ==> ?P ?x ?y",
     template_implication
      ([template_implication
         ([template_equation (template_var 2, template_hole 6)],
          template_predicate
           (
              template_app
               (template_app (template_var 1, template_var 2),
                template_var 0)
              )),
        template_implication
         ([template_equation (template_var 0, template_hole 4)],
          template_predicate
           (
              template_app
               (template_app (template_var 1, template_var 2),
                template_var 0)
              )),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 1, template_var 2), template_var 0)
           ))),
    ("Option.combine_options_left_commute",
     "[| !!x y. ?f x y = ?f y x; !!x y z. ?f (?f x y) z = ?f x (?f y z) |]
      ==> combine_options ?f ?y (combine_options ?f ?x ?z) =
          combine_options ?f ?x (combine_options ?f ?y ?z)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)))))]
