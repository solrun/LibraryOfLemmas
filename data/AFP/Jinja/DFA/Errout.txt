Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ErrMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ErrMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ErrMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Tree" (required by "Draft.ErrMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.125s elapsed time, 0.513s cpu time, 0.056s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.ErrMoreTemplates" via "Draft.Err" via "Draft.Semilat")
### theory "HOL-Library.Set_Algebras"
### 0.212s elapsed time, 0.862s cpu time, 0.056s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ErrMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
### theory "HOL-Library.Nat_Bijection"
### 0.348s elapsed time, 1.388s cpu time, 0.166s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ErrMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
Found termination order: "{}"
### theory "HOL-Library.While_Combinator"
### 0.427s elapsed time, 1.685s cpu time, 0.206s GC time
Loading theory "Draft.Semilat" (required by "Draft.ErrMoreTemplates" via "Draft.Err")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
locale Semilat
  fixes A :: "'a set"
    and r :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
  assumes "Semilat A r f"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "Draft.Semilat"
### 0.303s elapsed time, 1.187s cpu time, 0.155s GC time
Loading theory "Draft.Err" (required by "Draft.ErrMoreTemplates")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.051s elapsed time, 3.986s cpu time, 1.019s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.122s elapsed time, 4.091s cpu time, 0.995s GC time
Found termination order: "size <*mlex*> {}"
### No equation for constructor "Err"
consts
  ok_val :: "'a err => 'a"
consts
  strict :: "('a => 'b err) => 'a err => 'b err"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Err"
### 0.797s elapsed time, 2.464s cpu time, 0.744s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.049s elapsed time, 6.336s cpu time, 1.237s GC time
Loading theory "Draft.Templates" (required by "Draft.ErrMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.061s elapsed time, 0.113s cpu time, 0.049s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ErrMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.433s elapsed time, 0.441s cpu time, 0.000s GC time
Loading theory "Draft.ErrMoreTemplates"
val templateLemmas =
   [("Err.top_Err", "Semilat.top (le ?r) Err",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Err.Err_in_err", "Err : err ?A",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Err.le_Err", "?e <=_(le ?r) Err",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Err.not_Err_less", "~ Err <_(le ?r) ?x",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app (template_hole 0, template_var 1)),
               template_var 0)
             )
         )),
    ("Err.Err_lift2", "Err +_(lift2 ?f) ?x = Err",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_hole 0)),
    ("Err.Err_sup_Err", "Err +_(Err.sup ?f) ?x = Err",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_hole 0)),
    ("Err.lift2_Err", "?x +_(lift2 ?f) Err = Err",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Err.Err_sup_Err2", "?x +_(Err.sup ?f) Err = Err",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Err.acc_err", "acc ?r ==> acc (le ?r)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Err.err_semilat_eslI", "semilat ?L ==> err_semilat (esl ?L)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Err.Err_le_conv", "(Err <=_(le ?r) ?e) = (?e = Err)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_hole 2),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 2))),
    ("Err.order_le_err", "order (le ?r) (err ?A) = order ?r ?A",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Err.Ok_in_err", "(OK ?x : err ?A) = (?x : ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Err.unfold_lesub_err", "(?e1.0 <=_(le ?r) ?e2.0) = le ?r ?e1.0 ?e2.0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_var 0))),
    ("Err.not_Err_eq", "(?x ~= Err) = (EX a. ?x = OK a)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app (template_hole 1, t_empty))),
    ("Err.not_OK_eq", "(ALL y. ?x ~= OK y) = (?x = Err)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 0, template_hole 0))),
    ("Err.OK_lift2_OK", "OK ?x +_(lift2 ?f) OK ?y = ?x +_?f ?y",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 2)),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Err.OK_le_err_OK", "(OK ?x <=_(le ?r) OK ?y) = (?x <=_?r ?y)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Err.Err_sup_OK", "OK ?x +_(Err.sup ?f) OK ?y = OK (?x +_?f ?y)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 2)),
           template_app (template_hole 3, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Err.le_err_refl", "ALL x. x <=_?r x ==> ?e <=_(le ?r) ?e",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Err.Err_sup_eq_Err",
     "(Err.sup ?f ?ex ?ey = Err) = (?ex = Err | ?ey = Err)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 5),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Err.err_semilat_eslI_aux",
     "Semilat ?A ?r ?f ==> err_semilat (esl (?A, ?r, ?f))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)))))
           ))),
    ("Err.le_OK_conv",
     "(?e <=_(le ?r) OK ?x) = (EX y. ?e = OK y & y <=_?r ?x)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 2),
           template_app (template_hole 5, template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Err.strict_Some",
     "(strict ?f ?x = OK ?y) = (EX z. ?x = OK z & ?f z = OK ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Err.all_bex_swap_lemma",
     "(ALL x. (EX y:?A. x = ?f y) --> ?P x) = (ALL y:?A. ?P (?f y))",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Err.semilat_errI",
     "Semilat ?A ?r ?f ==>
      semilat (err ?A, le ?r, lift2 (%x y. OK (?f x y)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 2)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1)),
                 template_app (template_hole 1, t_empty))))
           ))),
    ("Err.le_err_refl'",
     "[| ALL x:?A. x <=_?r x; ?e : err ?A |] ==> ?e <=_(le ?r) ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Err.OK_less_conv",
     "(OK ?x <_(le ?r) ?e) = (?e = Err | (EX y. ?e = OK y & ?x <_?r y))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 2)),
                template_app (template_hole 6, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 3)),
             template_app (template_hole 2, t_empty))
           ))),
    ("Err.OK_le_conv",
     "(OK ?x <=_(le ?r) ?e) = (?e = Err | (EX y. ?e = OK y & ?x <=_?r y))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 2)),
                template_app (template_hole 6, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 3)),
             template_app (template_hole 2, t_empty))
           ))),
    ("Err.semilat_le_err_Err_plus",
     "[| ?x : err ?A; semilat (err ?A, le ?r, ?f) |] ==> Err +_?f ?x = Err",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 7, template_var 2)),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 1)),
                  template_var 0)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0),
           template_var 3),
         template_hole 0))),
    ("Err.semilat_le_err_plus_Err",
     "[| ?x : err ?A; semilat (err ?A, le ?r, ?f) |] ==> ?x +_?f Err = Err",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 7, template_var 2)),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 1)),
                  template_var 0)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0),
           template_hole 0),
         template_hole 0))),
    ("Err.eq_order_le",
     "[| ?x = ?y; order ?r ?A; ?x : ?A; ?y : ?A |] ==> ?x <=_?r ?y",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 2)
           ))),
    ("Err.Err_sup_eq_OK_conv",
     "(Err.sup ?f ?ex ?ey = OK ?z) =
      (EX x y. ?ex = OK x & ?ey = OK y & ?f x y = ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_app (template_hole 9, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 8, template_var 0)),
       template_app (template_hole 7, t_empty))),
    ("Err.lift_in_errI",
     "[| ?e : err ?S; ALL x:?S. ?e = OK x --> ?f x : err ?S |]
      ==> lift ?f ?e : err ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app (template_hole 5, template_var 1))
           ))),
    ("Err.semilat_le_err_OK1",
     "[| ?x : ?A; ?y : ?A; semilat (err ?A, le ?r, ?f);
         OK ?x +_?f OK ?y = OK ?z |]
      ==> ?x <=_?r ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 4)),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 2)),
                  template_var 1)))
            ),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 5)),
              template_var 1),
            template_app (template_hole 1, template_var 3)),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 5),
               template_var 2),
             template_var 0)
           ))),
    ("Err.semilat_le_err_OK2",
     "[| ?x : ?A; ?y : ?A; semilat (err ?A, le ?r, ?f);
         OK ?x +_?f OK ?y = OK ?z |]
      ==> ?y <=_?r ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 4)),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 2)),
                  template_var 1)))
            ),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 5)),
              template_var 1),
            template_app (template_hole 1, template_var 3)),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Err.le_err_antisym",
     "[| order ?r ?A; ?e1.0 : err ?A; ?e2.0 : err ?A; ?e3.0 : err ?A;
         ?e1.0 <=_(le ?r) ?e2.0; ?e2.0 <=_(le ?r) ?e1.0 |]
      ==> ?e1.0 = ?e2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 4)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_app (template_hole 1, template_var 4)),
              template_var 2)
            )],
       template_equation (template_var 2, template_var 1))),
    ("Err.OK_plus_OK_eq_Err_conv",
     "[| ?x : ?A; ?y : ?A; semilat (err ?A, le ?r, ?fe) |]
      ==> (OK ?x +_?fe OK ?y = Err) =
          (~ (EX z:?A. ?x <=_?r z & ?y <=_?r z))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_hole 13,
              template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 3)),
                template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_var 1)),
                  template_var 0)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 4)),
                 template_var 0),
               template_app (template_hole 5, template_var 2))),
           template_hole 4),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3), t_empty))))),
    ("Err.le_err_trans",
     "[| order ?r ?A; ?e1.0 : err ?A; ?e2.0 : err ?A; ?e3.0 : err ?A;
         ?e1.0 <=_(le ?r) ?e2.0; ?e2.0 <=_(le ?r) ?e3.0 |]
      ==> ?e1.0 <=_(le ?r) ?e3.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_app (template_hole 0, template_var 4)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_app (template_hole 0, template_var 4)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 4)),
             template_var 0)
           ))),
    ("Err.err_semilat_UnionI_auxi",
     "[| ALL A:?AS. order ?r A;
         ALL A:?AS.
            ALL B:?AS.
               A ~= B -->
               (ALL a:A. ALL b:B. ~ a <=_?r b & a +_?f b = Err) |]
      ==> order ?r (\<Union> ?AS)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 10, template_var 1),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Err.closed_err_Union_lift2I",
     "[| ALL A:?AS. Semilat.closed (err A) (lift2 ?f); ?AS ~= {};
         ALL A:?AS.
            ALL B:?AS. A ~= B --> (ALL a:A. ALL b:B. a +_?f b = Err) |]
      ==> Semilat.closed (err (\<Union> ?AS)) (lift2 ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1), t_empty)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 7)),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_hole 11,
                 template_app (template_hole 0, template_var 1))),
             template_app (template_hole 10, template_var 0))
           ))),
    ("Err.err_semilat_UnionI",
     "[| ALL A:?AS. err_semilat (A, ?r, ?f); ?AS ~= {};
         ALL A:?AS.
            ALL B:?AS.
               A ~= B -->
               (ALL a:A. ALL b:B. ~ a <=_?r b & a +_?f b = Err) |]
      ==> err_semilat (\<Union> ?AS, ?r, ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 2), t_empty)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 9)),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 15,
             template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_hole 13,
                   template_app (template_hole 0, template_var 2)),
                 template_app
                  (template_app (template_hole 12, template_var 1),
                   template_var 0))))
           )))]:
   (string * thm * template) list
### theory "Draft.ErrMoreTemplates"
### 0.319s elapsed time, 0.446s cpu time, 0.057s GC time
val it = (): unit
