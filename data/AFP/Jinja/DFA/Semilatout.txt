Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SemilatMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SemilatMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SemilatMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.SemilatMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.150s elapsed time, 0.605s cpu time, 0.042s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.SemilatMoreTemplates" via "Draft.Semilat")
### theory "HOL-Library.Set_Algebras"
### 0.194s elapsed time, 0.782s cpu time, 0.042s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SemilatMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.354s elapsed time, 1.409s cpu time, 0.121s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SemilatMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
Found termination order: "{}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "{}"
### theory "HOL-Library.While_Combinator"
### 0.412s elapsed time, 1.626s cpu time, 0.145s GC time
Loading theory "Draft.Semilat" (required by "Draft.SemilatMoreTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale Semilat
  fixes A :: "'a set"
    and r :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
  assumes "Semilat A r f"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
### theory "Draft.Semilat"
### 0.306s elapsed time, 1.204s cpu time, 0.159s GC time
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.960s elapsed time, 3.534s cpu time, 0.853s GC time
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.029s elapsed time, 3.406s cpu time, 0.817s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.910s elapsed time, 5.422s cpu time, 1.012s GC time
Loading theory "Draft.Templates" (required by "Draft.SemilatMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.126s cpu time, 0.050s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SemilatMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.446s elapsed time, 0.452s cpu time, 0.000s GC time
Loading theory "Draft.SemilatMoreTemplates"
val templateLemmas =
   [("Semilat.closed_UNIV", "Semilat.closed UNIV ?f",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Semilat.exec_lub_refl", "exec_lub ?r ?f ?T ?T = ?T",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_var 0),
       template_var 0)),
    ("Semilat.topD", "Semilat.top ?r ?T ==> ?x <=_?r ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Semilat.is_lub_bigger2", "is_lub (?r^*) ?x ?y ?x = ((?y, ?x) : ?r^*)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 1),
           template_var 0),
         template_var 1),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 2, template_var 2)))),
    ("Semilat.is_lub_bigger1", "is_lub (?r^*) ?x ?y ?y = ((?x, ?y) : ?r^*)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 1),
           template_var 0),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 2, template_var 2)))),
    ("Semilat.order_refl", "[| order ?r ?A; ?x : ?A |] ==> ?x <=_?r ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 0)
           ))),
    ("Semilat.order_less_irrefl",
     "[| order ?r ?A; ?x : ?A |] ==> ~ ?x <_?r ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2),
                 template_var 0)
               )
           ))),
    ("Semilat.is_ubD",
     "is_ub ?r ?x ?y ?u ==> (?x, ?u) : ?r & (?y, ?u) : ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_var 3))
           ))),
    ("Semilat.some_lub_conv",
     "[| acyclic ?r; is_lub (?r^*) ?x ?y ?u |]
      ==> some_lub (?r^*) ?x ?y = ?u",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 3)),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Semilat.is_ubI",
     "[| (?x, ?u) : ?r; (?y, ?u) : ?r |] ==> is_ub ?r ?x ?y ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 0),
             template_var 2)
           ))),
    ("Semilat.closedD",
     "[| Semilat.closed ?A ?f; ?x : ?A; ?y : ?A |] ==> ?x +_?f ?y : ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2),
                 template_var 0)),
             template_var 3)
           ))),
    ("Semilat.is_lubD",
     "is_lub ?r ?x ?y ?u ==>
      is_ub ?r ?x ?y ?u & (ALL z. is_ub ?r ?x ?y z --> (?u, z) : ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_app (template_hole 3, t_empty))
           ))),
    ("Semilat.single_valued_has_lubs",
     "[| single_valued ?r; (?x, ?u) : ?r^*; (?y, ?u) : ?r^* |]
      ==> Ex (is_lub (?r^*) ?x ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_app (template_hole 2, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_var 1)),
              template_app (template_hole 2, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 2, template_var 3)),
                 template_var 2),
               template_var 0))
           ))),
    ("Semilat.extend_lub",
     "[| single_valued ?r; is_lub (?r^*) ?x ?y ?u; (?x', ?x) : ?r |]
      ==> EX v. is_lub (?r^*) ?x' ?y v",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 4)),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 3)),
              template_var 4)
            )],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Semilat.top_le_conv",
     "[| order ?r ?A; Semilat.top ?r ?T; ?x : ?A; ?T : ?A |]
      ==> (?T <=_?r ?x) = (?x = ?T)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 2)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 3),
                template_var 0)
              )],
         template_equation (template_var 0, template_var 1)))),
    ("Semilat.order_antisym",
     "[| order ?r ?A; ?x <=_?r ?y; ?y <=_?r ?x; ?x : ?A; ?y : ?A |]
      ==> ?x = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 3),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 0),
                template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Semilat.is_lub_some_lub",
     "[| single_valued ?r; acyclic ?r; (?x, ?u) : ?r^*; (?y, ?u) : ?r^* |]
      ==> is_lub (?r^*) ?x ?y (some_lub (?r^*) ?x ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 3)),
        template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_app (template_hole 2, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_var 1)),
              template_app (template_hole 2, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 2, template_var 3)),
                 template_var 2),
               template_var 0),
             template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 2, template_var 3)),
                 template_var 2),
               template_var 0))
           ))),
    ("Semilat.exec_lub_conv",
     "[| acyclic ?r; ALL x y. (x, y) : ?r --> ?f x = y;
         is_lub (?r^*) ?x ?y ?u |]
      ==> exec_lub ?r ?f ?x ?y = ?u",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 4)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 4)),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Semilat.order_less_trans",
     "[| order ?r ?A; ?x <_?r ?y; ?y <_?r ?z; ?x : ?A; ?y : ?A; ?z : ?A |]
      ==> ?x <_?r ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 4),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 4),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 4),
             template_var 0)
           ))),
    ("Semilat.order_trans",
     "[| order ?r ?A; ?x <=_?r ?y; ?y <=_?r ?z; ?x : ?A; ?y : ?A; ?z : ?A |]
      ==> ?x <=_?r ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 4),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 4),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 4),
             template_var 0)
           ))),
    ("Semilat.acyclic_single_valued_finite",
     "[| acyclic ?r; single_valued ?r; (?x, ?y) : ?r^* |]
      ==> finite (?r Int {a. (?x, a) : ?r^*} \<times> {b. (b, ?y) : ?r^*})",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)),
              template_app (template_hole 4, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, t_empty)),
                 t_empty)))
           ))),
    ("Semilat.is_lub_exec_lub",
     "[| single_valued ?r; acyclic ?r; (?x, ?u) : ?r^*; (?y, ?u) : ?r^*;
         ALL x y. (x, y) : ?r --> ?f x = y |]
      ==> is_lub (?r^*) ?x ?y (exec_lub ?r ?f ?x ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 4)),
        template_predicate (template_app (template_hole 8, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)),
              template_app (template_hole 5, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 2)),
              template_app (template_hole 5, template_var 4))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 5, template_var 4)),
                 template_var 3),
               template_var 1),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 0),
                 template_var 3),
               template_var 1))
           ))),
    ("Semilat.semilat_Def",
     "semilat (?A, ?r, ?f) =
      (order ?r ?A &
       Semilat.closed ?A ?f &
       (ALL x:?A. ALL y:?A. x <=_?r x +_?f y) &
       (ALL x:?A. ALL y:?A. y <=_?r x +_?f y) &
       (ALL x:?A.
           ALL y:?A.
              ALL z:?A. x <=_?r z & y <=_?r z --> x +_?f y <=_?r z))",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app (template_hole 8, template_var 2),
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 2)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 0)),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 3, template_var 2), t_empty)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   t_empty)),
               template_app
                (template_app (template_hole 3, template_var 2),
                 t_empty)))))))]:
   (string * thm * template) list
### theory "Draft.SemilatMoreTemplates"
### 0.317s elapsed time, 0.455s cpu time, 0.059s GC time
val it = (): unit
