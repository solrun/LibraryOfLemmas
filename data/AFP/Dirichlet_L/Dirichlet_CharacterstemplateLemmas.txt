   [("Dirichlet_Characters.principal_dchar_1", "principal_dchar ?n 1 = 1",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Dirichlet_Characters.inv_character_eq_principal_dchar_iff",
     "(inv_character ?\<chi> = principal_dchar ?n) =
      (?\<chi> = principal_dchar ?n)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Dirichlet_Characters.principal_dchar_coprime",
     "coprime ?k ?n ==> principal_dchar ?n ?k = 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Dirichlet_Characters.principal_dchar_not_coprime",
     "~ coprime ?k ?n ==> principal_dchar ?n ?k = 0",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Dirichlet_Characters.principal_dchar_minus1",
     "0 < ?n ==> principal_dchar ?n (?n - Suc 0) = 1",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 1, template_hole 5))),
         template_hole 0))),
    ("Dirichlet_Characters.mod_in_totatives",
     "1 < ?n ==> (?a mod ?n : totatives ?n) = coprime ?a ?n",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1))))]
