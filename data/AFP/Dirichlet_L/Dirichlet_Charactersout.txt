Loading theory "HOL-Library.Cancellation" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.General_Auxiliary" via "HOL-Algebra.IntRing" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
Loading theory "HOL-Library.FuncSet" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order" via "HOL-Algebra.Congruence")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Elementary_Groups")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.124s elapsed time, 0.503s cpu time, 0.043s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.278s elapsed time, 1.110s cpu time, 0.110s GC time
Loading theory "HOL-Library.Power_By_Squaring" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Dirichlet_Series.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Mod_Exp")
Found termination order: "size_list size <*mlex*> {}"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.FuncSet"
### 0.372s elapsed time, 1.475s cpu time, 0.110s GC time
Loading theory "HOL-Algebra.Congruence" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order")
### theory "HOL-Library.Nat_Bijection"
### 0.284s elapsed time, 1.113s cpu time, 0.125s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.ExtrEqs")
class monoid_mult = semigroup_mult + power +
  assumes "mult_1_left": "!!a. (1::'a) * a = a"
    and "mult_1_right": "!!a. a * (1::'a) = a"
### theory "HOL-Library.Power_By_Squaring"
### 0.160s elapsed time, 0.629s cpu time, 0.058s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.455s elapsed time, 1.809s cpu time, 0.169s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.General_Auxiliary" via "HOL-Algebra.IntRing" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Set_Algebras"
### 0.185s elapsed time, 0.724s cpu time, 0.076s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale equivalence
  fixes S :: "('a, 'b) eq_object_scheme"  (structure)
  assumes "equivalence S"
locale partition
  fixes A :: "'a set"
    and B :: "'a set set"
  assumes "Congruence.partition A B"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Algebra.Congruence"
### 0.797s elapsed time, 2.996s cpu time, 0.703s GC time
Loading theory "HOL-Algebra.Order" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  right :: "'a tree => 'a tree"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.934s elapsed time, 3.534s cpu time, 0.713s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "partial_order L"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
locale weak_partial_order_bottom
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_bottom L"
locale weak_partial_order_top
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_top L"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
locale weak_total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_total_order L"
locale total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "total_order L"
### theory "HOL-Algebra.Order"
### 0.784s elapsed time, 3.082s cpu time, 0.326s GC time
Loading theory "HOL-Algebra.Lattice" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.961s elapsed time, 3.653s cpu time, 1.096s GC time
Loading theory "HOL-Number_Theory.Fib" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Dirichlet_Series.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale weak_upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_upper_semilattice L"
locale weak_lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lower_semilattice L"
locale weak_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lattice L"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Number_Theory.Fib"
### 0.265s elapsed time, 1.037s cpu time, 0.145s GC time
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
Found termination order: "size <*mlex*> {}"
locale weak_bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_bounded_lattice L"
locale upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "upper_semilattice L"
### theory "HOL-Library.Tree"
### 2.146s elapsed time, 8.000s cpu time, 1.946s GC time
Loading theory "Draft.Templates" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.ExtrEqs")
locale lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lower_semilattice L"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
locale Lattice.lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lattice L"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.074s elapsed time, 0.234s cpu time, 0.078s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Dirichlet_CharactersMoreTemplates")
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
### theory "HOL-Algebra.Lattice"
### 0.976s elapsed time, 3.393s cpu time, 1.130s GC time
Loading theory "HOL-Algebra.Complete_Lattice" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.849s elapsed time, 2.662s cpu time, 1.129s GC time
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
### theory "HOL-Algebra.Complete_Lattice"
### 0.855s elapsed time, 2.576s cpu time, 1.129s GC time
Loading theory "HOL-Algebra.Group" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group")
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
overloading
  nat_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => nat => 'a
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
overloading
  int_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => int => 'a
### theory "HOL-Library.Multiset"
### 3.777s elapsed time, 12.679s cpu time, 3.416s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.General_Auxiliary" via "HOL-Algebra.IntRing" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm")
locale submonoid
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "submonoid H G"
locale subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "subgroup H G"
locale group_hom
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and H :: "('c, 'd) monoid_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "group_hom G H h"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_group G"
### theory "HOL-Algebra.Group"
### 1.195s elapsed time, 2.709s cpu time, 0.471s GC time
Loading theory "HOL-Algebra.Coset" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group")
Loading theory "HOL-Algebra.FiniteProduct" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.Module" via "HOL-Algebra.Ring")
Proofs for inductive predicate(s) "foldSetDp"
  Proving monotonicity ...
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
locale normal
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "normal H G"
locale LCD
  fixes B :: "'b set"
    and D :: "'a set"
    and f :: "'b => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
  assumes "LCD B D (\<cdot>)"
locale ACeD
  fixes D :: "'a set"
    and f :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and e :: "'a"
  assumes "ACeD D (\<cdot>) e"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
### theory "HOL-Algebra.FiniteProduct"
### 0.399s elapsed time, 1.222s cpu time, 0.163s GC time
Loading theory "HOL-Algebra.Ring" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.Module")
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
### Ambiguous input (line 611 of "~~/src/HOL/Algebra/Coset.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###       ("_position" H))
###     ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" carrier) ("_position" G)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>Set.member"
###             ("\<^const>Group.monoid.mult_indexed"
###               ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                 ("_position" x))
###               ("_index" ("_position" G)) ("_position" y))
###             ("_position" H)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###     ("\<^const>HOL.eq" ("_position" H)
###       ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" y)
###               ("_applC" ("_position" carrier) ("_position" G)))
###             ("\<^const>Set.member"
###               ("\<^const>Group.monoid.mult_indexed"
###                 ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                   ("_position" x))
###                 ("_index" ("_position" G)) ("_position" y))
###               ("_position" H))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
### Cannot skip proof of schematic goal statement
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
### theory "HOL-Algebra.Coset"
### 1.064s elapsed time, 3.270s cpu time, 0.483s GC time
Loading theory "HOL-Algebra.Generated_Groups" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group")
Proofs for inductive predicate(s) "generatep"
  Proving monotonicity ...
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
carrier (| carrier = ?carrier, ... = ?more |) = ?carrier
partial_object.more (| carrier = ?carrier, ... = ?more |) = ?more
carrier_update ?carrier' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier' ?carrier, ... = ?more |)
partial_object.more_update ?more' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier, ... = ?more' ?more |)
(\<otimes>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub>) =
?mult
\<one>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub> =
?one
monoid.more
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
?more
mult_update ?mult'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult' ?mult, one = ?one, ... = ?more |)
one_update ?one'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one' ?one, ... = ?more |)
monoid.more_update ?more'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more' ?more |)
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### ML warning (line 44 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 47 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Matches are not exhaustive.
signature RINGSIMP =
  sig
    val add_struct: string * term list -> attribute
    val algebra_tac: Proof.context -> int -> tactic
    val del_struct: string * term list -> attribute
    val print_structures: Proof.context -> unit
  end
structure Ringsimp: RINGSIMP
### theory "HOL-Algebra.Generated_Groups"
### 0.564s elapsed time, 1.717s cpu time, 0.156s GC time
Loading theory "HOL-Algebra.Elementary_Groups" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group")
locale group_disjoint_sum
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and A :: "'a set"
    and B :: "'a set"
  assumes "group_disjoint_sum G A B"
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
### theory "HOL-Algebra.Elementary_Groups"
### 0.461s elapsed time, 1.404s cpu time, 0.155s GC time
locale ring_hom_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_cring R S h"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Algebra.Ring"
### 2.330s elapsed time, 6.520s cpu time, 0.764s GC time
Loading theory "HOL-Algebra.AbelCoset" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.RingHom" via "HOL-Algebra.Ideal")
Loading theory "HOL-Algebra.Module" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly")
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
locale abelian_group_hom
  fixes G :: "('a, 'b) ring_scheme"  (structure)
    and H :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "abelian_group_hom G H h"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
[| ?M <= carrier G; ?g : carrier G; ?h : carrier G |]
==> ?M #>\<^bsub>add_monoid G\<^esub> ?g #>\<^bsub>add_monoid G\<^esub> ?h =
    ?M #>\<^bsub>add_monoid G\<^esub> ?g \<oplus> ?h
[| abelian_group ?G; ?M <= carrier ?G; ?g : carrier ?G; ?h : carrier ?G |]
==> ?M +>\<^bsub>?G\<^esub> ?g +>\<^bsub>?G\<^esub> ?h =
    ?M +>\<^bsub>?G\<^esub> ?g \<oplus>\<^bsub>?G\<^esub> ?h
locale algebra
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "algebra R M"
locale additive_subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) ring_scheme"  (structure)
  assumes "additive_subgroup H G"
locale abelian_subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_subgroup H G"
locale submodule
  fixes H :: "'c set"
    and R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "submodule H R M"
### theory "HOL-Algebra.Module"
### 1.207s elapsed time, 3.676s cpu time, 0.321s GC time
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 5.521s elapsed time, 14.866s cpu time, 1.650s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.General_Auxiliary" via "HOL-Algebra.IntRing" via "HOL-Computational_Algebra.Primes")
### theory "HOL-Algebra.AbelCoset"
### 2.168s elapsed time, 5.725s cpu time, 0.440s GC time
Loading theory "HOL-Algebra.Ideal" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.RingHom")
locale ideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ideal I R"
locale principalideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "principalideal I R"
locale maximalideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "maximalideal I R"
locale primeideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "primeideal I R"
### theory "HOL-Algebra.Ideal"
### 1.583s elapsed time, 3.312s cpu time, 0.334s GC time
Loading theory "HOL-Algebra.RingHom" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly")
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
locale ring_hom_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_ring R S h"
### theory "HOL-Algebra.RingHom"
### 0.653s elapsed time, 1.343s cpu time, 0.086s GC time
Loading theory "HOL-Algebra.QuotRing" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.General_Auxiliary" via "HOL-Algebra.IntRing")
Loading theory "HOL-Algebra.UnivPoly" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group")
locale bound
  fixes z :: "'a"
    and n :: "nat"
    and f :: "nat => 'a"
  assumes "bound z n f"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
### theory "HOL-Algebra.QuotRing"
### 1.875s elapsed time, 5.737s cpu time, 0.686s GC time
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
locale UP_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
    and s :: "'c"
    and Eval :: "(nat => 'a) => 'c"
  assumes "UP_univ_prop R S h s"
  defines "P == UP R"
    and "Eval == eval R S h s"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 7.473s elapsed time, 17.560s cpu time, 1.923s GC time
Loading theory "HOL-Computational_Algebra.Primes" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.General_Auxiliary" via "HOL-Algebra.IntRing")
### theory "HOL-Computational_Algebra.Primes"
### 0.202s elapsed time, 0.434s cpu time, 0.000s GC time
Loading theory "HOL-Number_Theory.Cong" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "HOL-Number_Theory.Residues")
Loading theory "HOL-Algebra.IntRing" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.General_Auxiliary")
Loading theory "HOL-Number_Theory.Eratosthenes" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Dirichlet_Series.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory")
class unique_euclidean_semiring = euclidean_semiring_cancel +
  fixes division_segment :: "'a => 'a"
  assumes
    "euclidean_size_mult":
      "!!a b. euclidean_size (a * b) = euclidean_size a * euclidean_size b"
  assumes "is_unit_division_segment": "!!a. is_unit (division_segment a)"
    and
    "division_segment_mult":
      "!!a b.
          [| a ~= (0::'a); b ~= (0::'a) |]
          ==> division_segment (a * b) =
              division_segment a * division_segment b"
    and
    "division_segment_mod":
      "!!b a.
          [| b ~= (0::'a); ~ b dvd a |]
          ==> division_segment (a mod b) = division_segment b"
  assumes
    "div_bounded":
      "!!b r q.
          [| b ~= (0::'a); division_segment r = division_segment b;
             euclidean_size r < euclidean_size b |]
          ==> (q * b + r) div b = q"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Number_Theory.Eratosthenes"
### 0.351s elapsed time, 1.378s cpu time, 0.220s GC time
Loading theory "HOL-Number_Theory.Prime_Powers" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Dirichlet_Series.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory")
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
### theory "HOL-Number_Theory.Cong"
### 0.907s elapsed time, 3.574s cpu time, 0.496s GC time
Loading theory "HOL-Number_Theory.Mod_Exp" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Dirichlet_Series.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory")
### Cannot skip proof of schematic goal statement
### theory "HOL-Number_Theory.Prime_Powers"
### 0.849s elapsed time, 3.375s cpu time, 0.491s GC time
Loading theory "HOL-Number_Theory.Totient" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "HOL-Number_Theory.Residues")
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
### theory "HOL-Algebra.IntRing"
### 1.343s elapsed time, 5.310s cpu time, 0.829s GC time
Loading theory "Finitely_Generated_Abelian_Groups.General_Auxiliary" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds")
class euclidean_semiring_cancel = euclidean_semiring +
  assumes
    "div_mult_self1":
      "!!b a c. b ~= (0::'a) ==> (a + c * b) div b = c + a div b"
    and
    "div_mult_mult1":
      "!!c a b. c ~= (0::'a) ==> c * a div (c * b) = a div b"
### theory "HOL-Number_Theory.Mod_Exp"
### 0.595s elapsed time, 2.360s cpu time, 0.450s GC time
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
consts
  totient_naive :: "nat => nat => nat => nat"
### theory "HOL-Number_Theory.Totient"
### 0.588s elapsed time, 2.284s cpu time, 0.341s GC time
### theory "Finitely_Generated_Abelian_Groups.General_Auxiliary"
### 0.617s elapsed time, 2.173s cpu time, 0.404s GC time
### theory "HOL-Algebra.UnivPoly"
### 8.665s elapsed time, 24.279s cpu time, 6.064s GC time
Loading theory "HOL-Algebra.Multiplicative_Group" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication")
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
### theory "HOL-Algebra.Multiplicative_Group"
### 1.866s elapsed time, 2.438s cpu time, 0.367s GC time
Loading theory "Finitely_Generated_Abelian_Groups.Set_Multiplication" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups")
Loading theory "HOL-Number_Theory.Residues" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters")
### theory "Finitely_Generated_Abelian_Groups.Set_Multiplication"
### 0.115s elapsed time, 0.260s cpu time, 0.000s GC time
Loading theory "Finitely_Generated_Abelian_Groups.Group_Hom" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds")
Loading theory "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend")
locale residues
  fixes m :: "int"
    and R :: "int ring"  (structure)
  assumes "residues m"
  defines "R == residue_ring m"
### theory "Finitely_Generated_Abelian_Groups.Group_Hom"
### 0.269s elapsed time, 0.838s cpu time, 0.147s GC time
### theory "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups"
### 0.274s elapsed time, 0.848s cpu time, 0.147s GC time
Loading theory "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds")
### theory "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend"
### 0.235s elapsed time, 0.525s cpu time, 0.051s GC time
locale residues
  fixes m :: "int"
    and R :: "int ring"  (structure)
  assumes "residues m"
  defines "R == residue_ring m"
Loading theory "Finitely_Generated_Abelian_Groups.Finite_And_Cyclic_Groups" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds")
Loading theory "Finitely_Generated_Abelian_Groups.IDirProds" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend")
locale residues_prime
  fixes p :: "nat"
    and R :: "int ring"  (structure)
  assumes "residues_prime p"
  defines "R == residue_ring (int p)"
locale residues_prime
  fixes p :: "nat"
    and R :: "int ring"  (structure)
  assumes "residues_prime p"
  defines "R == residue_ring (int p)"
locale finite_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "finite_group G"
locale finite_comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "finite_comm_group G"
locale cyclic_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and gen :: "'a"
  assumes "Finite_And_Cyclic_Groups.cyclic_group G gen"
### theory "HOL-Number_Theory.Residues"
### 1.503s elapsed time, 4.339s cpu time, 0.490s GC time
Loading theory "HOL-Number_Theory.Euler_Criterion" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Dirichlet_Series.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Quadratic_Reciprocity" via "HOL-Number_Theory.Gauss")
Loading theory "HOL-Number_Theory.Pocklington" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Dirichlet_Series.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory")
locale finite_cyclic_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and gen :: "'a"
  assumes "finite_cyclic_group G gen"
### theory "Finitely_Generated_Abelian_Groups.IDirProds"
### 1.012s elapsed time, 3.230s cpu time, 0.412s GC time
Loading theory "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds")
### theory "HOL-Number_Theory.Euler_Criterion"
### 0.159s elapsed time, 0.625s cpu time, 0.121s GC time
Loading theory "HOL-Number_Theory.Gauss" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Dirichlet_Series.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Quadratic_Reciprocity")
locale GAUSS
  fixes p :: "nat"
    and a :: "int"
  assumes "GAUSS p a"
### theory "HOL-Number_Theory.Pocklington"
### 0.392s elapsed time, 1.524s cpu time, 0.336s GC time
Loading theory "HOL-Number_Theory.Residue_Primitive_Roots" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Dirichlet_Series.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory")
### theory "HOL-Number_Theory.Gauss"
### 0.262s elapsed time, 1.023s cpu time, 0.216s GC time
Loading theory "HOL-Number_Theory.Quadratic_Reciprocity" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Dirichlet_Series.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory")
Proofs for inductive predicate(s) "residue_primroot"
  Proving monotonicity ...
### theory "Finitely_Generated_Abelian_Groups.Finite_And_Cyclic_Groups"
### 1.341s elapsed time, 4.520s cpu time, 0.628s GC time
locale QR
  fixes p :: "nat"
    and q :: "nat"
  assumes "QR p q"
### theory "Finitely_Generated_Abelian_Groups.Finite_Product_Extend"
### 1.638s elapsed time, 5.983s cpu time, 4.173s GC time
Loading theory "Finitely_Generated_Abelian_Groups.DirProds" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups")
Loading theory "Finitely_Generated_Abelian_Groups.Group_Relations" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups")
### theory "HOL-Number_Theory.Residue_Primitive_Roots"
### 1.375s elapsed time, 4.968s cpu time, 3.957s GC time
### theory "HOL-Number_Theory.Quadratic_Reciprocity"
### 1.499s elapsed time, 5.409s cpu time, 4.089s GC time
Loading theory "HOL-Number_Theory.Number_Theory" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Dirichlet_Series.Multiplicative_Function")
### theory "Finitely_Generated_Abelian_Groups.Group_Relations"
### 0.311s elapsed time, 1.013s cpu time, 0.132s GC time
### theory "Finitely_Generated_Abelian_Groups.DirProds"
### 0.714s elapsed time, 1.887s cpu time, 0.312s GC time
Loading theory "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Draft.Multiplicative_Characters")
locale fin_gen_comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and gen :: "'a set"
  assumes "fin_gen_comm_group G gen"
### theory "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups"
### 0.584s elapsed time, 1.266s cpu time, 0.158s GC time
Loading theory "Draft.Multiplicative_Characters" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters")
bundle character_syntax
### theory "HOL-Number_Theory.Number_Theory"
### 1.264s elapsed time, 2.899s cpu time, 0.338s GC time
Loading theory "Dirichlet_Series.Dirichlet_Misc" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters" via "Dirichlet_Series.Multiplicative_Function")
locale character
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and \<chi> :: "'a => complex"
  assumes "character G \<chi>"
### theory "Dirichlet_Series.Dirichlet_Misc"
### 0.097s elapsed time, 0.222s cpu time, 0.070s GC time
Loading theory "Dirichlet_Series.Multiplicative_Function" (required by "Draft.Dirichlet_CharactersMoreTemplates" via "Draft.Dirichlet_Characters")
locale finite_comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "finite_comm_group G"
locale multiplicative_function
  fixes f :: "nat => 'a"
  assumes "multiplicative_function f"
locale multiplicative_function'
  fixes f :: "nat => 'a"
    and f_prime_power :: "nat => nat => 'a"
    and f_prime :: "nat => 'a"
  assumes "multiplicative_function' f f_prime_power f_prime"
locale completely_multiplicative_function
  fixes f :: "nat => 'a"
  assumes "completely_multiplicative_function f"
locale completely_multiplicative_function'
  fixes f :: "nat => 'a"
    and f_prime :: "nat => 'a"
  assumes "completely_multiplicative_function' f f_prime"
### theory "Dirichlet_Series.Multiplicative_Function"
### 0.161s elapsed time, 0.321s cpu time, 0.000s GC time
locale finite_comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "finite_comm_group G"
### theory "Draft.Multiplicative_Characters"
### 0.836s elapsed time, 1.326s cpu time, 0.251s GC time
Loading theory "Draft.Dirichlet_Characters" (required by "Draft.Dirichlet_CharactersMoreTemplates")
bundle dcharacter_syntax
locale residues_nat
  fixes n :: "nat"  (structure)
    and G :: "nat monoid"
  assumes "residues_nat n"
  defines "G == residue_mult_group n"
locale dcharacter
  fixes n :: "nat"  (structure)
    and G :: "nat monoid"
    and \<chi> :: "nat => complex"
  assumes "dcharacter n \<chi>"
  defines "G == residue_mult_group n"
locale residues_nat
  fixes n :: "nat"  (structure)
    and G :: "nat monoid"
  assumes "residues_nat n"
  defines "G == residue_mult_group n"
### theory "Draft.Dirichlet_Characters"
### 0.662s elapsed time, 0.709s cpu time, 0.062s GC time
Loading theory "Draft.Dirichlet_CharactersMoreTemplates"
val templateLemmas =
   [("Dirichlet_Characters.principal_dchar_1", "principal_dchar ?n 1 = 1",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Dirichlet_Characters.inv_character_eq_principal_dchar_iff",
     "(inv_character ?\<chi> = principal_dchar ?n) =
      (?\<chi> = principal_dchar ?n)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Dirichlet_Characters.principal_dchar_coprime",
     "coprime ?k ?n ==> principal_dchar ?n ?k = 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Dirichlet_Characters.principal_dchar_not_coprime",
     "~ coprime ?k ?n ==> principal_dchar ?n ?k = 0",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Dirichlet_Characters.principal_dchar_minus1",
     "0 < ?n ==> principal_dchar ?n (?n - Suc 0) = 1",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 1, template_hole 5))),
         template_hole 0))),
    ("Dirichlet_Characters.mod_in_totatives",
     "1 < ?n ==> (?a mod ?n : totatives ?n) = coprime ?a ?n",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1))))]:
   (string * thm * template) list
### theory "Draft.Dirichlet_CharactersMoreTemplates"
### 0.580s elapsed time, 0.901s cpu time, 0.077s GC time
val it = (): unit
