Loading theory "HOL-Library.FuncSet" (required by "Draft.Comm_RingMoreTemplates" via "Draft.Comm_Ring" via "Draft.Group_Extras" via "Jacobson_Basic_Algebra.Group_Theory" via "Jacobson_Basic_Algebra.Set_Theory")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Comm_RingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Comm_RingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Comm_RingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.116s elapsed time, 0.481s cpu time, 0.041s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Comm_RingMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.205s elapsed time, 0.837s cpu time, 0.041s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Comm_RingMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.325s elapsed time, 1.304s cpu time, 0.115s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Comm_RingMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.FuncSet"
### 0.385s elapsed time, 1.537s cpu time, 0.115s GC time
Loading theory "Jacobson_Basic_Algebra.Set_Theory" (required by "Draft.Comm_RingMoreTemplates" via "Draft.Comm_Ring" via "Draft.Group_Extras" via "Jacobson_Basic_Algebra.Group_Theory")
locale map
  fixes \<alpha> :: "'a => 'b"
    and S :: "'a set"
    and T :: "'b set"
  assumes "map \<alpha> S T"
locale surjective_map
  fixes \<alpha> :: "'a => 'b"
    and S :: "'a set"
    and T :: "'b set"
  assumes "surjective_map \<alpha> S T"
locale injective_map
  fixes \<alpha> :: "'a => 'b"
    and S :: "'a set"
    and T :: "'b set"
  assumes "injective_map \<alpha> S T"
locale bijective
  fixes \<alpha> :: "'a => 'b"
    and S :: "'a set"
    and T :: "'b set"
  assumes "bijective \<alpha> S T"
locale bijective_map
  fixes \<alpha> :: "'a => 'b"
    and S :: "'a set"
    and T :: "'b set"
  assumes "bijective_map \<alpha> S T"
locale map
  fixes \<alpha> :: "'a => 'b"
    and S :: "'a set"
    and T :: "'b set"
  assumes "map \<alpha> S T"
locale equivalence
  fixes S :: "'a set"
    and E :: "('a * 'a) set"
  assumes "equivalence S E"
locale partition
  fixes S :: "'a set"
    and P :: "'a set set"
  assumes "partition S P"
locale equivalence
  fixes S :: "'a set"
    and E :: "('a * 'a) set"
  assumes "equivalence S E"
locale partition
  fixes S :: "'a set"
    and P :: "'a set set"
  assumes "partition S P"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
locale equivalence
  fixes S :: "'a set"
    and E :: "('a * 'a) set"
  assumes "equivalence S E"
Found termination order: "size <*mlex*> {}"
locale equivalence
  fixes S :: "'a set"
    and E :: "('a * 'a) set"
  assumes "equivalence S E"
locale fiber_relation_notation
  fixes S :: "'a set"
locale fiber_relation
  fixes \<alpha> :: "'a => 'b"
    and S :: "'a set"
    and T :: "'b set"
  assumes "fiber_relation \<alpha> S T"
Found termination order: "size <*mlex*> {}"
### theory "Jacobson_Basic_Algebra.Set_Theory"
### 0.444s elapsed time, 1.743s cpu time, 0.213s GC time
Loading theory "Draft.Set_Extras" (required by "Draft.Comm_RingMoreTemplates" via "Draft.Comm_Ring" via "Draft.Group_Extras")
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "Draft.Set_Extras"
### 0.064s elapsed time, 0.257s cpu time, 0.000s GC time
Loading theory "Jacobson_Basic_Algebra.Group_Theory" (required by "Draft.Comm_RingMoreTemplates" via "Draft.Comm_Ring" via "Draft.Group_Extras")
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
locale Group_Theory.monoid
  fixes M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "monoid M (\<cdot>) \<one>"
locale submonoid
  fixes N :: "'a set"
    and M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "submonoid N M (\<cdot>) \<one>"
locale transformations
  fixes S :: "'a set"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
locale transformation_monoid
  fixes M :: "('a => 'a) set"
    and S :: "'a set"
  assumes "transformation_monoid M S"
locale Group_Theory.monoid
  fixes M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "monoid M (\<cdot>) \<one>"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 1.128s elapsed time, 4.290s cpu time, 0.869s GC time
Loading theory "Draft.Topological_Space" (required by "Draft.Comm_RingMoreTemplates" via "Draft.Comm_Ring")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
locale submonoid
  fixes N :: "'a set"
    and M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "submonoid N M (\<cdot>) \<one>"
Found termination order: "size <*mlex*> {}"
locale Group_Theory.group
  fixes G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "group G (\<cdot>) \<one>"
consts
  flat :: "'a list stream => 'a stream"
locale subgroup
  fixes G :: "'a set"
    and M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "subgroup G M (\<cdot>) \<one>"
locale Group_Theory.monoid
  fixes M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "monoid M (\<cdot>) \<one>"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
locale transformations
  fixes S :: "'a set"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.252s elapsed time, 4.784s cpu time, 0.888s GC time
Found termination order: "size <*mlex*> {}"
locale transformation_group
  fixes G :: "('a => 'a) set"
    and S :: "'a set"
  assumes "transformation_group G S"
locale Topological_Space.topological_space
  fixes S :: "'a set"
    and is_open :: "'a set => bool"
  assumes "topological_space S is_open"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale monoid_isomorphism
  fixes \<eta> :: "'a => 'b"
    and M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and M' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "monoid_isomorphism \<eta> M (\<cdot>) \<one> M' (\<cdot>') \<one>'"
locale Topological_Space.t2_space
  fixes S :: "'a set"
    and is_open :: "'a set => bool"
  assumes "t2_space S is_open"
Proofs for inductive predicate(s) "generated_topology"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
locale monoid_isomorphism'
  fixes \<eta> :: "'a => 'b"
    and M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and M' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "monoid_isomorphism' \<eta> M (\<cdot>) \<one> M' (\<cdot>') \<one>'"
locale cover_of_subset
  fixes X :: "'a set"
    and U :: "'a set"
    and index :: "real set"
    and cover :: "real => 'a set"
  assumes "cover_of_subset X U index cover"
locale monoid_isomorphism
  fixes \<eta> :: "'a => 'b"
    and M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and M' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "monoid_isomorphism \<eta> M (\<cdot>) \<one> M' (\<cdot>') \<one>'"
locale open_cover_of_subset
  fixes X :: "'a set"
    and is_open :: "'a set => bool"
    and U :: "'a set"
    and I :: "real set"
    and C :: "real => 'a set"
  assumes "open_cover_of_subset X is_open U I C"
locale left_translations_of_monoid
  fixes M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "left_translations_of_monoid M (\<cdot>) \<one>"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale open_cover_of_open_subset
  fixes X :: "'a set"
    and is_open :: "'a set => bool"
    and U :: "'a set"
    and I :: "real set"
    and C :: "real => 'a set"
  assumes "open_cover_of_open_subset X is_open U I C"
locale ind_topology
  fixes X :: "'a set"
    and is_open :: "'a set => bool"
    and S :: "'a set"
  assumes "ind_topology X is_open S"
locale continuous_map
  fixes S :: "'a set"
    and is_open :: "'a set => bool"
    and S' :: "'b set"
    and is_open' :: "'b set => bool"
    and f :: "'a => 'b"
  assumes "continuous_map S is_open S' is_open' f"
locale Group_Theory.monoid
  fixes M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "monoid M (\<cdot>) \<one>"
locale homeomorphism
  fixes S :: "'a set"
    and is_open :: "'a set => bool"
    and S' :: "'b set"
    and is_open' :: "'b set => bool"
    and f :: "'a => 'b"
  assumes "homeomorphism S is_open S' is_open' f"
### Ambiguous input (line 251 of "$AFP/Grothendieck_Schemes/Topological_Space.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC"
###     ("\<^const>Topological_Spaces.topological_space_class.tendsto"
###       ("_position" f) ("_position" l))
###     ("_position" F))
###   ("_applC" ("_position" filterlim)
###     ("_cargs" ("_position" f)
###       ("_cargs" ("_applC" ("_position" nhds) ("_position" l))
###         ("_position" F)))))
### ("\<^const>Pure.eq"
###   ("_applC" ("\<^fixed>tendsto" ("_position" f) ("_position" l))
###     ("_position" F))
###   ("_applC" ("_position" filterlim)
###     ("_cargs" ("_position" f)
###       ("_cargs" ("_applC" ("_position" nhds) ("_position" l))
###         ("_position" F)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 254 of "$AFP/Grothendieck_Schemes/Topological_Space.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Lim) ("_cargs" ("_position" A) ("_position" f)))
###     ("_The" ("_position" l)
###       ("_applC" ("\<^const>local.tendsto" ("_position" f) ("_position" l))
###         ("_position" A)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Lim) ("_cargs" ("_position" A) ("_position" f)))
###     ("_The" ("_position" l)
###       ("_applC"
###         ("\<^const>Topological_Spaces.topological_space_class.tendsto"
###           ("_position" f) ("_position" l))
###         ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Topological_Space"
### 0.642s elapsed time, 2.177s cpu time, 0.232s GC time
locale left_translations_of_group
  fixes G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "left_translations_of_group G (\<cdot>) \<one>"
Found termination order: "size <*mlex*> {}"
locale Group_Theory.group
  fixes G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "group G (\<cdot>) \<one>"
### theory "HOL-Library.Tree"
### 2.137s elapsed time, 7.458s cpu time, 1.210s GC time
Loading theory "Draft.Templates" (required by "Draft.Comm_RingMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.112s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Comm_RingMoreTemplates")
locale right_translations_of_group
  fixes G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "right_translations_of_group G (\<cdot>) \<one>"
locale commutative_monoid
  fixes M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "commutative_monoid M (\<cdot>) \<one>"
locale abelian_group
  fixes G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "abelian_group G (\<cdot>) \<one>"
locale transformation_group
  fixes G :: "('a => 'a) set"
    and S :: "'a set"
  assumes "transformation_group G S"
locale monoid_isomorphism
  fixes \<eta> :: "'a => 'b"
    and M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and M' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "monoid_isomorphism \<eta> M (\<cdot>) \<one> M' (\<cdot>') \<one>'"
locale coset_notation
  fixes composition :: "'a => 'b => 'c"  (infixl \<open>\<cdot>\<close> 70)
locale subgroup_of_group
  fixes H :: "'a set"
    and G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "subgroup_of_group H G (\<cdot>) \<one>"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.551s elapsed time, 1.147s cpu time, 0.105s GC time
locale subgroup
  fixes G :: "'a set"
    and M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "subgroup G M (\<cdot>) \<one>"
locale Group_Theory.group
  fixes G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "group G (\<cdot>) \<one>"
locale subgroup_of_group
  fixes H :: "'a set"
    and G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "subgroup_of_group H G (\<cdot>) \<one>"
locale monoid_congruence
  fixes M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and E :: "('a * 'a) set"
  assumes "monoid_congruence M (\<cdot>) \<one> E"
locale group_congruence
  fixes G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and E :: "('a * 'a) set"
  assumes "group_congruence G (\<cdot>) \<one> E"
locale normal_subgroup
  fixes K :: "'a set"
    and G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "normal_subgroup K G (\<cdot>) \<one>"
locale subgroup_of_group
  fixes H :: "'a set"
    and G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "subgroup_of_group H G (\<cdot>) \<one>"
locale group_congruence
  fixes G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and E :: "('a * 'a) set"
  assumes "group_congruence G (\<cdot>) \<one> E"
locale normal_subgroup
  fixes K :: "'a set"
    and G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "normal_subgroup K G (\<cdot>) \<one>"
locale Group_Theory.group
  fixes G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "group G (\<cdot>) \<one>"
locale normal_subgroup
  fixes K :: "'a set"
    and G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "normal_subgroup K G (\<cdot>) \<one>"
locale subgroup_of_abelian_group
  fixes H :: "'a set"
    and G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "subgroup_of_abelian_group H G (\<cdot>) \<one>"
locale monoid_homomorphism
  fixes \<eta> :: "'a => 'b"
    and M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and M' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "monoid_homomorphism \<eta> M (\<cdot>) \<one> M' (\<cdot>') \<one>'"
locale monoid_epimorphism
  fixes \<eta> :: "'a => 'b"
    and M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and M' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "monoid_epimorphism \<eta> M (\<cdot>) \<one> M' (\<cdot>') \<one>'"
locale monoid_monomorphism
  fixes \<eta> :: "'a => 'b"
    and M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and M' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "monoid_monomorphism \<eta> M (\<cdot>) \<one> M' (\<cdot>') \<one>'"
locale monoid_homomorphism
  fixes \<eta> :: "'a => 'b"
    and M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and M' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "monoid_homomorphism \<eta> M (\<cdot>) \<one> M' (\<cdot>') \<one>'"
locale monoid_homomorphism_fundamental
  fixes \<eta> :: "'a => 'b"
    and M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and M' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "monoid_homomorphism_fundamental \<eta> M (\<cdot>) \<one> M' (\<cdot>')
      \<one>'"
locale group_homomorphism
  fixes \<eta> :: "'a => 'b"
    and G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and G' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "group_homomorphism \<eta> G (\<cdot>) \<one> G' (\<cdot>') \<one>'"
locale group_epimorphism
  fixes \<eta> :: "'a => 'b"
    and G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and G' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "group_epimorphism \<eta> G (\<cdot>) \<one> G' (\<cdot>') \<one>'"
locale normal_subgroup_in_kernel
  fixes \<eta> :: "'a => 'b"
    and G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and G' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
    and L :: "'a set"
  assumes
    "normal_subgroup_in_kernel \<eta> G (\<cdot>) \<one> G' (\<cdot>')
      \<one>' L"
locale group_homomorphism_fundamental
  fixes \<eta> :: "'a => 'b"
    and G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and G' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "group_homomorphism_fundamental \<eta> G (\<cdot>) \<one> G' (\<cdot>')
      \<one>'"
locale group_isomorphism
  fixes \<eta> :: "'a => 'b"
    and G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and G' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "group_isomorphism \<eta> G (\<cdot>) \<one> G' (\<cdot>') \<one>'"
locale group_epimorphism_fundamental
  fixes \<eta> :: "'a => 'b"
    and G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and G' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "group_epimorphism_fundamental \<eta> G (\<cdot>) \<one> G' (\<cdot>')
      \<one>'"
locale group_homomorphism
  fixes \<eta> :: "'a => 'b"
    and G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and G' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "group_homomorphism \<eta> G (\<cdot>) \<one> G' (\<cdot>') \<one>'"
### theory "Jacobson_Basic_Algebra.Group_Theory"
### 8.018s elapsed time, 12.574s cpu time, 2.366s GC time
Loading theory "Draft.Group_Extras" (required by "Draft.Comm_RingMoreTemplates" via "Draft.Comm_Ring")
Loading theory "Jacobson_Basic_Algebra.Ring_Theory" (required by "Draft.Comm_RingMoreTemplates" via "Draft.Comm_Ring")
Proofs for inductive predicate(s) "foldSetDp"
  Proving monotonicity ...
locale Ring_Theory.ring
  fixes R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "ring R (+) (\<cdot>) \<zero> \<one>"
locale LCD
  fixes B :: "'b set"
    and D :: "'a set"
    and f :: "'b => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
  assumes "LCD B D (\<cdot>)"
locale subring
  fixes S :: "'a set"
    and R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "subring S R (+) (\<cdot>) \<zero> \<one>"
locale Ring_Theory.ring
  fixes R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "ring R (+) (\<cdot>) \<zero> \<one>"
locale ACeD
  fixes D :: "'a set"
    and f :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and e :: "'a"
  assumes "ACeD D (\<cdot>) e"
locale Group_Theory.monoid
  fixes M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "Group_Theory.monoid M (\<cdot>) \<one>"
locale Group_Theory.group
  fixes G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "Group_Theory.group G (\<cdot>) \<one>"
Proofs for inductive predicate(s) "generatep"
  Proving monotonicity ...
locale abelian_group
  fixes G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "abelian_group G (\<cdot>) \<one>"
### theory "Draft.Group_Extras"
### 0.423s elapsed time, 0.885s cpu time, 0.096s GC time
locale ring_congruence
  fixes R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and E :: "('a * 'a) set"
  assumes "ring_congruence R (+) (\<cdot>) \<zero> \<one> E"
locale subgroup_of_additive_group_of_ring
  fixes I :: "'a set"
    and R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes
    "subgroup_of_additive_group_of_ring I R (+) (\<cdot>) \<zero> \<one>"
locale ideal
  fixes I :: "'a set"
    and R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "ideal I R (+) (\<cdot>) \<zero> \<one>"
locale subgroup_of_additive_group_of_ring
  fixes I :: "'a set"
    and R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes
    "subgroup_of_additive_group_of_ring I R (+) (\<cdot>) \<zero> \<one>"
locale ideal
  fixes I :: "'a set"
    and R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "ideal I R (+) (\<cdot>) \<zero> \<one>"
locale Ring_Theory.ring
  fixes R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "ring R (+) (\<cdot>) \<zero> \<one>"
locale quotient_ring
  fixes I :: "'a set"
    and R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "quotient_ring I R (+) (\<cdot>) \<zero> \<one>"
locale ring_homomorphism
  fixes \<eta> :: "'a => 'b"
    and R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and R' :: "'b set"
    and addition' :: "'b => 'b => 'b"  (infixl \<open>+''\<close> 65)
    and
    multiplication' :: "'b => 'b => 'b"
      (infixl \<open>\<cdot>''\<close> 70)
    and zero' :: "'b"  (\<open>\<zero>''\<close>)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "ring_homomorphism \<eta> R (+) (\<cdot>) \<zero> \<one> R' (+')
      (\<cdot>') \<zero>' \<one>'"
locale ring_epimorphism
  fixes \<eta> :: "'a => 'b"
    and R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and R' :: "'b set"
    and addition' :: "'b => 'b => 'b"  (infixl \<open>+''\<close> 65)
    and
    multiplication' :: "'b => 'b => 'b"
      (infixl \<open>\<cdot>''\<close> 70)
    and zero' :: "'b"  (\<open>\<zero>''\<close>)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "ring_epimorphism \<eta> R (+) (\<cdot>) \<zero> \<one> R' (+')
      (\<cdot>') \<zero>' \<one>'"
locale ring_homomorphism
  fixes \<eta> :: "'a => 'b"
    and R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and R' :: "'b set"
    and addition' :: "'b => 'b => 'b"  (infixl \<open>+''\<close> 65)
    and
    multiplication' :: "'b => 'b => 'b"
      (infixl \<open>\<cdot>''\<close> 70)
    and zero' :: "'b"  (\<open>\<zero>''\<close>)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "ring_homomorphism \<eta> R (+) (\<cdot>) \<zero> \<one> R' (+')
      (\<cdot>') \<zero>' \<one>'"
locale ring_monomorphism
  fixes \<eta> :: "'a => 'b"
    and R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and R' :: "'b set"
    and addition' :: "'b => 'b => 'b"  (infixl \<open>+''\<close> 65)
    and
    multiplication' :: "'b => 'b => 'b"
      (infixl \<open>\<cdot>''\<close> 70)
    and zero' :: "'b"  (\<open>\<zero>''\<close>)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "ring_monomorphism \<eta> R (+) (\<cdot>) \<zero> \<one> R' (+')
      (\<cdot>') \<zero>' \<one>'"
locale ring_homomorphism
  fixes \<eta> :: "'a => 'b"
    and R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and R' :: "'b set"
    and addition' :: "'b => 'b => 'b"  (infixl \<open>+''\<close> 65)
    and
    multiplication' :: "'b => 'b => 'b"
      (infixl \<open>\<cdot>''\<close> 70)
    and zero' :: "'b"  (\<open>\<zero>''\<close>)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "ring_homomorphism \<eta> R (+) (\<cdot>) \<zero> \<one> R' (+')
      (\<cdot>') \<zero>' \<one>'"
locale ideal_in_kernel
  fixes \<eta> :: "'a => 'b"
    and R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and R' :: "'b set"
    and addition' :: "'b => 'b => 'b"  (infixl \<open>+''\<close> 65)
    and
    multiplication' :: "'b => 'b => 'b"
      (infixl \<open>\<cdot>''\<close> 70)
    and zero' :: "'b"  (\<open>\<zero>''\<close>)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
    and I :: "'a set"
  assumes
    "ideal_in_kernel \<eta> R (+) (\<cdot>) \<zero> \<one> R' (+')
      (\<cdot>') \<zero>' \<one>' I"
locale ring_homomorphism_fundamental
  fixes \<eta> :: "'a => 'b"
    and R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and R' :: "'b set"
    and addition' :: "'b => 'b => 'b"  (infixl \<open>+''\<close> 65)
    and
    multiplication' :: "'b => 'b => 'b"
      (infixl \<open>\<cdot>''\<close> 70)
    and zero' :: "'b"  (\<open>\<zero>''\<close>)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "ring_homomorphism_fundamental \<eta> R (+) (\<cdot>) \<zero> \<one> R'
      (+') (\<cdot>') \<zero>' \<one>'"
locale ring_isomorphism
  fixes \<eta> :: "'a => 'b"
    and R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and R' :: "'b set"
    and addition' :: "'b => 'b => 'b"  (infixl \<open>+''\<close> 65)
    and
    multiplication' :: "'b => 'b => 'b"
      (infixl \<open>\<cdot>''\<close> 70)
    and zero' :: "'b"  (\<open>\<zero>''\<close>)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "ring_isomorphism \<eta> R (+) (\<cdot>) \<zero> \<one> R' (+')
      (\<cdot>') \<zero>' \<one>'"
locale ring_homomorphism
  fixes \<eta> :: "'a => 'b"
    and R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and R' :: "'b set"
    and addition' :: "'b => 'b => 'b"  (infixl \<open>+''\<close> 65)
    and
    multiplication' :: "'b => 'b => 'b"
      (infixl \<open>\<cdot>''\<close> 70)
    and zero' :: "'b"  (\<open>\<zero>''\<close>)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "ring_homomorphism \<eta> R (+) (\<cdot>) \<zero> \<one> R' (+')
      (\<cdot>') \<zero>' \<one>'"
### theory "Jacobson_Basic_Algebra.Ring_Theory"
### 14.599s elapsed time, 17.931s cpu time, 4.119s GC time
Loading theory "Draft.Comm_Ring" (required by "Draft.Comm_RingMoreTemplates")
locale Comm_Ring.comm_ring
  fixes R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "comm_ring R (+) (\<cdot>) \<zero> \<one>"
locale entire_ring
  fixes R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "entire_ring R (+) (\<cdot>) \<zero> \<one>"
locale Comm_Ring.comm_ring
  fixes R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "comm_ring R (+) (\<cdot>) \<zero> \<one>"
locale pr_ideal
  fixes R :: "'a set"
    and I :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "pr_ideal R I (+) (\<cdot>) \<zero> \<one>"
locale Comm_Ring.comm_ring
  fixes R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "comm_ring R (+) (\<cdot>) \<zero> \<one>"
### Ambiguous input (line 493 of "$AFP/Grothendieck_Schemes/Comm_Ring.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" is_zariski_open) ("_position" U))
###   ("_applC" ("_position" generated_topology)
###     ("_cargs" ("\<^const>local.spectrum")
###       ("_cargs"
###         ("_Coll" ("_position" U)
###           ("\<^const>HOL.Ex_binder" ("_position" \<aa>)
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" ideal)
###                 ("_cargs" ("_position" \<aa>)
###                   ("_cargs" ("_position" R)
###                     ("_cargs" ("\<^fixed>addition")
###                       ("_cargs" ("\<^fixed>multiplication")
###                         ("_cargs" ("\<^fixed>zero") ("\<^fixed>unit")))))))
###               ("\<^const>HOL.eq" ("_position" U)
###                 ("\<^const>local.subtraction" ("\<^const>local.spectrum")
###                   ("\<^const>local.closed_subsets" ("_position" \<aa>)))))))
###         ("_position" U)))))
### ("\<^const>Pure.eq" ("_applC" ("_position" is_zariski_open) ("_position" U))
###   ("_applC" ("_position" generated_topology)
###     ("_cargs" ("\<^const>local.spectrum")
###       ("_cargs"
###         ("_Coll" ("_position" U)
###           ("\<^const>HOL.Ex_binder" ("_position" \<aa>)
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" ideal)
###                 ("_cargs" ("_position" \<aa>)
###                   ("_cargs" ("_position" R)
###                     ("_cargs" ("\<^fixed>addition")
###                       ("_cargs" ("\<^fixed>multiplication")
###                         ("_cargs" ("\<^fixed>zero") ("\<^fixed>unit")))))))
###               ("\<^const>HOL.eq" ("_position" U)
###                 ("\<^const>Groups.minus_class.minus"
###                   ("\<^const>local.spectrum")
###                   ("\<^const>local.closed_subsets" ("_position" \<aa>)))))))
###         ("_position" U)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale presheaf_of_rings
  fixes S :: "'a set"
    and is_open :: "'a set => bool"
    and \<FF> :: "'a set => 'b set"
    and \<rho> :: "'a set => 'a set => 'b => 'b"
    and b :: "'b"
    and
    add_str :: "'a set => 'b => 'b => 'b"
      (\<open>+\<^bsub>_\<^esub>\<close>)
    and
    mult_str :: "'a set => 'b => 'b => 'b"
      (\<open>\<cdot>\<^bsub>_\<^esub>\<close>)
    and
    zero_str :: "'a set => 'b"  (\<open>\<zero>\<^bsub>_\<^esub>\<close>)
    and one_str :: "'a set => 'b"  (\<open>\<one>\<^bsub>_\<^esub>\<close>)
  assumes
    "presheaf_of_rings S is_open \<FF> \<rho> b add_str mult_str zero_str
      one_str"
locale morphism_presheaves_of_rings
  fixes X :: "'a set"
    and is_open :: "'a set => bool"
    and \<FF> :: "'a set => 'b set"
    and \<rho> :: "'a set => 'a set => 'b => 'b"
    and b :: "'b"
    and
    add_str :: "'a set => 'b => 'b => 'b"
      (\<open>+\<^bsub>_\<^esub>\<close>)
    and
    mult_str :: "'a set => 'b => 'b => 'b"
      (\<open>\<cdot>\<^bsub>_\<^esub>\<close>)
    and
    zero_str :: "'a set => 'b"  (\<open>\<zero>\<^bsub>_\<^esub>\<close>)
    and one_str :: "'a set => 'b"  (\<open>\<one>\<^bsub>_\<^esub>\<close>)
    and \<FF>' :: "'a set => 'c set"
    and \<rho>' :: "'a set => 'a set => 'c => 'c"
    and b' :: "'c"
    and
    add_str' :: "'a set => 'c => 'c => 'c"
      (\<open>+''\<^bsub>_\<^esub>\<close>)
    and
    mult_str' :: "'a set => 'c => 'c => 'c"
      (\<open>\<cdot>''\<^bsub>_\<^esub>\<close>)
    and
    zero_str' :: "'a set => 'c"  (\<open>\<zero>''\<^bsub>_\<^esub>\<close>)
    and
    one_str' :: "'a set => 'c"  (\<open>\<one>''\<^bsub>_\<^esub>\<close>)
    and fam_morphisms :: "'a set => 'b => 'c"
  assumes
    "morphism_presheaves_of_rings X is_open \<FF> \<rho> b add_str mult_str
      zero_str one_str \<FF>' \<rho>' b' add_str' mult_str' zero_str'
      one_str' fam_morphisms"
locale iso_presheaves_of_rings
  fixes X :: "'a set"
    and is_open :: "'a set => bool"
    and \<FF> :: "'a set => 'b set"
    and \<rho> :: "'a set => 'a set => 'b => 'b"
    and b :: "'b"
    and
    add_str :: "'a set => 'b => 'b => 'b"
      (\<open>+\<^bsub>_\<^esub>\<close>)
    and
    mult_str :: "'a set => 'b => 'b => 'b"
      (\<open>\<cdot>\<^bsub>_\<^esub>\<close>)
    and
    zero_str :: "'a set => 'b"  (\<open>\<zero>\<^bsub>_\<^esub>\<close>)
    and one_str :: "'a set => 'b"  (\<open>\<one>\<^bsub>_\<^esub>\<close>)
    and \<FF>' :: "'a set => 'c set"
    and \<rho>' :: "'a set => 'a set => 'c => 'c"
    and b' :: "'c"
    and
    add_str' :: "'a set => 'c => 'c => 'c"
      (\<open>+''\<^bsub>_\<^esub>\<close>)
    and
    mult_str' :: "'a set => 'c => 'c => 'c"
      (\<open>\<cdot>''\<^bsub>_\<^esub>\<close>)
    and
    zero_str' :: "'a set => 'c"  (\<open>\<zero>''\<^bsub>_\<^esub>\<close>)
    and
    one_str' :: "'a set => 'c"  (\<open>\<one>''\<^bsub>_\<^esub>\<close>)
    and fam_morphisms :: "'a set => 'b => 'c"
  assumes
    "iso_presheaves_of_rings X is_open \<FF> \<rho> b add_str mult_str
      zero_str one_str \<FF>' \<rho>' b' add_str' mult_str' zero_str'
      one_str' fam_morphisms"
locale sheaf_of_rings
  fixes S :: "'a set"
    and is_open :: "'a set => bool"
    and \<FF> :: "'a set => 'b set"
    and \<rho> :: "'a set => 'a set => 'b => 'b"
    and b :: "'b"
    and
    add_str :: "'a set => 'b => 'b => 'b"
      (\<open>+\<^bsub>_\<^esub>\<close>)
    and
    mult_str :: "'a set => 'b => 'b => 'b"
      (\<open>\<cdot>\<^bsub>_\<^esub>\<close>)
    and
    zero_str :: "'a set => 'b"  (\<open>\<zero>\<^bsub>_\<^esub>\<close>)
    and one_str :: "'a set => 'b"  (\<open>\<one>\<^bsub>_\<^esub>\<close>)
  assumes
    "sheaf_of_rings S is_open \<FF> \<rho> b add_str mult_str zero_str
      one_str"
locale morphism_sheaves_of_rings
  fixes X :: "'a set"
    and is_open :: "'a set => bool"
    and \<FF> :: "'a set => 'b set"
    and \<rho> :: "'a set => 'a set => 'b => 'b"
    and b :: "'b"
    and
    add_str :: "'a set => 'b => 'b => 'b"
      (\<open>+\<^bsub>_\<^esub>\<close>)
    and
    mult_str :: "'a set => 'b => 'b => 'b"
      (\<open>\<cdot>\<^bsub>_\<^esub>\<close>)
    and
    zero_str :: "'a set => 'b"  (\<open>\<zero>\<^bsub>_\<^esub>\<close>)
    and one_str :: "'a set => 'b"  (\<open>\<one>\<^bsub>_\<^esub>\<close>)
    and \<FF>' :: "'a set => 'c set"
    and \<rho>' :: "'a set => 'a set => 'c => 'c"
    and b' :: "'c"
    and
    add_str' :: "'a set => 'c => 'c => 'c"
      (\<open>+''\<^bsub>_\<^esub>\<close>)
    and
    mult_str' :: "'a set => 'c => 'c => 'c"
      (\<open>\<cdot>''\<^bsub>_\<^esub>\<close>)
    and
    zero_str' :: "'a set => 'c"  (\<open>\<zero>''\<^bsub>_\<^esub>\<close>)
    and
    one_str' :: "'a set => 'c"  (\<open>\<one>''\<^bsub>_\<^esub>\<close>)
    and fam_morphisms :: "'a set => 'b => 'c"
  assumes
    "morphism_sheaves_of_rings X is_open \<FF> \<rho> b add_str mult_str
      zero_str one_str \<FF>' \<rho>' b' add_str' mult_str' zero_str'
      one_str' fam_morphisms"
locale iso_sheaves_of_rings
  fixes X :: "'a set"
    and is_open :: "'a set => bool"
    and \<FF> :: "'a set => 'b set"
    and \<rho> :: "'a set => 'a set => 'b => 'b"
    and b :: "'b"
    and
    add_str :: "'a set => 'b => 'b => 'b"
      (\<open>+\<^bsub>_\<^esub>\<close>)
    and
    mult_str :: "'a set => 'b => 'b => 'b"
      (\<open>\<cdot>\<^bsub>_\<^esub>\<close>)
    and
    zero_str :: "'a set => 'b"  (\<open>\<zero>\<^bsub>_\<^esub>\<close>)
    and one_str :: "'a set => 'b"  (\<open>\<one>\<^bsub>_\<^esub>\<close>)
    and \<FF>' :: "'a set => 'c set"
    and \<rho>' :: "'a set => 'a set => 'c => 'c"
    and b' :: "'c"
    and
    add_str' :: "'a set => 'c => 'c => 'c"
      (\<open>+''\<^bsub>_\<^esub>\<close>)
    and
    mult_str' :: "'a set => 'c => 'c => 'c"
      (\<open>\<cdot>''\<^bsub>_\<^esub>\<close>)
    and
    zero_str' :: "'a set => 'c"  (\<open>\<zero>''\<^bsub>_\<^esub>\<close>)
    and
    one_str' :: "'a set => 'c"  (\<open>\<one>''\<^bsub>_\<^esub>\<close>)
    and fam_morphisms :: "'a set => 'b => 'c"
  assumes
    "iso_sheaves_of_rings X is_open \<FF> \<rho> b add_str mult_str zero_str
      one_str \<FF>' \<rho>' b' add_str' mult_str' zero_str' one_str'
      fam_morphisms"
locale ind_sheaf
  fixes S :: "'a set"
    and is_open :: "'a set => bool"
    and \<FF> :: "'a set => 'b set"
    and \<rho> :: "'a set => 'a set => 'b => 'b"
    and b :: "'b"
    and
    add_str :: "'a set => 'b => 'b => 'b"
      (\<open>+\<^bsub>_\<^esub>\<close>)
    and
    mult_str :: "'a set => 'b => 'b => 'b"
      (\<open>\<cdot>\<^bsub>_\<^esub>\<close>)
    and
    zero_str :: "'a set => 'b"  (\<open>\<zero>\<^bsub>_\<^esub>\<close>)
    and one_str :: "'a set => 'b"  (\<open>\<one>\<^bsub>_\<^esub>\<close>)
    and U :: "'a set"
  assumes
    "ind_sheaf S is_open \<FF> \<rho> b add_str mult_str zero_str one_str U"
locale im_sheaf
  fixes S :: "'a set"
    and is_open :: "'a set => bool"
    and \<FF> :: "'a set => 'b set"
    and \<rho> :: "'a set => 'a set => 'b => 'b"
    and b :: "'b"
    and
    add_str :: "'a set => 'b => 'b => 'b"
      (\<open>+\<^bsub>_\<^esub>\<close>)
    and
    mult_str :: "'a set => 'b => 'b => 'b"
      (\<open>\<cdot>\<^bsub>_\<^esub>\<close>)
    and
    zero_str :: "'a set => 'b"  (\<open>\<zero>\<^bsub>_\<^esub>\<close>)
    and one_str :: "'a set => 'b"  (\<open>\<one>\<^bsub>_\<^esub>\<close>)
    and S' :: "'c set"
    and is_open' :: "'c set => bool"
    and f :: "'a => 'c"
  assumes
    "im_sheaf S is_open \<FF> \<rho> b add_str mult_str zero_str one_str S'
      is_open' f"
locale Group_Theory.group
  fixes G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "Group_Theory.group G (\<cdot>) \<one>"
locale Ring_Theory.ring
  fixes R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "ring R (+) (\<cdot>) \<zero> \<one>"
### Ambiguous input (line 941 of "$AFP/Grothendieck_Schemes/Comm_Ring.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a) ("_position" R)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" b) ("_position" R)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" c) ("_position" R))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>multiplication" ("_position" a)
###         ("\<^const>local.subtraction" ("_position" b) ("_position" c)))
###       ("\<^const>Groups.minus_class.minus"
###         ("\<^fixed>multiplication" ("_position" a) ("_position" b))
###         ("\<^fixed>multiplication" ("_position" a) ("_position" c))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a) ("_position" R)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" b) ("_position" R)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" c) ("_position" R))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>multiplication" ("_position" a)
###         ("\<^const>Groups.minus_class.minus" ("_position" b)
###           ("_position" c)))
###       ("\<^const>Groups.minus_class.minus"
###         ("\<^fixed>multiplication" ("_position" a) ("_position" b))
###         ("\<^fixed>multiplication" ("_position" a) ("_position" c))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a) ("_position" R)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" b) ("_position" R)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" c) ("_position" R))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>multiplication" ("_position" a)
###         ("\<^const>local.subtraction" ("_position" b) ("_position" c)))
###       ("\<^const>local.subtraction"
###         ("\<^fixed>multiplication" ("_position" a) ("_position" b))
###         ("\<^fixed>multiplication" ("_position" a) ("_position" c))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a) ("_position" R)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" b) ("_position" R)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" c) ("_position" R))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>multiplication" ("_position" a)
###         ("\<^const>Groups.minus_class.minus" ("_position" b)
###           ("_position" c)))
###       ("\<^const>local.subtraction"
###         ("\<^fixed>multiplication" ("_position" a) ("_position" b))
###         ("\<^fixed>multiplication" ("_position" a) ("_position" c))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 942 of "$AFP/Grothendieck_Schemes/Comm_Ring.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a) ("_position" R)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" b) ("_position" R)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" c) ("_position" R))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>multiplication"
###         ("\<^const>local.subtraction" ("_position" b) ("_position" c))
###         ("_position" a))
###       ("\<^const>Groups.minus_class.minus"
###         ("\<^fixed>multiplication" ("_position" b) ("_position" a))
###         ("\<^fixed>multiplication" ("_position" c) ("_position" a))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a) ("_position" R)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" b) ("_position" R)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" c) ("_position" R))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>multiplication"
###         ("\<^const>Groups.minus_class.minus" ("_position" b)
###           ("_position" c))
###         ("_position" a))
###       ("\<^const>Groups.minus_class.minus"
###         ("\<^fixed>multiplication" ("_position" b) ("_position" a))
###         ("\<^fixed>multiplication" ("_position" c) ("_position" a))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a) ("_position" R)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" b) ("_position" R)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" c) ("_position" R))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>multiplication"
###         ("\<^const>local.subtraction" ("_position" b) ("_position" c))
###         ("_position" a))
###       ("\<^const>local.subtraction"
###         ("\<^fixed>multiplication" ("_position" b) ("_position" a))
###         ("\<^fixed>multiplication" ("_position" c) ("_position" a))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a) ("_position" R)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" b) ("_position" R)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" c) ("_position" R))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>multiplication"
###         ("\<^const>Groups.minus_class.minus" ("_position" b)
###           ("_position" c))
###         ("_position" a))
###       ("\<^const>local.subtraction"
###         ("\<^fixed>multiplication" ("_position" b) ("_position" a))
###         ("\<^fixed>multiplication" ("_position" c) ("_position" a))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale Comm_Ring.quotient_ring
  fixes S :: "'a set"
    and R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "Comm_Ring.quotient_ring S R (+) (\<cdot>) \<zero> \<one>"
### Ambiguous input (line 961 of "$AFP/Grothendieck_Schemes/Comm_Ring.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>rel" ("_position" x) ("_position" y))
###   ("\<^const>HOL.Ex_binder" ("_position" s1)
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member" ("_position" s1) ("_position" S))
###       ("\<^const>HOL.eq"
###         ("\<^fixed>multiplication" ("_position" s1)
###           ("\<^const>local.comm.subtraction"
###             ("\<^fixed>multiplication"
###               ("_applC" ("_position" snd) ("_position" y))
###               ("_applC" ("_position" fst) ("_position" x)))
###             ("\<^fixed>multiplication"
###               ("_applC" ("_position" snd) ("_position" x))
###               ("_applC" ("_position" fst) ("_position" y)))))
###         ("\<^fixed>zero")))))
### ("\<^const>Pure.eq" ("\<^fixed>rel" ("_position" x) ("_position" y))
###   ("\<^const>HOL.Ex_binder" ("_position" s1)
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member" ("_position" s1) ("_position" S))
###       ("\<^const>HOL.eq"
###         ("\<^fixed>multiplication" ("_position" s1)
###           ("\<^const>Groups.minus_class.minus"
###             ("\<^fixed>multiplication"
###               ("_applC" ("_position" snd) ("_position" y))
###               ("_applC" ("_position" fst) ("_position" x)))
###             ("\<^fixed>multiplication"
###               ("_applC" ("_position" snd) ("_position" x))
###               ("_applC" ("_position" fst) ("_position" y)))))
###         ("\<^fixed>zero")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1018 of "$AFP/Grothendieck_Schemes/Comm_Ring.thy") produces 3 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^const>Fields.inverse_class.inverse_divide" ("_position" r)
###     ("_position" s))
###   ("_applC" ("_position" rel.Class)
###     ("_tuple" ("_position" r) ("_tuple_arg" ("_position" s)))))
### ("\<^const>Pure.eq" ("\<^fixed>frac" ("_position" r) ("_position" s))
###   ("_applC" ("_position" rel.Class)
###     ("_tuple" ("_position" r) ("_tuple_arg" ("_position" s)))))
### ("\<^const>Pure.eq"
###   ("\<^const>Set_Theory.equivalence.Partition" ("_position" r)
###     ("_position" s))
###   ("_applC" ("_position" rel.Class)
###     ("_tuple" ("_position" r) ("_tuple_arg" ("_position" s)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1039 of "$AFP/Grothendieck_Schemes/Comm_Ring.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>multiplication" ("_position" s1)
###       ("\<^const>local.comm.subtraction"
###         ("\<^fixed>multiplication" ("_position" s') ("_position" r))
###         ("\<^fixed>multiplication" ("_position" s) ("_position" r'))))
###     ("\<^fixed>zero")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>multiplication" ("_position" s1)
###       ("\<^const>Groups.minus_class.minus"
###         ("\<^fixed>multiplication" ("_position" s') ("_position" r))
###         ("\<^fixed>multiplication" ("_position" s) ("_position" r'))))
###     ("\<^fixed>zero")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1074 of "$AFP/Grothendieck_Schemes/Comm_Ring.thy") produces 3 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" valid_frac) ("_position" X))
###   ("_Bex" ("_position" r) ("_position" R)
###     ("_Bex" ("_position" s) ("_position" S)
###       ("\<^const>HOL.eq"
###         ("\<^const>Set_Theory.equivalence.Partition" ("_position" r)
###           ("_position" s))
###         ("_position" X)))))
### ("\<^const>Pure.eq" ("_applC" ("_position" valid_frac) ("_position" X))
###   ("_Bex" ("_position" r) ("_position" R)
###     ("_Bex" ("_position" s) ("_position" S)
###       ("\<^const>HOL.eq"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" r)
###           ("_position" s))
###         ("_position" X)))))
### ("\<^const>Pure.eq" ("_applC" ("_position" valid_frac) ("_position" X))
###   ("_Bex" ("_position" r) ("_position" R)
###     ("_Bex" ("_position" s) ("_position" S)
###       ("\<^const>HOL.eq"
###         ("\<^const>local.frac" ("_position" r) ("_position" s))
###         ("_position" X)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1080 of "$AFP/Grothendieck_Schemes/Comm_Ring.thy") produces 3 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" add_rel_aux)
###     ("_cargs" ("_position" r)
###       ("_cargs" ("_position" s)
###         ("_cargs" ("_position" r') ("_position" s')))))
###   ("\<^const>Fields.inverse_class.inverse_divide"
###     ("\<^fixed>addition"
###       ("\<^fixed>multiplication" ("_position" r) ("_position" s'))
###       ("\<^fixed>multiplication" ("_position" r') ("_position" s)))
###     ("\<^fixed>multiplication" ("_position" s) ("_position" s'))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" add_rel_aux)
###     ("_cargs" ("_position" r)
###       ("_cargs" ("_position" s)
###         ("_cargs" ("_position" r') ("_position" s')))))
###   ("\<^const>local.frac"
###     ("\<^fixed>addition"
###       ("\<^fixed>multiplication" ("_position" r) ("_position" s'))
###       ("\<^fixed>multiplication" ("_position" r') ("_position" s)))
###     ("\<^fixed>multiplication" ("_position" s) ("_position" s'))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" add_rel_aux)
###     ("_cargs" ("_position" r)
###       ("_cargs" ("_position" s)
###         ("_cargs" ("_position" r') ("_position" s')))))
###   ("\<^const>Set_Theory.equivalence.Partition"
###     ("\<^fixed>addition"
###       ("\<^fixed>multiplication" ("_position" r) ("_position" s'))
###       ("\<^fixed>multiplication" ("_position" r') ("_position" s)))
###     ("\<^fixed>multiplication" ("_position" s) ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1090 of "$AFP/Grothendieck_Schemes/Comm_Ring.thy") produces 27 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" add_rel)
###       ("_cargs"
###         ("\<^const>Set_Theory.equivalence.Partition" ("_position" r)
###           ("_position" s))
###         ("\<^const>local.frac" ("_position" r') ("_position" s'))))
###     ("\<^const>Fields.inverse_class.inverse_divide"
###       ("\<^fixed>addition"
###         ("\<^fixed>multiplication" ("_position" r) ("_position" s'))
###         ("\<^fixed>multiplication" ("_position" r') ("_position" s)))
###       ("\<^fixed>multiplication" ("_position" s) ("_position" s')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" add_rel)
###       ("_cargs"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" r)
###           ("_position" s))
###         ("\<^const>local.frac" ("_position" r') ("_position" s'))))
###     ("\<^const>Fields.inverse_class.inverse_divide"
###       ("\<^fixed>addition"
###         ("\<^fixed>multiplication" ("_position" r) ("_position" s'))
###         ("\<^fixed>multiplication" ("_position" r') ("_position" s)))
###       ("\<^fixed>multiplication" ("_position" s) ("_position" s')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" add_rel)
###       ("_cargs" ("\<^const>local.frac" ("_position" r) ("_position" s))
###         ("\<^const>local.frac" ("_position" r') ("_position" s'))))
###     ("\<^const>Fields.inverse_class.inverse_divide"
###       ("\<^fixed>addition"
###         ("\<^fixed>multiplication" ("_position" r) ("_position" s'))
###         ("\<^fixed>multiplication" ("_position" r') ("_position" s)))
###       ("\<^fixed>multiplication" ("_position" s) ("_position" s')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" add_rel)
###       ("_cargs"
###         ("\<^const>Set_Theory.equivalence.Partition" ("_position" r)
###           ("_position" s))
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" r')
###           ("_position" s'))))
###     ("\<^const>Fields.inverse_class.inverse_divide"
###       ("\<^fixed>addition"
###         ("\<^fixed>multiplication" ("_position" r) ("_position" s'))
###         ("\<^fixed>multiplication" ("_position" r') ("_position" s)))
###       ("\<^fixed>multiplication" ("_position" s) ("_position" s')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" add_rel)
###       ("_cargs"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" r)
###           ("_position" s))
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" r')
###           ("_position" s'))))
###     ("\<^const>Fields.inverse_class.inverse_divide"
###       ("\<^fixed>addition"
###         ("\<^fixed>multiplication" ("_position" r) ("_position" s'))
###         ("\<^fixed>multiplication" ("_position" r') ("_position" s)))
###       ("\<^fixed>multiplication" ("_position" s) ("_position" s')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" add_rel)
###       ("_cargs" ("\<^const>local.frac" ("_position" r) ("_position" s))
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" r')
###           ("_position" s'))))
###     ("\<^const>Fields.inverse_class.inverse_divide"
###       ("\<^fixed>addition"
###         ("\<^fixed>multiplication" ("_position" r) ("_position" s'))
###         ("\<^fixed>multiplication" ("_position" r') ("_position" s)))
###       ("\<^fixed>multiplication" ("_position" s) ("_position" s')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" add_rel)
###       ("_cargs"
###         ("\<^const>Set_Theory.equivalence.Partition" ("_position" r)
###           ("_position" s))
###         ("\<^const>Set_Theory.equivalence.Partition" ("_position" r')
###           ("_position" s'))))
###     ("\<^const>Fields.inverse_class.inverse_divide"
###       ("\<^fixed>addition"
###         ("\<^fixed>multiplication" ("_position" r) ("_position" s'))
###         ("\<^fixed>multiplication" ("_position" r') ("_position" s)))
###       ("\<^fixed>multiplication" ("_position" s) ("_position" s')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" add_rel)
###       ("_cargs"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" r)
###           ("_position" s))
###         ("\<^const>Set_Theory.equivalence.Partition" ("_position" r')
###           ("_position" s'))))
###     ("\<^const>Fields.inverse_class.inverse_divide"
###       ("\<^fixed>addition"
###         ("\<^fixed>multiplication" ("_position" r) ("_position" s'))
###         ("\<^fixed>multiplication" ("_position" r') ("_position" s)))
###       ("\<^fixed>multiplication" ("_position" s) ("_position" s')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" add_rel)
###       ("_cargs" ("\<^const>local.frac" ("_position" r) ("_position" s))
###         ("\<^const>Set_Theory.equivalence.Partition" ("_position" r')
###           ("_position" s'))))
###     ("\<^const>Fields.inverse_class.inverse_divide"
###       ("\<^fixed>addition"
###         ("\<^fixed>multiplication" ("_position" r) ("_position" s'))
###         ("\<^fixed>multiplication" ("_position" r') ("_position" s)))
###       ("\<^fixed>multiplication" ("_position" s) ("_position" s')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" add_rel)
###       ("_cargs"
###         ("\<^const>Set_Theory.equivalence.Partition" ("_position" r)
###           ("_position" s))
###         ("\<^const>local.frac" ("_position" r') ("_position" s'))))
###     ("\<^const>local.frac"
###       ("\<^fixed>addition"
###         ("\<^fixed>multiplication" ("_position" r) ("_position" s'))
###         ("\<^fixed>multiplication" ("_position" r') ("_position" s)))
###       ("\<^fixed>multiplication" ("_position" s) ("_position" s')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1150 of "$AFP/Grothendieck_Schemes/Comm_Ring.thy") produces 3 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" uminus_rel) ("_position" X))
###   ("_Let"
###     ("_bind" ("_position" x)
###       ("_Eps" ("_position" x)
###         ("\<^const>Set.member" ("_position" x) ("_position" X))))
###     ("\<^const>local.frac"
###       ("_applC" ("_position" comm.additive.inverse)
###         ("_applC" ("_position" fst) ("_position" x)))
###       ("_applC" ("_position" snd) ("_position" x)))))
### ("\<^const>Pure.eq" ("_applC" ("_position" uminus_rel) ("_position" X))
###   ("_Let"
###     ("_bind" ("_position" x)
###       ("_Eps" ("_position" x)
###         ("\<^const>Set.member" ("_position" x) ("_position" X))))
###     ("\<^const>Fields.inverse_class.inverse_divide"
###       ("_applC" ("_position" comm.additive.inverse)
###         ("_applC" ("_position" fst) ("_position" x)))
###       ("_applC" ("_position" snd) ("_position" x)))))
### ("\<^const>Pure.eq" ("_applC" ("_position" uminus_rel) ("_position" X))
###   ("_Let"
###     ("_bind" ("_position" x)
###       ("_Eps" ("_position" x)
###         ("\<^const>Set.member" ("_position" x) ("_position" X))))
###     ("\<^const>Set_Theory.equivalence.Partition"
###       ("_applC" ("_position" comm.additive.inverse)
###         ("_applC" ("_position" fst) ("_position" x)))
###       ("_applC" ("_position" snd) ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1154 of "$AFP/Grothendieck_Schemes/Comm_Ring.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" uminus_rel)
###       ("\<^const>local.frac" ("_position" r) ("_position" s)))
###     ("\<^const>Fields.inverse_class.inverse_divide"
###       ("_applC" ("_position" comm.additive.inverse) ("_position" r))
###       ("_position" s))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" uminus_rel)
###       ("\<^const>Fields.inverse_class.inverse_divide" ("_position" r)
###         ("_position" s)))
###     ("\<^const>Fields.inverse_class.inverse_divide"
###       ("_applC" ("_position" comm.additive.inverse) ("_position" r))
###       ("_position" s))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" uminus_rel)
###       ("\<^const>Set_Theory.equivalence.Partition" ("_position" r)
###         ("_position" s)))
###     ("\<^const>Fields.inverse_class.inverse_divide"
###       ("_applC" ("_position" comm.additive.inverse) ("_position" r))
###       ("_position" s))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" uminus_rel)
###       ("\<^const>local.frac" ("_position" r) ("_position" s)))
###     ("\<^const>local.frac"
###       ("_applC" ("_position" comm.additive.inverse) ("_position" r))
###       ("_position" s))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" uminus_rel)
###       ("\<^const>Fields.inverse_class.inverse_divide" ("_position" r)
###         ("_position" s)))
###     ("\<^const>local.frac"
###       ("_applC" ("_position" comm.additive.inverse) ("_position" r))
###       ("_position" s))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" uminus_rel)
###       ("\<^const>Set_Theory.equivalence.Partition" ("_position" r)
###         ("_position" s)))
###     ("\<^const>local.frac"
###       ("_applC" ("_position" comm.additive.inverse) ("_position" r))
###       ("_position" s))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" uminus_rel)
###       ("\<^const>local.frac" ("_position" r) ("_position" s)))
###     ("\<^const>Set_Theory.equivalence.Partition"
###       ("_applC" ("_position" comm.additive.inverse) ("_position" r))
###       ("_position" s))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" uminus_rel)
###       ("\<^const>Fields.inverse_class.inverse_divide" ("_position" r)
###         ("_position" s)))
###     ("\<^const>Set_Theory.equivalence.Partition"
###       ("_applC" ("_position" comm.additive.inverse) ("_position" r))
###       ("_position" s))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" uminus_rel)
###       ("\<^const>Set_Theory.equivalence.Partition" ("_position" r)
###         ("_position" s)))
###     ("\<^const>Set_Theory.equivalence.Partition"
###       ("_applC" ("_position" comm.additive.inverse) ("_position" r))
###       ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1193 of "$AFP/Grothendieck_Schemes/Comm_Ring.thy") produces 3 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" mult_rel_aux)
###     ("_cargs" ("_position" r)
###       ("_cargs" ("_position" s)
###         ("_cargs" ("_position" r') ("_position" s')))))
###   ("\<^const>Fields.inverse_class.inverse_divide"
###     ("\<^fixed>multiplication" ("_position" r) ("_position" r'))
###     ("\<^fixed>multiplication" ("_position" s) ("_position" s'))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" mult_rel_aux)
###     ("_cargs" ("_position" r)
###       ("_cargs" ("_position" s)
###         ("_cargs" ("_position" r') ("_position" s')))))
###   ("\<^const>local.frac"
###     ("\<^fixed>multiplication" ("_position" r) ("_position" r'))
###     ("\<^fixed>multiplication" ("_position" s) ("_position" s'))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" mult_rel_aux)
###     ("_cargs" ("_position" r)
###       ("_cargs" ("_position" s)
###         ("_cargs" ("_position" r') ("_position" s')))))
###   ("\<^const>Set_Theory.equivalence.Partition"
###     ("\<^fixed>multiplication" ("_position" r) ("_position" r'))
###     ("\<^fixed>multiplication" ("_position" s) ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1203 of "$AFP/Grothendieck_Schemes/Comm_Ring.thy") produces 27 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mult_rel)
###       ("_cargs"
###         ("\<^const>Set_Theory.equivalence.Partition" ("_position" r)
###           ("_position" s))
###         ("\<^const>local.frac" ("_position" r') ("_position" s'))))
###     ("\<^const>Fields.inverse_class.inverse_divide"
###       ("\<^fixed>multiplication" ("_position" r) ("_position" r'))
###       ("\<^fixed>multiplication" ("_position" s) ("_position" s')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mult_rel)
###       ("_cargs"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" r)
###           ("_position" s))
###         ("\<^const>local.frac" ("_position" r') ("_position" s'))))
###     ("\<^const>Fields.inverse_class.inverse_divide"
###       ("\<^fixed>multiplication" ("_position" r) ("_position" r'))
###       ("\<^fixed>multiplication" ("_position" s) ("_position" s')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mult_rel)
###       ("_cargs" ("\<^const>local.frac" ("_position" r) ("_position" s))
###         ("\<^const>local.frac" ("_position" r') ("_position" s'))))
###     ("\<^const>Fields.inverse_class.inverse_divide"
###       ("\<^fixed>multiplication" ("_position" r) ("_position" r'))
###       ("\<^fixed>multiplication" ("_position" s) ("_position" s')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mult_rel)
###       ("_cargs"
###         ("\<^const>Set_Theory.equivalence.Partition" ("_position" r)
###           ("_position" s))
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" r')
###           ("_position" s'))))
###     ("\<^const>Fields.inverse_class.inverse_divide"
###       ("\<^fixed>multiplication" ("_position" r) ("_position" r'))
###       ("\<^fixed>multiplication" ("_position" s) ("_position" s')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mult_rel)
###       ("_cargs"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" r)
###           ("_position" s))
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" r')
###           ("_position" s'))))
###     ("\<^const>Fields.inverse_class.inverse_divide"
###       ("\<^fixed>multiplication" ("_position" r) ("_position" r'))
###       ("\<^fixed>multiplication" ("_position" s) ("_position" s')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mult_rel)
###       ("_cargs" ("\<^const>local.frac" ("_position" r) ("_position" s))
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" r')
###           ("_position" s'))))
###     ("\<^const>Fields.inverse_class.inverse_divide"
###       ("\<^fixed>multiplication" ("_position" r) ("_position" r'))
###       ("\<^fixed>multiplication" ("_position" s) ("_position" s')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mult_rel)
###       ("_cargs"
###         ("\<^const>Set_Theory.equivalence.Partition" ("_position" r)
###           ("_position" s))
###         ("\<^const>Set_Theory.equivalence.Partition" ("_position" r')
###           ("_position" s'))))
###     ("\<^const>Fields.inverse_class.inverse_divide"
###       ("\<^fixed>multiplication" ("_position" r) ("_position" r'))
###       ("\<^fixed>multiplication" ("_position" s) ("_position" s')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mult_rel)
###       ("_cargs"
###         ("\<^const>Fields.inverse_class.inverse_divide" ("_position" r)
###           ("_position" s))
###         ("\<^const>Set_Theory.equivalence.Partition" ("_position" r')
###           ("_position" s'))))
###     ("\<^const>Fields.inverse_class.inverse_divide"
###       ("\<^fixed>multiplication" ("_position" r) ("_position" r'))
###       ("\<^fixed>multiplication" ("_position" s) ("_position" s')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mult_rel)
###       ("_cargs" ("\<^const>local.frac" ("_position" r) ("_position" s))
###         ("\<^const>Set_Theory.equivalence.Partition" ("_position" r')
###           ("_position" s'))))
###     ("\<^const>Fields.inverse_class.inverse_divide"
###       ("\<^fixed>multiplication" ("_position" r) ("_position" r'))
###       ("\<^fixed>multiplication" ("_position" s) ("_position" s')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" mult_rel)
###       ("_cargs"
###         ("\<^const>Set_Theory.equivalence.Partition" ("_position" r)
###           ("_position" s))
###         ("\<^const>local.frac" ("_position" r') ("_position" s'))))
###     ("\<^const>local.frac"
###       ("\<^fixed>multiplication" ("_position" r) ("_position" r'))
###       ("\<^fixed>multiplication" ("_position" s) ("_position" s')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale pr_ideal
  fixes R :: "'a set"
    and I :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "pr_ideal R I (+) (\<cdot>) \<zero> \<one>"
### Ambiguous input (line 1452 of "$AFP/Grothendieck_Schemes/Comm_Ring.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>multiplication" ("_position" h)
###       ("\<^const>local.comm.subtraction"
###         ("\<^fixed>multiplication" ("_position" s') ("_position" r))
###         ("\<^fixed>multiplication" ("_position" s) ("_position" r'))))
###     ("\<^fixed>zero")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>multiplication" ("_position" h)
###       ("\<^const>Groups.minus_class.minus"
###         ("\<^fixed>multiplication" ("_position" s') ("_position" r))
###         ("\<^fixed>multiplication" ("_position" s) ("_position" r'))))
###     ("\<^fixed>zero")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale Comm_Ring.comm_ring
  fixes R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "comm_ring R (+) (\<cdot>) \<zero> \<one>"
### Ambiguous input (line 1535 of "$AFP/Grothendieck_Schemes/Comm_Ring.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_applC" ("_position" s) ("_position" \<pp>))
###     ("\<^const>Comm_Ring.quotient_ring.carrier_quotient_ring"
###       ("\<^const>Set_Extras.complement_in_of" ("_position" R)
###         ("_position" \<pp>))
###       ("_position" R) ("\<^fixed>addition") ("\<^fixed>multiplication")
###       ("\<^fixed>zero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_applC" ("_position" s) ("_position" \<pp>))
###     ("\<^const>Set_Extras.complement_in_of" ("_position" R)
###       ("\<^const>Comm_Ring.quotient_ring.carrier_quotient_ring"
###         ("_position" \<pp>) ("_position" R) ("\<^fixed>addition")
###         ("\<^fixed>multiplication") ("\<^fixed>zero")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale ringed_space
  fixes S :: "'a set"
    and is_open :: "'a set => bool"
    and \<FF> :: "'a set => 'b set"
    and \<rho> :: "'a set => 'a set => 'b => 'b"
    and b :: "'b"
    and
    add_str :: "'a set => 'b => 'b => 'b"
      (\<open>+\<^bsub>_\<^esub>\<close>)
    and
    mult_str :: "'a set => 'b => 'b => 'b"
      (\<open>\<cdot>\<^bsub>_\<^esub>\<close>)
    and
    zero_str :: "'a set => 'b"  (\<open>\<zero>\<^bsub>_\<^esub>\<close>)
    and one_str :: "'a set => 'b"  (\<open>\<one>\<^bsub>_\<^esub>\<close>)
  assumes
    "ringed_space S is_open \<FF> \<rho> b add_str mult_str zero_str
      one_str"
locale Comm_Ring.comm_ring
  fixes R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "comm_ring R (+) (\<cdot>) \<zero> \<one>"
locale morphism_ringed_spaces
  fixes X :: "'a set"
    and is_open\<^sub>X :: "'a set => bool"
    and \<O>\<^sub>X :: "'a set => 'b set"
    and \<rho>\<^sub>X :: "'a set => 'a set => 'b => 'b"
    and b :: "'b"
    and add_str\<^sub>X :: "'a set => 'b => 'b => 'b"
    and mult_str\<^sub>X :: "'a set => 'b => 'b => 'b"
    and zero_str\<^sub>X :: "'a set => 'b"
    and one_str\<^sub>X :: "'a set => 'b"
    and Y :: "'c set"
    and is_open\<^sub>Y :: "'c set => bool"
    and \<O>\<^sub>Y :: "'c set => 'd set"
    and \<rho>\<^sub>Y :: "'c set => 'c set => 'd => 'd"
    and d :: "'d"
    and add_str\<^sub>Y :: "'c set => 'd => 'd => 'd"
    and mult_str\<^sub>Y :: "'c set => 'd => 'd => 'd"
    and zero_str\<^sub>Y :: "'c set => 'd"
    and one_str\<^sub>Y :: "'c set => 'd"
    and f :: "'a => 'c"
    and \<phi>\<^sub>f :: "'c set => 'd => 'b"
  assumes
    "morphism_ringed_spaces X is_open\<^sub>X \<O>\<^sub>X \<rho>\<^sub>X b
      add_str\<^sub>X mult_str\<^sub>X zero_str\<^sub>X one_str\<^sub>X Y
      is_open\<^sub>Y \<O>\<^sub>Y \<rho>\<^sub>Y d add_str\<^sub>Y
      mult_str\<^sub>Y zero_str\<^sub>Y one_str\<^sub>Y f \<phi>\<^sub>f"
locale direct_lim
  fixes S :: "'a set"
    and is_open :: "'a set => bool"
    and \<FF> :: "'a set => 'b set"
    and \<rho> :: "'a set => 'a set => 'b => 'b"
    and b :: "'b"
    and
    add_str :: "'a set => 'b => 'b => 'b"
      (\<open>+\<^bsub>_\<^esub>\<close>)
    and
    mult_str :: "'a set => 'b => 'b => 'b"
      (\<open>\<cdot>\<^bsub>_\<^esub>\<close>)
    and
    zero_str :: "'a set => 'b"  (\<open>\<zero>\<^bsub>_\<^esub>\<close>)
    and one_str :: "'a set => 'b"  (\<open>\<one>\<^bsub>_\<^esub>\<close>)
    and I :: "'a set set"
  assumes
    "direct_lim S is_open \<FF> \<rho> b add_str mult_str zero_str one_str
      I"
locale stalk
  fixes S :: "'a set"
    and is_open :: "'a set => bool"
    and \<FF> :: "'a set => 'b set"
    and \<rho> :: "'a set => 'a set => 'b => 'b"
    and b :: "'b"
    and
    add_str :: "'a set => 'b => 'b => 'b"
      (\<open>+\<^bsub>_\<^esub>\<close>)
    and
    mult_str :: "'a set => 'b => 'b => 'b"
      (\<open>\<cdot>\<^bsub>_\<^esub>\<close>)
    and
    zero_str :: "'a set => 'b"  (\<open>\<zero>\<^bsub>_\<^esub>\<close>)
    and one_str :: "'a set => 'b"  (\<open>\<one>\<^bsub>_\<^esub>\<close>)
    and I :: "'a set set"
    and x :: "'a"
  assumes
    "stalk S is_open \<FF> \<rho> b add_str mult_str zero_str one_str I x"
locale max_ideal
  fixes R :: "'a set"
    and I :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "max_ideal R I (+) (\<cdot>) \<zero> \<one>"
locale lideal
  fixes I :: "'a set"
    and R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "lideal I R (+) (\<cdot>) \<zero> \<one>"
locale max_lideal
  fixes I :: "'a set"
    and R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "max_lideal I R (+) (\<cdot>) \<zero> \<one>"
locale local_ring
  fixes R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "local_ring R (+) (\<cdot>) \<zero> \<one>"
locale local_ring_morphism
  fixes f :: "'a => 'b"
    and A :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and B :: "'b set"
    and addition' :: "'b => 'b => 'b"  (infixl \<open>+''\<close> 65)
    and
    multiplication' :: "'b => 'b => 'b"
      (infixl \<open>\<cdot>''\<close> 70)
    and zero' :: "'b"  (\<open>\<zero>''\<close>)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "local_ring_morphism f A (+) (\<cdot>) \<zero> \<one> B (+') (\<cdot>')
      \<zero>' \<one>'"
locale key_map
  fixes R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and \<pp> :: "'a set"
  assumes "key_map R (+) (\<cdot>) \<zero> \<one> \<pp>"
### Rewrite rule not in simpset:
### ?U1 : {U. is_zariski_open U & \<pp> : U} ==> is_zariski_open ?U1 == True
### Undeclared classical rule
### ?U : {U. is_zariski_open U & \<pp> : U} ==> is_zariski_open ?U
locale locally_ringed_space
  fixes S :: "'a set"
    and is_open :: "'a set => bool"
    and \<FF> :: "'a set => 'b set"
    and \<rho> :: "'a set => 'a set => 'b => 'b"
    and b :: "'b"
    and
    add_str :: "'a set => 'b => 'b => 'b"
      (\<open>+\<^bsub>_\<^esub>\<close>)
    and
    mult_str :: "'a set => 'b => 'b => 'b"
      (\<open>\<cdot>\<^bsub>_\<^esub>\<close>)
    and
    zero_str :: "'a set => 'b"  (\<open>\<zero>\<^bsub>_\<^esub>\<close>)
    and one_str :: "'a set => 'b"  (\<open>\<one>\<^bsub>_\<^esub>\<close>)
  assumes
    "locally_ringed_space S is_open \<FF> \<rho> b add_str mult_str zero_str
      one_str"
locale Comm_Ring.comm_ring
  fixes R :: "'a set"
    and addition :: "'a => 'a => 'a"  (infixl \<open>+\<close> 65)
    and
    multiplication :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and zero :: "'a"  (\<open>\<zero>\<close>)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "comm_ring R (+) (\<cdot>) \<zero> \<one>"
locale ind_mor_btw_stalks
  fixes X :: "'a set"
    and is_open\<^sub>X :: "'a set => bool"
    and \<O>\<^sub>X :: "'a set => 'b set"
    and \<rho>\<^sub>X :: "'a set => 'a set => 'b => 'b"
    and b :: "'b"
    and add_str\<^sub>X :: "'a set => 'b => 'b => 'b"
    and mult_str\<^sub>X :: "'a set => 'b => 'b => 'b"
    and zero_str\<^sub>X :: "'a set => 'b"
    and one_str\<^sub>X :: "'a set => 'b"
    and Y :: "'c set"
    and is_open\<^sub>Y :: "'c set => bool"
    and \<O>\<^sub>Y :: "'c set => 'd set"
    and \<rho>\<^sub>Y :: "'c set => 'c set => 'd => 'd"
    and d :: "'d"
    and add_str\<^sub>Y :: "'c set => 'd => 'd => 'd"
    and mult_str\<^sub>Y :: "'c set => 'd => 'd => 'd"
    and zero_str\<^sub>Y :: "'c set => 'd"
    and one_str\<^sub>Y :: "'c set => 'd"
    and f :: "'a => 'c"
    and \<phi>\<^sub>f :: "'c set => 'd => 'b"
    and x :: "'a"
  assumes
    "ind_mor_btw_stalks X is_open\<^sub>X \<O>\<^sub>X \<rho>\<^sub>X b
      add_str\<^sub>X mult_str\<^sub>X zero_str\<^sub>X one_str\<^sub>X Y
      is_open\<^sub>Y \<O>\<^sub>Y \<rho>\<^sub>Y d add_str\<^sub>Y
      mult_str\<^sub>Y zero_str\<^sub>Y one_str\<^sub>Y f \<phi>\<^sub>f x"
locale morphism_locally_ringed_spaces
  fixes X :: "'a set"
    and is_open\<^sub>X :: "'a set => bool"
    and \<O>\<^sub>X :: "'a set => 'b set"
    and \<rho>\<^sub>X :: "'a set => 'a set => 'b => 'b"
    and b :: "'b"
    and add_str\<^sub>X :: "'a set => 'b => 'b => 'b"
    and mult_str\<^sub>X :: "'a set => 'b => 'b => 'b"
    and zero_str\<^sub>X :: "'a set => 'b"
    and one_str\<^sub>X :: "'a set => 'b"
    and Y :: "'c set"
    and is_open\<^sub>Y :: "'c set => bool"
    and \<O>\<^sub>Y :: "'c set => 'd set"
    and \<rho>\<^sub>Y :: "'c set => 'c set => 'd => 'd"
    and d :: "'d"
    and add_str\<^sub>Y :: "'c set => 'd => 'd => 'd"
    and mult_str\<^sub>Y :: "'c set => 'd => 'd => 'd"
    and zero_str\<^sub>Y :: "'c set => 'd"
    and one_str\<^sub>Y :: "'c set => 'd"
    and f :: "'a => 'c"
    and \<phi>\<^sub>f :: "'c set => 'd => 'b"
  assumes
    "morphism_locally_ringed_spaces X is_open\<^sub>X \<O>\<^sub>X
      \<rho>\<^sub>X b add_str\<^sub>X mult_str\<^sub>X zero_str\<^sub>X
      one_str\<^sub>X Y is_open\<^sub>Y \<O>\<^sub>Y \<rho>\<^sub>Y d
      add_str\<^sub>Y mult_str\<^sub>Y zero_str\<^sub>Y one_str\<^sub>Y f
      \<phi>\<^sub>f"
locale iso_locally_ringed_spaces
  fixes X :: "'a set"
    and is_open\<^sub>X :: "'a set => bool"
    and \<O>\<^sub>X :: "'a set => 'b set"
    and \<rho>\<^sub>X :: "'a set => 'a set => 'b => 'b"
    and b :: "'b"
    and add_str\<^sub>X :: "'a set => 'b => 'b => 'b"
    and mult_str\<^sub>X :: "'a set => 'b => 'b => 'b"
    and zero_str\<^sub>X :: "'a set => 'b"
    and one_str\<^sub>X :: "'a set => 'b"
    and Y :: "'c set"
    and is_open\<^sub>Y :: "'c set => bool"
    and \<O>\<^sub>Y :: "'c set => 'd set"
    and \<rho>\<^sub>Y :: "'c set => 'c set => 'd => 'd"
    and d :: "'d"
    and add_str\<^sub>Y :: "'c set => 'd => 'd => 'd"
    and mult_str\<^sub>Y :: "'c set => 'd => 'd => 'd"
    and zero_str\<^sub>Y :: "'c set => 'd"
    and one_str\<^sub>Y :: "'c set => 'd"
    and f :: "'a => 'c"
    and \<phi>\<^sub>f :: "'c set => 'd => 'b"
  assumes
    "iso_locally_ringed_spaces X is_open\<^sub>X \<O>\<^sub>X \<rho>\<^sub>X
      b add_str\<^sub>X mult_str\<^sub>X zero_str\<^sub>X one_str\<^sub>X Y
      is_open\<^sub>Y \<O>\<^sub>Y \<rho>\<^sub>Y d add_str\<^sub>Y
      mult_str\<^sub>Y zero_str\<^sub>Y one_str\<^sub>Y f \<phi>\<^sub>f"
### theory "Draft.Comm_Ring"
### 9.430s elapsed time, 11.367s cpu time, 2.713s GC time
Loading theory "Draft.Comm_RingMoreTemplates"
val templateLemmas =
   [("Comm_Ring.id_is_local_ring_morphism",
     "local_ring ?A ?add ?mult ?zero ?one ==>
      local_ring_morphism (identity ?A) ?A ?add ?mult ?zero ?one ?A ?add
       ?mult ?zero ?one",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 1,
                                 template_app
                                  (template_app (template_hole 0, t_empty),
                                   template_var 4)),
                               template_var 4),
                             template_var 3),
                           template_var 2),
                         template_var 1),
                       template_var 0),
                     template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Comm_Ring.isomorphic_to_local_is_local",
     "[| local_ring ?B ?addB ?multB ?zeroB ?oneB;
         ring_isomorphism ?f ?A ?addA ?multA ?zeroA ?oneA ?B ?addB ?multB
          ?zeroB ?oneB |]
      ==> local_ring ?A ?addA ?multA ?zeroA ?oneA",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_hole 1, template_var 5),
                                template_var 4),
                              template_var 3),
                            template_var 2),
                          template_var 1),
                        template_var 0),
                      template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Comm_Ring.im_of_lideal_is_lideal",
     "[| lideal ?I ?A ?addA ?multA ?zeroA ?oneA;
         ring_epimorphism ?f ?A ?addA ?multA ?zeroA ?oneA ?B ?addB ?multB
          ?zeroB ?oneB |]
      ==> lideal (?f ` ?I) ?B ?addB ?multB ?zeroB ?oneB",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 11),
                      template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_hole 2, template_var 5),
                                template_var 10),
                              template_var 9),
                            template_var 8),
                          template_var 7),
                        template_var 6),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_var 5),
                         template_var 11)),
                     template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Comm_Ring.im_of_max_ideal_is_max",
     "[| max_ideal ?A ?I ?addA ?multA ?zeroA ?oneA;
         ring_isomorphism ?f ?A ?addA ?multA ?zeroA ?oneA ?B ?addB ?multB
          ?zeroB ?oneB |]
      ==> max_ideal ?B (?f ` ?I) ?addB ?multB ?zeroB ?oneB",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 11),
                      template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_hole 2, template_var 5),
                                template_var 11),
                              template_var 9),
                            template_var 8),
                          template_var 7),
                        template_var 6),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 4),
                     template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 10)),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Comm_Ring.im_of_max_lideal_is_max",
     "[| max_lideal ?I ?A ?addA ?multA ?zeroA ?oneA;
         ring_isomorphism ?f ?A ?addA ?multA ?zeroA ?oneA ?B ?addB ?multB
          ?zeroB ?oneB |]
      ==> max_lideal (?f ` ?I) ?B ?addB ?multB ?zeroB ?oneB",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 11),
                      template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_hole 2, template_var 5),
                                template_var 10),
                              template_var 9),
                            template_var 8),
                          template_var 7),
                        template_var 6),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_var 5),
                         template_var 11)),
                     template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Comm_Ring.im_of_ideal_is_ideal",
     "[| ideal ?I ?A ?addA ?multA ?zeroA ?oneA;
         ring_epimorphism ?f ?A ?addA ?multA ?zeroA ?oneA ?B ?addB ?multB
          ?zeroB ?oneB |]
      ==> ideal (?f ` ?I) ?B ?addB ?multB ?zeroB ?oneB",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 11),
                      template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_hole 2, template_var 5),
                                template_var 10),
                              template_var 9),
                            template_var 8),
                          template_var 7),
                        template_var 6),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_var 5),
                         template_var 11)),
                     template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Comm_Ring.iso_is_local_ring_morphism",
     "[| local_ring ?A ?addA ?multA ?zeroA ?oneA;
         ring_isomorphism ?f ?A ?addA ?multA ?zeroA ?oneA ?B ?addB ?multB
          ?zeroB ?oneB |]
      ==> local_ring_morphism ?f ?A ?addA ?multA ?zeroA ?oneA ?B ?addB
           ?multB ?zeroB ?oneB",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_hole 1, template_var 5),
                                template_var 10),
                              template_var 9),
                            template_var 8),
                          template_var 7),
                        template_var 6),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 0, template_var 5),
                               template_var 10),
                             template_var 9),
                           template_var 8),
                         template_var 7),
                       template_var 6),
                     template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Comm_Ring.preim_of_max_ideal_is_max",
     "[| max_ideal ?B ?J ?addB ?multB ?zeroB ?oneB;
         ring_isomorphism ?f ?A ?addA ?multA ?zeroA ?oneA ?B ?addB ?multB
          ?zeroB ?oneB |]
      ==> max_ideal ?A (?f \<^sup>\<inverse> ?A ?J) ?addA ?multA ?zeroA
           ?oneA",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 11),
                      template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_hole 3, template_var 5),
                                template_var 4),
                              template_var 3),
                            template_var 2),
                          template_var 1),
                        template_var 0),
                      template_var 11),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 4),
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app
                          (template_app (template_hole 0, template_var 5),
                           template_var 10)),
                       template_var 4)),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Comm_Ring.preim_of_ideal_is_ideal",
     "[| ideal ?J ?B ?addB ?multB ?zeroB ?oneB;
         ring_homomorphism ?f ?A ?addA ?multA ?zeroA ?oneA ?B ?addB ?multB
          ?zeroB ?oneB |]
      ==> ideal (?f \<^sup>\<inverse> ?A ?J) ?A ?addA ?multA ?zeroA ?oneA",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 11),
                      template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_hole 3, template_var 5),
                                template_var 4),
                              template_var 3),
                            template_var 2),
                          template_var 1),
                        template_var 0),
                      template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_hole 1,
                           template_app
                            (template_app (template_hole 0, template_var 5),
                             template_var 11)),
                         template_var 4)),
                     template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Comm_Ring.preim_of_lideal_is_lideal",
     "[| lideal ?I ?B ?addB ?multB ?zeroB ?oneB;
         ring_homomorphism ?f ?A ?addA ?multA ?zeroA ?oneA ?B ?addB ?multB
          ?zeroB ?oneB |]
      ==> lideal (?f \<^sup>\<inverse> ?A ?I) (?f \<^sup>\<inverse> ?A ?B)
           ?addA ?multA ?zeroA ?oneA",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 11),
                      template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_hole 3, template_var 5),
                                template_var 4),
                              template_var 3),
                            template_var 2),
                          template_var 1),
                        template_var 0),
                      template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_hole 1,
                           template_app
                            (template_app (template_hole 0, template_var 5),
                             template_var 11)),
                         template_var 4)),
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app
                          (template_app (template_hole 0, template_var 5),
                           template_var 10)),
                       template_var 4)),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Comm_Ring.preim_of_max_lideal_is_max",
     "[| max_lideal ?I ?B ?addB ?multB ?zeroB ?oneB;
         ring_isomorphism ?f ?A ?addA ?multA ?zeroA ?oneA ?B ?addB ?multB
          ?zeroB ?oneB |]
      ==> max_lideal (?f \<^sup>\<inverse> ?A ?I)
           (?f \<^sup>\<inverse> ?A ?B) ?addA ?multA ?zeroA ?oneA",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 11),
                      template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_hole 3, template_var 5),
                                template_var 4),
                              template_var 3),
                            template_var 2),
                          template_var 1),
                        template_var 0),
                      template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_hole 1,
                           template_app
                            (template_app (template_hole 0, template_var 5),
                             template_var 11)),
                         template_var 4)),
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app
                          (template_app (template_hole 0, template_var 5),
                           template_var 10)),
                       template_var 4)),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Comm_Ring.comp_of_local_ring_morphisms",
     "[| local_ring_morphism ?f ?A ?addA ?multA ?zeroA ?oneA ?B ?addB ?multB
          ?zeroB ?oneB;
         local_ring_morphism ?g ?B ?addB ?multB ?zeroB ?oneB ?C ?addC ?multC
          ?zeroC ?oneC |]
      ==> local_ring_morphism (?g \<circ> ?f \<down> ?A) ?A ?addA ?multA
           ?zeroA ?oneA ?C ?addC ?multC ?zeroC ?oneC",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_hole 3, template_var 16),
                                template_var 15),
                              template_var 14),
                            template_var 13),
                          template_var 12),
                        template_var 11),
                      template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_hole 2, template_var 5),
                                template_var 10),
                              template_var 9),
                            template_var 8),
                          template_var 7),
                        template_var 6),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 1,
                                 template_app
                                  (template_app
                                    (template_app
(template_hole 0, template_var 15),
                                     template_var 5),
                                   template_var 16)),
                               template_var 15),
                             template_var 14),
                           template_var 13),
                         template_var 12),
                       template_var 11),
                     template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Comm_Ring.comp_ring_morphisms",
     "[| ring_homomorphism ?\<eta> ?A ?addA ?multA ?zeroA ?oneA ?B ?addB
          ?multB ?zeroB ?oneB;
         ring_homomorphism ?\<theta> ?B ?addB ?multB ?zeroB ?oneB ?C ?addC
          ?multC ?zeroC ?oneC |]
      ==> ring_homomorphism (?\<theta> \<circ> ?\<eta> \<down> ?A) ?A ?addA
           ?multA ?zeroA ?oneA ?C ?addC ?multC ?zeroC ?oneC",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_hole 3, template_var 16),
                                template_var 15),
                              template_var 14),
                            template_var 13),
                          template_var 12),
                        template_var 11),
                      template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_hole 2, template_var 5),
                                template_var 10),
                              template_var 9),
                            template_var 8),
                          template_var 7),
                        template_var 6),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 1,
                                 template_app
                                  (template_app
                                    (template_app
(template_hole 0, template_var 15),
                                     template_var 5),
                                   template_var 16)),
                               template_var 15),
                             template_var 14),
                           template_var 13),
                         template_var 12),
                       template_var 11),
                     template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Comm_Ring.comp_of_presheaves",
     "[| morphism_presheaves_of_rings ?X ?is_open ?\<FF> ?\<rho> ?b ?add_str
          ?mult_str ?zero_str ?one_str ?\<FF>' ?\<rho>' ?b' ?add_str'
          ?mult_str' ?zero_str' ?one_str' ?\<phi>;
         morphism_presheaves_of_rings ?X ?is_open ?\<FF>' ?\<rho>' ?b'
          ?add_str' ?mult_str' ?zero_str' ?one_str' ?\<FF>'' ?\<rho>'' ?b''
          ?add_str'' ?mult_str'' ?zero_str'' ?one_str'' ?\<phi>' |]
      ==> morphism_presheaves_of_rings ?X ?is_open ?\<FF> ?\<rho> ?b
           ?add_str ?mult_str ?zero_str ?one_str ?\<FF>'' ?\<rho>'' ?b''
           ?add_str'' ?mult_str'' ?zero_str'' ?one_str''
           (%U. ?\<phi>' U \<circ> ?\<phi> U \<down> ?\<FF> U)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app (template_hole 3, template_var 24), template_var 23),
    template_var 22),
  template_var 21),
template_var 20),
                                    template_var 19),
                                  template_var 18),
                                template_var 17),
                              template_var 16),
                            template_var 15),
                          template_var 14),
                        template_var 13),
                      template_var 12),
                    template_var 11),
                  template_var 10),
                template_var 9),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app (template_hole 2, template_var 24), template_var 23),
    template_var 15),
  template_var 14),
template_var 13),
                                    template_var 12),
                                  template_var 11),
                                template_var 10),
                              template_var 9),
                            template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app (template_hole 1, template_var 24), template_var 23),
   template_var 22),
 template_var 21),
                                     template_var 20),
                                   template_var 19),
                                 template_var 18),
                               template_var 17),
                             template_var 16),
                           template_var 7),
                         template_var 6),
                       template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             t_empty)
           )))]:
   (string * thm * template) list
### theory "Draft.Comm_RingMoreTemplates"
### 0.330s elapsed time, 0.493s cpu time, 0.043s GC time
val it = (): unit
