   [("Set_Extras.undefined_is_map_on_empty",
     "?f = (%x. undefined) ==> Set_Theory.map ?f {} {}",
     template_implication
      ([template_equation (template_var 0, t_empty)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1),
             template_hole 0)
           ))),
    ("Set_Extras.restrict_on_source",
     "Set_Theory.map ?f ?S ?T ==> restrict ?f ?S = ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 2))),
    ("Set_Extras.image_subset_of_target",
     "Set_Theory.map ?f ?S ?T ==> ?f ` ?S <= ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Set_Extras.inverse_map_identity",
     "inverse_map (identity ?S) ?S ?S = identity ?S",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty), template_var 0)),
           template_var 0),
         template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Set_Extras.preimage_identity_self",
     "identity ?A \<^sup>\<inverse> ?A ?B = ?B Int ?A",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, t_empty), template_var 1)),
             template_var 0)),
         template_var 1),
       template_app
        (template_app (template_hole 2, template_var 0), template_var 1))),
    ("Set_Extras.bijective_map_preimage",
     "bijective_map ?f ?S ?T ==>
      bijective_map (inverse_map ?f ?S ?T) ?T ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1),
                   template_var 0)),
               template_var 0),
             template_var 1)
           ))),
    ("Set_Extras.preimage_vimage_eq",
     "?f \<^sup>\<inverse> ?f -` ?U' ?U Int ?X =
      ?f \<^sup>\<inverse> ?X (?U Int ?U')",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_var 0))),
    ("Set_Extras.preimage_of_inter",
     "?f \<^sup>\<inverse> ?X (?V Int ?V') =
      ?f \<^sup>\<inverse> ?X ?V Int ?f \<^sup>\<inverse> ?X ?V'",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_var 0)))),
    ("Set_Extras.comp_maps",
     "[| Set_Theory.map ?\<eta> ?A ?B; Set_Theory.map ?\<theta> ?B ?C |]
      ==> Set_Theory.map (?\<theta> \<circ> ?\<eta> \<down> ?A) ?A ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 1),
                   template_var 4)),
               template_var 3),
             template_var 0)
           ))),
    ("Set_Extras.restrict_further",
     "[| Set_Theory.map ?f ?S ?T; ?U <= ?S; ?V <= ?U |]
      ==> restrict (restrict ?f ?U) ?V = restrict ?f ?V",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 3),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 4),
           template_var 0)))),
    ("Set_Extras.map_eq",
     "[| Set_Theory.map ?f ?S ?T; Set_Theory.map ?g ?S ?T;
         !!x. x : ?S ==> ?f x = ?g x |]
      ==> ?f = ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 0),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation (template_var 3, template_var 0)))]
