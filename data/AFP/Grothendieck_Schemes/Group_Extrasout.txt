Loading theory "HOL-Library.FuncSet" (required by "Draft.Group_ExtrasMoreTemplates" via "Draft.Group_Extras" via "Jacobson_Basic_Algebra.Group_Theory" via "Jacobson_Basic_Algebra.Set_Theory")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Group_ExtrasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Group_ExtrasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Group_ExtrasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.122s elapsed time, 0.502s cpu time, 0.041s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Group_ExtrasMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.216s elapsed time, 0.876s cpu time, 0.041s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Group_ExtrasMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.326s elapsed time, 1.298s cpu time, 0.116s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Group_ExtrasMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.FuncSet"
### 0.385s elapsed time, 1.528s cpu time, 0.116s GC time
Loading theory "Jacobson_Basic_Algebra.Set_Theory" (required by "Draft.Group_ExtrasMoreTemplates" via "Draft.Group_Extras" via "Jacobson_Basic_Algebra.Group_Theory")
locale map
  fixes \<alpha> :: "'a => 'b"
    and S :: "'a set"
    and T :: "'b set"
  assumes "map \<alpha> S T"
locale surjective_map
  fixes \<alpha> :: "'a => 'b"
    and S :: "'a set"
    and T :: "'b set"
  assumes "surjective_map \<alpha> S T"
locale injective_map
  fixes \<alpha> :: "'a => 'b"
    and S :: "'a set"
    and T :: "'b set"
  assumes "injective_map \<alpha> S T"
locale bijective
  fixes \<alpha> :: "'a => 'b"
    and S :: "'a set"
    and T :: "'b set"
  assumes "bijective \<alpha> S T"
locale bijective_map
  fixes \<alpha> :: "'a => 'b"
    and S :: "'a set"
    and T :: "'b set"
  assumes "bijective_map \<alpha> S T"
locale map
  fixes \<alpha> :: "'a => 'b"
    and S :: "'a set"
    and T :: "'b set"
  assumes "map \<alpha> S T"
locale equivalence
  fixes S :: "'a set"
    and E :: "('a * 'a) set"
  assumes "equivalence S E"
locale partition
  fixes S :: "'a set"
    and P :: "'a set set"
  assumes "partition S P"
locale equivalence
  fixes S :: "'a set"
    and E :: "('a * 'a) set"
  assumes "equivalence S E"
locale partition
  fixes S :: "'a set"
    and P :: "'a set set"
  assumes "partition S P"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
locale equivalence
  fixes S :: "'a set"
    and E :: "('a * 'a) set"
  assumes "equivalence S E"
locale equivalence
  fixes S :: "'a set"
    and E :: "('a * 'a) set"
  assumes "equivalence S E"
Found termination order: "size <*mlex*> {}"
locale fiber_relation_notation
  fixes S :: "'a set"
consts
  shift :: "'a list => 'a stream => 'a stream"
locale fiber_relation
  fixes \<alpha> :: "'a => 'b"
    and S :: "'a set"
    and T :: "'b set"
  assumes "fiber_relation \<alpha> S T"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Jacobson_Basic_Algebra.Set_Theory"
### 0.446s elapsed time, 1.762s cpu time, 0.204s GC time
Loading theory "Draft.Set_Extras" (required by "Draft.Group_ExtrasMoreTemplates" via "Draft.Group_Extras")
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "Draft.Set_Extras"
### 0.074s elapsed time, 0.298s cpu time, 0.000s GC time
Loading theory "Jacobson_Basic_Algebra.Group_Theory" (required by "Draft.Group_ExtrasMoreTemplates" via "Draft.Group_Extras")
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.023s elapsed time, 3.868s cpu time, 0.897s GC time
locale Group_Theory.monoid
  fixes M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "monoid M (\<cdot>) \<one>"
Found termination order: "size <*mlex*> {}"
locale submonoid
  fixes N :: "'a set"
    and M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "submonoid N M (\<cdot>) \<one>"
locale transformations
  fixes S :: "'a set"
consts
  flat :: "'a list stream => 'a stream"
locale transformation_monoid
  fixes M :: "('a => 'a) set"
    and S :: "'a set"
  assumes "transformation_monoid M S"
locale Group_Theory.monoid
  fixes M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "monoid M (\<cdot>) \<one>"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
locale submonoid
  fixes N :: "'a set"
    and M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "submonoid N M (\<cdot>) \<one>"
locale Group_Theory.group
  fixes G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "group G (\<cdot>) \<one>"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
locale subgroup
  fixes G :: "'a set"
    and M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "subgroup G M (\<cdot>) \<one>"
Found termination order: "size <*mlex*> {}"
locale Group_Theory.monoid
  fixes M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "monoid M (\<cdot>) \<one>"
### theory "HOL-Library.Stream"
### 1.154s elapsed time, 4.181s cpu time, 0.897s GC time
locale transformations
  fixes S :: "'a set"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale transformation_group
  fixes G :: "('a => 'a) set"
    and S :: "'a set"
  assumes "transformation_group G S"
Found termination order: "size <*mlex*> {}"
locale monoid_isomorphism
  fixes \<eta> :: "'a => 'b"
    and M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and M' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "monoid_isomorphism \<eta> M (\<cdot>) \<one> M' (\<cdot>') \<one>'"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale monoid_isomorphism'
  fixes \<eta> :: "'a => 'b"
    and M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and M' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "monoid_isomorphism' \<eta> M (\<cdot>) \<one> M' (\<cdot>') \<one>'"
locale monoid_isomorphism
  fixes \<eta> :: "'a => 'b"
    and M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and M' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "monoid_isomorphism \<eta> M (\<cdot>) \<one> M' (\<cdot>') \<one>'"
Found termination order: "size <*mlex*> {}"
locale left_translations_of_monoid
  fixes M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "left_translations_of_monoid M (\<cdot>) \<one>"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale Group_Theory.monoid
  fixes M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "monoid M (\<cdot>) \<one>"
locale left_translations_of_group
  fixes G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "left_translations_of_group G (\<cdot>) \<one>"
Found termination order: "size <*mlex*> {}"
locale Group_Theory.group
  fixes G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "group G (\<cdot>) \<one>"
### theory "HOL-Library.Tree"
### 2.069s elapsed time, 6.489s cpu time, 1.120s GC time
Loading theory "Draft.Templates" (required by "Draft.Group_ExtrasMoreTemplates" via "Draft.ExtrEqs")
locale right_translations_of_group
  fixes G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "right_translations_of_group G (\<cdot>) \<one>"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.108s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Group_ExtrasMoreTemplates")
locale commutative_monoid
  fixes M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "commutative_monoid M (\<cdot>) \<one>"
locale abelian_group
  fixes G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "abelian_group G (\<cdot>) \<one>"
locale transformation_group
  fixes G :: "('a => 'a) set"
    and S :: "'a set"
  assumes "transformation_group G S"
locale monoid_isomorphism
  fixes \<eta> :: "'a => 'b"
    and M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and M' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "monoid_isomorphism \<eta> M (\<cdot>) \<one> M' (\<cdot>') \<one>'"
locale coset_notation
  fixes composition :: "'a => 'b => 'c"  (infixl \<open>\<cdot>\<close> 70)
locale subgroup_of_group
  fixes H :: "'a set"
    and G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "subgroup_of_group H G (\<cdot>) \<one>"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.543s elapsed time, 1.135s cpu time, 0.112s GC time
locale subgroup
  fixes G :: "'a set"
    and M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "subgroup G M (\<cdot>) \<one>"
locale Group_Theory.group
  fixes G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "group G (\<cdot>) \<one>"
locale subgroup_of_group
  fixes H :: "'a set"
    and G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "subgroup_of_group H G (\<cdot>) \<one>"
locale monoid_congruence
  fixes M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and E :: "('a * 'a) set"
  assumes "monoid_congruence M (\<cdot>) \<one> E"
locale group_congruence
  fixes G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and E :: "('a * 'a) set"
  assumes "group_congruence G (\<cdot>) \<one> E"
locale normal_subgroup
  fixes K :: "'a set"
    and G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "normal_subgroup K G (\<cdot>) \<one>"
locale subgroup_of_group
  fixes H :: "'a set"
    and G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "subgroup_of_group H G (\<cdot>) \<one>"
locale group_congruence
  fixes G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and E :: "('a * 'a) set"
  assumes "group_congruence G (\<cdot>) \<one> E"
locale normal_subgroup
  fixes K :: "'a set"
    and G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "normal_subgroup K G (\<cdot>) \<one>"
locale Group_Theory.group
  fixes G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "group G (\<cdot>) \<one>"
locale normal_subgroup
  fixes K :: "'a set"
    and G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "normal_subgroup K G (\<cdot>) \<one>"
locale subgroup_of_abelian_group
  fixes H :: "'a set"
    and G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "subgroup_of_abelian_group H G (\<cdot>) \<one>"
locale monoid_homomorphism
  fixes \<eta> :: "'a => 'b"
    and M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and M' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "monoid_homomorphism \<eta> M (\<cdot>) \<one> M' (\<cdot>') \<one>'"
locale monoid_epimorphism
  fixes \<eta> :: "'a => 'b"
    and M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and M' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "monoid_epimorphism \<eta> M (\<cdot>) \<one> M' (\<cdot>') \<one>'"
locale monoid_monomorphism
  fixes \<eta> :: "'a => 'b"
    and M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and M' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "monoid_monomorphism \<eta> M (\<cdot>) \<one> M' (\<cdot>') \<one>'"
locale monoid_homomorphism
  fixes \<eta> :: "'a => 'b"
    and M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and M' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "monoid_homomorphism \<eta> M (\<cdot>) \<one> M' (\<cdot>') \<one>'"
locale monoid_homomorphism_fundamental
  fixes \<eta> :: "'a => 'b"
    and M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and M' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "monoid_homomorphism_fundamental \<eta> M (\<cdot>) \<one> M' (\<cdot>')
      \<one>'"
locale group_homomorphism
  fixes \<eta> :: "'a => 'b"
    and G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and G' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "group_homomorphism \<eta> G (\<cdot>) \<one> G' (\<cdot>') \<one>'"
locale group_epimorphism
  fixes \<eta> :: "'a => 'b"
    and G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and G' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "group_epimorphism \<eta> G (\<cdot>) \<one> G' (\<cdot>') \<one>'"
locale normal_subgroup_in_kernel
  fixes \<eta> :: "'a => 'b"
    and G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and G' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
    and L :: "'a set"
  assumes
    "normal_subgroup_in_kernel \<eta> G (\<cdot>) \<one> G' (\<cdot>')
      \<one>' L"
locale group_homomorphism_fundamental
  fixes \<eta> :: "'a => 'b"
    and G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and G' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "group_homomorphism_fundamental \<eta> G (\<cdot>) \<one> G' (\<cdot>')
      \<one>'"
locale group_isomorphism
  fixes \<eta> :: "'a => 'b"
    and G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and G' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "group_isomorphism \<eta> G (\<cdot>) \<one> G' (\<cdot>') \<one>'"
locale group_epimorphism_fundamental
  fixes \<eta> :: "'a => 'b"
    and G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and G' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "group_epimorphism_fundamental \<eta> G (\<cdot>) \<one> G' (\<cdot>')
      \<one>'"
locale group_homomorphism
  fixes \<eta> :: "'a => 'b"
    and G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
    and G' :: "'b set"
    and
    composition' :: "'b => 'b => 'b"  (infixl \<open>\<cdot>''\<close> 70)
    and unit' :: "'b"  (\<open>\<one>''\<close>)
  assumes
    "group_homomorphism \<eta> G (\<cdot>) \<one> G' (\<cdot>') \<one>'"
### theory "Jacobson_Basic_Algebra.Group_Theory"
### 7.563s elapsed time, 10.851s cpu time, 1.794s GC time
Loading theory "Draft.Group_Extras" (required by "Draft.Group_ExtrasMoreTemplates")
Proofs for inductive predicate(s) "foldSetDp"
  Proving monotonicity ...
locale LCD
  fixes B :: "'b set"
    and D :: "'a set"
    and f :: "'b => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
  assumes "LCD B D (\<cdot>)"
locale ACeD
  fixes D :: "'a set"
    and f :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and e :: "'a"
  assumes "ACeD D (\<cdot>) e"
locale Group_Theory.monoid
  fixes M :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "Group_Theory.monoid M (\<cdot>) \<one>"
locale Group_Theory.group
  fixes G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "Group_Theory.group G (\<cdot>) \<one>"
Proofs for inductive predicate(s) "generatep"
  Proving monotonicity ...
locale abelian_group
  fixes G :: "'a set"
    and composition :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and unit :: "'a"  (\<open>\<one>\<close>)
  assumes "abelian_group G (\<cdot>) \<one>"
### theory "Draft.Group_Extras"
### 0.412s elapsed time, 0.448s cpu time, 0.049s GC time
Loading theory "Draft.Group_ExtrasMoreTemplates"
val templateLemmas =
   [("Group_Extras.foldD_empty", "?e : ?D ==> foldD ?D ?f ?e {} = ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_var 2),
           template_hole 0),
         template_var 2))),
    ("Group_Extras.foldSetD_imp_finite",
     "(?A, ?x) : foldSetD ?D ?f ?e ==> finite ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 4)))),
    ("Group_Extras.foldSetD_closed",
     "(?A, ?z) : foldSetD ?D ?f ?e ==> ?z : ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3), template_var 2)
           ))),
    ("Group_Extras.Int_mono2",
     "[| ?A <= ?C; ?B <= ?C |] ==> ?A Int ?B <= ?C",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("Group_Extras.foldSetDp_foldSetD_eq",
     "foldSetDp (%x. x : ?D) ?f ?e = (%x xa. (x, xa) : foldSetD ?D ?f ?e)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, t_empty), template_var 1),
         template_var 0),
       t_empty)),
    ("Group_Extras.empty_foldSetDE",
     "[| ({}, ?x) : foldSetD ?D ?f ?e; [| ?x = ?e; ?e : ?D |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 4)),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_equation (template_var 4, template_var 1)],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 3)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Group_Extras.comp_group_morphisms",
     "[| group_homomorphism ?\<eta> ?A ?multA ?oneA ?B ?multB ?oneB;
         group_homomorphism ?\<theta> ?B ?multB ?oneB ?C ?multC ?oneC |]
      ==> group_homomorphism (?\<theta> \<circ> ?\<eta> \<down> ?A) ?A
           ?multA ?oneA ?C ?multC ?oneC",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 3, template_var 10),
                        template_var 9),
                      template_var 8),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 2, template_var 3),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 1,
                         template_app
                          (template_app
                            (template_app (template_hole 0, template_var 9),
                             template_var 3),
                           template_var 10)),
                       template_var 9),
                     template_var 8),
                   template_var 7),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Group_Extras.comp_monoid_morphisms",
     "[| monoid_homomorphism ?\<eta> ?A ?multA ?oneA ?B ?multB ?oneB;
         monoid_homomorphism ?\<theta> ?B ?multB ?oneB ?C ?multC ?oneC |]
      ==> monoid_homomorphism (?\<theta> \<circ> ?\<eta> \<down> ?A) ?A
           ?multA ?oneA ?C ?multC ?oneC",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 3, template_var 10),
                        template_var 9),
                      template_var 8),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 2, template_var 3),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 1,
                         template_app
                          (template_app
                            (template_app (template_hole 0, template_var 9),
                             template_var 3),
                           template_var 10)),
                       template_var 9),
                     template_var 8),
                   template_var 7),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Group_Extras.Diff1_foldSetD",
     "[| (?A\<setminus>{?x}, ?y) : foldSetD ?D ?f ?e; ?x : ?A;
         ?f ?x ?y : ?D |]
      ==> (?A, ?f ?x ?y) : foldSetD ?D ?f ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 5),
                      template_app
                       (template_app (template_hole 4, template_var 4),
                        template_hole 3))),
                  template_var 3)),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 0,
                template_app
                 (template_app (template_var 1, template_var 4),
                  template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 5),
                 template_app
                  (template_app (template_var 1, template_var 4),
                   template_var 3))),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Group_Extras.finite_imp_foldSetD",
     "[| finite ?A; ?e : ?D; !!x y. [| x : ?A; y : ?D |] ==> ?f x y : ?D |]
      ==> EX x. (?A, x) : foldSetD ?D ?f ?e",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Group_Extras.foldSetD_backwards",
     "[| ?A ~= {}; (?A, ?z) : foldSetD ?D ?f ?e |]
      ==> EX x y.
             x : ?A &
             (?A\<setminus>{x}, y) : foldSetD ?D ?f ?e & ?z = ?f x y",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_hole 10)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 6, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Group_ExtrasMoreTemplates"
### 0.300s elapsed time, 0.423s cpu time, 0.000s GC time
val it = (): unit
