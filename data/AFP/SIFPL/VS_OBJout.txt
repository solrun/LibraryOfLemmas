Loading theory "Draft.OBJ" (required by "Draft.VS_OBJMoreTemplates" via "Draft.VS_OBJ" via "Draft.VDM_OBJ")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.VS_OBJMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.VS_OBJMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.VS_OBJMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
consts
  lookup :: "('a * 'b) list => 'a => 'b option"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.133s elapsed time, 0.554s cpu time, 0.048s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.VS_OBJMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.218s elapsed time, 0.897s cpu time, 0.048s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.VS_OBJMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.355s elapsed time, 1.419s cpu time, 0.124s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.VS_OBJMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  evalE :: "Expr => (Var => Val) => Val"
consts
  evalB :: "BExpr => (Var => Val) => bool"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.991s elapsed time, 3.730s cpu time, 0.843s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.082s elapsed time, 3.890s cpu time, 0.819s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "Semnp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.976s elapsed time, 6.218s cpu time, 1.084s GC time
Loading theory "Draft.Templates" (required by "Draft.VS_OBJMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 199 of "$AFP/SIFPL/OBJ.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>Sem" ("_position" s) ("_position" c) ("_position" t))
###     ("\<^const>HOL.Ex_binder" ("_position" n)
###       ("\<^const>OBJ.SemN" ("_position" s) ("_position" c) ("_position" n)
###         ("_position" t)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Sem" ("_position" s) ("_position" c)
###     ("\<^const>HOL.eq" ("_position" t)
###       ("\<^const>HOL.Ex_binder" ("_position" n)
###         ("\<^const>OBJ.SemN" ("_position" s) ("_position" c) ("_position" n)
###           ("_position" t))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>Sem" ("_position" s) ("_position" c) ("_position" t))
###     ("\<^const>OBJ.SemN"
###       ("\<^const>HOL.Ex_binder" ("_position" n) ("_position" s))
###       ("_position" c) ("_position" n) ("_position" t))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Sem" ("_position" s) ("_position" c)
###     ("\<^const>HOL.eq" ("_position" t)
###       ("\<^const>OBJ.SemN"
###         ("\<^const>HOL.Ex_binder" ("_position" n) ("_position" s))
###         ("_position" c) ("_position" n) ("_position" t)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.107s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.VS_OBJMoreTemplates")
### theory "Draft.OBJ"
### 2.464s elapsed time, 7.522s cpu time, 1.209s GC time
Loading theory "Draft.PBIJ" (required by "Draft.VS_OBJMoreTemplates" via "Draft.VS_OBJ")
Loading theory "Draft.VDM_OBJ" (required by "Draft.VS_OBJMoreTemplates" via "Draft.VS_OBJ")
### Ambiguous input (line 44 of "$AFP/SIFPL/VDM_OBJ.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>Ctxt_validn" ("_position" n) ("_position" G))
###     ("\<^const>HOL.All_binder" ("_position" m)
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" n))
###         ("\<^const>HOL.All_binder" ("_position" A)
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.member" ("_position" A) ("_position" G))
###             ("\<^const>VDM_OBJ.VDM_validn" ("_position" n)
###               ("_position" Call) ("_position" A))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>Ctxt_validn" ("_position" n) ("_position" G))
###     ("\<^const>HOL.All_binder" ("_position" m)
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" n))
###         ("\<^const>HOL.All_binder" ("_position" A)
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.member" ("_position" A) ("_position" G))
###             ("\<^fixed>Ctxt_validn" ("_position" n)
###               ("\<^const>Set.member" ("_position" Call)
###                 ("_position" A)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 47 of "$AFP/SIFPL/VDM_OBJ.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>Ctxt_valid" ("_position" G))
###     ("\<^const>HOL.All_binder" ("_position" A)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" A) ("_position" G))
###         ("\<^fixed>Ctxt_valid"
###           ("\<^const>Set.member" ("_position" Call) ("_position" A)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>Ctxt_valid" ("_position" G))
###     ("\<^const>HOL.All_binder" ("_position" A)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" A) ("_position" G))
###         ("\<^const>VDM_OBJ.VDM_valid" ("_position" Call)
###           ("_position" A))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 76 of "$AFP/SIFPL/VDM_OBJ.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>validn" ("_position" G) ("_position" n) ("_position" c)
###       ("_position" A))
###     ("\<^const>HOL.implies"
###       ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n) ("_position" G))
###       ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###         ("\<^const>Set.member" ("_position" c) ("_position" A))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>validn" ("_position" G) ("_position" n) ("_position" c)
###       ("_position" A))
###     ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###       ("\<^const>HOL.implies" ("_position" G)
###         ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###           ("\<^const>Set.member" ("_position" c) ("_position" A)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>validn" ("_position" G) ("_position" n) ("_position" c)
###       ("_position" A))
###     ("\<^const>VDM_OBJ.VDM_validn" ("_position" n)
###       ("\<^const>HOL.implies" ("_position" G)
###         ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n) ("_position" c)))
###       ("_position" A))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>validn" ("_position" G) ("_position" n) ("_position" c)
###       ("_position" A))
###     ("\<^const>HOL.implies"
###       ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n) ("_position" G))
###       ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" c)
###         ("_position" A)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>validn" ("_position" G) ("_position" n) ("_position" c)
###       ("_position" A))
###     ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###       ("\<^const>HOL.implies" ("_position" G)
###         ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" c)
###           ("_position" A))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.PBIJ"
### 0.090s elapsed time, 0.280s cpu time, 0.000s GC time
### Ambiguous input (line 78 of "$AFP/SIFPL/VDM_OBJ.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" n)
###       ("\<^const>VDM_OBJ.validn" ("_position" G) ("_position" n)
###         ("_position" c) ("_position" A))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.valid" ("_position" G) ("_position" c)
###       ("_position" A))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.validn"
###       ("\<^const>HOL.All_binder" ("_position" n) ("_position" G))
###       ("_position" n) ("_position" c) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.valid" ("_position" G) ("_position" c)
###       ("_position" A))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 87 of "$AFP/SIFPL/VDM_OBJ.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n) ("_position" G)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###           ("\<^const>Set.member" ("_position" Call) ("_position" A))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###       ("\<^const>Set.union" ("_Finset" ("_position" A)) ("_position" G)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n) ("_position" G)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" Call)
###           ("_position" A)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###       ("\<^const>Set.union" ("_Finset" ("_position" A)) ("_position" G)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "VDM_proofp"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.556s elapsed time, 1.252s cpu time, 0.094s GC time
### Ambiguous input (line 188 of "$AFP/SIFPL/VDM_OBJ.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.All_binder" ("_position" n)
###       ("\<^const>VDM_OBJ.validn" ("_position" G) ("_position" n)
###         ("_position" c) ("_position" B)))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.All_binder" ("_position" s)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" evalB)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" fst) ("_position" s)))))
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s) ("_position" s)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.All_binder" ("_position" s)
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" evalB)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" fst) ("_position" s))))
###             ("\<^const>HOL.All_binder" ("_position" r)
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" B)
###                   ("_cargs" ("_position" s) ("_position" r)))
###                 ("\<^const>HOL.All_binder" ("_position" t)
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" r) ("_position" t)))
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s) ("_position" t)))))))))
###         ("\<^const>VDM_OBJ.validn" ("_position" G) ("_position" n)
###           ("_applC" ("_position" While)
###             ("_cargs" ("_position" b) ("_position" c)))
###           ("_lambda" ("_pttrns" ("_position" s) ("_position" t))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" A)
###                 ("_cargs" ("_position" s) ("_position" t)))
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" evalB)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" fst) ("_position" t))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>VDM_OBJ.validn"
###       ("\<^const>HOL.All_binder" ("_position" n) ("_position" G))
###       ("_position" n) ("_position" c) ("_position" B))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.All_binder" ("_position" s)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" evalB)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" fst) ("_position" s)))))
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s) ("_position" s)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.All_binder" ("_position" s)
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" evalB)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" fst) ("_position" s))))
###             ("\<^const>HOL.All_binder" ("_position" r)
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" B)
###                   ("_cargs" ("_position" s) ("_position" r)))
###                 ("\<^const>HOL.All_binder" ("_position" t)
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" r) ("_position" t)))
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s) ("_position" t)))))))))
###         ("\<^const>VDM_OBJ.validn" ("_position" G) ("_position" n)
###           ("_applC" ("_position" While)
###             ("_cargs" ("_position" b) ("_position" c)))
###           ("_lambda" ("_pttrns" ("_position" s) ("_position" t))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" A)
###                 ("_cargs" ("_position" s) ("_position" t)))
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" evalB)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" fst) ("_position" t))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.All_binder" ("_position" n)
###       ("\<^const>VDM_OBJ.validn" ("_position" G) ("_position" n)
###         ("_position" c) ("_position" B)))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.All_binder" ("_position" s)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" evalB)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" fst) ("_position" s)))))
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s) ("_position" s)))))
###       ("\<^const>VDM_OBJ.validn"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.All_binder" ("_position" s)
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" s))))
###               ("\<^const>HOL.All_binder" ("_position" r)
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" B)
###                     ("_cargs" ("_position" s) ("_position" r)))
###                   ("\<^const>HOL.All_binder" ("_position" t)
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" r) ("_position" t)))
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s) ("_position" t)))))))))
###           ("_position" G))
###         ("_position" n)
###         ("_applC" ("_position" While)
###           ("_cargs" ("_position" b) ("_position" c)))
###         ("_lambda" ("_pttrns" ("_position" s) ("_position" t))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" A)
###               ("_cargs" ("_position" s) ("_position" t)))
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" t)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>VDM_OBJ.validn"
###       ("\<^const>HOL.All_binder" ("_position" n) ("_position" G))
###       ("_position" n) ("_position" c) ("_position" B))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.All_binder" ("_position" s)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" evalB)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" fst) ("_position" s)))))
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s) ("_position" s)))))
###       ("\<^const>VDM_OBJ.validn"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.All_binder" ("_position" s)
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" s))))
###               ("\<^const>HOL.All_binder" ("_position" r)
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" B)
###                     ("_cargs" ("_position" s) ("_position" r)))
###                   ("\<^const>HOL.All_binder" ("_position" t)
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" r) ("_position" t)))
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s) ("_position" t)))))))))
###           ("_position" G))
###         ("_position" n)
###         ("_applC" ("_position" While)
###           ("_cargs" ("_position" b) ("_position" c)))
###         ("_lambda" ("_pttrns" ("_position" s) ("_position" t))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" A)
###               ("_cargs" ("_position" s) ("_position" t)))
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" t)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>VDM_OBJ.validn"
###     ("\<^const>HOL.implies"
###       ("\<^const>VDM_OBJ.validn"
###         ("\<^const>HOL.All_binder" ("_position" n) ("_position" G))
###         ("_position" n) ("_position" c) ("_position" B))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.All_binder" ("_position" s)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" s)))))
###             ("_applC" ("_position" A)
###               ("_cargs" ("_position" s) ("_position" s)))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.All_binder" ("_position" s)
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" s))))
###               ("\<^const>HOL.All_binder" ("_position" r)
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" B)
###                     ("_cargs" ("_position" s) ("_position" r)))
###                   ("\<^const>HOL.All_binder" ("_position" t)
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" r) ("_position" t)))
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s) ("_position" t)))))))))
###           ("_position" G))))
###     ("_position" n)
###     ("_applC" ("_position" While)
###       ("_cargs" ("_position" b) ("_position" c)))
###     ("_lambda" ("_pttrns" ("_position" s) ("_position" t))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" A)
###           ("_cargs" ("_position" s) ("_position" t)))
###         ("\<^const>HOL.Not"
###           ("_applC" ("_position" evalB)
###             ("_cargs" ("_position" b)
###               ("_applC" ("_position" fst) ("_position" t)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.All_binder" ("_position" n)
###       ("\<^const>VDM_OBJ.validn" ("_position" G) ("_position" n)
###         ("_position" c) ("_position" B)))
###     ("\<^const>VDM_OBJ.validn"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.All_binder" ("_position" s)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" s)))))
###             ("_applC" ("_position" A)
###               ("_cargs" ("_position" s) ("_position" s)))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.All_binder" ("_position" s)
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" s))))
###               ("\<^const>HOL.All_binder" ("_position" r)
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" B)
###                     ("_cargs" ("_position" s) ("_position" r)))
###                   ("\<^const>HOL.All_binder" ("_position" t)
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" r) ("_position" t)))
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s) ("_position" t)))))))))
###           ("_position" G)))
###       ("_position" n)
###       ("_applC" ("_position" While)
###         ("_cargs" ("_position" b) ("_position" c)))
###       ("_lambda" ("_pttrns" ("_position" s) ("_position" t))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s) ("_position" t)))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" evalB)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" fst) ("_position" t))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>VDM_OBJ.validn"
###       ("\<^const>HOL.All_binder" ("_position" n) ("_position" G))
###       ("_position" n) ("_position" c) ("_position" B))
###     ("\<^const>VDM_OBJ.validn"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.All_binder" ("_position" s)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" s)))))
###             ("_applC" ("_position" A)
###               ("_cargs" ("_position" s) ("_position" s)))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.All_binder" ("_position" s)
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" s))))
###               ("\<^const>HOL.All_binder" ("_position" r)
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" B)
###                     ("_cargs" ("_position" s) ("_position" r)))
###                   ("\<^const>HOL.All_binder" ("_position" t)
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" r) ("_position" t)))
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s) ("_position" t)))))))))
###           ("_position" G)))
###       ("_position" n)
###       ("_applC" ("_position" While)
###         ("_cargs" ("_position" b) ("_position" c)))
###       ("_lambda" ("_pttrns" ("_position" s) ("_position" t))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s) ("_position" t)))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" evalB)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" fst) ("_position" t))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>VDM_OBJ.validn"
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>VDM_OBJ.validn" ("_position" G) ("_position" n)
###           ("_position" c) ("_position" B)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.All_binder" ("_position" s)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" s)))))
###             ("_applC" ("_position" A)
###               ("_cargs" ("_position" s) ("_position" s)))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.All_binder" ("_position" s)
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" s))))
###               ("\<^const>HOL.All_binder" ("_position" r)
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" B)
###                     ("_cargs" ("_position" s) ("_position" r)))
###                   ("\<^const>HOL.All_binder" ("_position" t)
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" r) ("_position" t)))
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s) ("_position" t)))))))))
###           ("_position" G))))
###     ("_position" n)
###     ("_applC" ("_position" While)
###       ("_cargs" ("_position" b) ("_position" c)))
###     ("_lambda" ("_pttrns" ("_position" s) ("_position" t))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" A)
###           ("_cargs" ("_position" s) ("_position" t)))
###         ("\<^const>HOL.Not"
###           ("_applC" ("_position" evalB)
###             ("_cargs" ("_position" b)
###               ("_applC" ("_position" fst) ("_position" t)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 210 of "$AFP/SIFPL/VDM_OBJ.thy") produces 25 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>HOL.implies"
###           ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###             ("\<^const>Set.union" ("_Finset" ("_position" A))
###               ("_position" G)))
###           ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###             ("\<^const>Set.member" ("_position" body) ("_position" A)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###       ("\<^const>HOL.implies" ("_position" G)
###         ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" Call)
###           ("_position" A))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.union" ("_Finset" ("_position" A))
###               ("_position" G))
###             ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###               ("\<^const>Set.member" ("_position" body)
###                 ("_position" A))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###       ("\<^const>HOL.implies" ("_position" G)
###         ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" Call)
###           ("_position" A))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>VDM_OBJ.VDM_validn" ("_position" n)
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.union" ("_Finset" ("_position" A))
###               ("_position" G))
###             ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###               ("_position" body)))
###           ("_position" A)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###       ("\<^const>HOL.implies" ("_position" G)
###         ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" Call)
###           ("_position" A))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>HOL.implies"
###           ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###             ("\<^const>Set.union" ("_Finset" ("_position" A))
###               ("_position" G)))
###           ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" body)
###             ("_position" A))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###       ("\<^const>HOL.implies" ("_position" G)
###         ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" Call)
###           ("_position" A))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.union" ("_Finset" ("_position" A))
###               ("_position" G))
###             ("\<^const>VDM_OBJ.VDM_validn" ("_position" n)
###               ("_position" body) ("_position" A)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###       ("\<^const>HOL.implies" ("_position" G)
###         ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" Call)
###           ("_position" A))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>HOL.implies"
###           ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###             ("\<^const>Set.union" ("_Finset" ("_position" A))
###               ("_position" G)))
###           ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###             ("\<^const>Set.member" ("_position" body) ("_position" A)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n) ("_position" G))
###       ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" Call)
###         ("_position" A)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.union" ("_Finset" ("_position" A))
###               ("_position" G))
###             ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###               ("\<^const>Set.member" ("_position" body)
###                 ("_position" A))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n) ("_position" G))
###       ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" Call)
###         ("_position" A)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>VDM_OBJ.VDM_validn" ("_position" n)
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.union" ("_Finset" ("_position" A))
###               ("_position" G))
###             ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###               ("_position" body)))
###           ("_position" A)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n) ("_position" G))
###       ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" Call)
###         ("_position" A)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>HOL.implies"
###           ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###             ("\<^const>Set.union" ("_Finset" ("_position" A))
###               ("_position" G)))
###           ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" body)
###             ("_position" A))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n) ("_position" G))
###       ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" Call)
###         ("_position" A)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.union" ("_Finset" ("_position" A))
###               ("_position" G))
###             ("\<^const>VDM_OBJ.VDM_validn" ("_position" n)
###               ("_position" body) ("_position" A)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n) ("_position" G))
###       ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" Call)
###         ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 223 of "$AFP/SIFPL/VDM_OBJ.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G) ("_position" c)
###       ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" n)
###       ("\<^const>VDM_OBJ.validn" ("_position" G) ("_position" n)
###         ("_position" c) ("_position" A)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G) ("_position" c)
###       ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.validn"
###       ("\<^const>HOL.All_binder" ("_position" n) ("_position" G))
###       ("_position" n) ("_position" c) ("_position" A))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 266 of "$AFP/SIFPL/VDM_OBJ.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("\<^const>Set.empty") ("_position" c)
###       ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid" ("_position" c) ("_position" A))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("\<^const>Set.empty") ("_position" c)
###       ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member" ("_position" c) ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 295 of "$AFP/SIFPL/VDM_OBJ.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" H) ("_position" c)
###       ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" G) ("_idts" ("_position" P) ("_position" D)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" H)
###           ("_applC" ("_position" insert)
###             ("_cargs" ("_position" P) ("_position" D))))
###         ("\<^const>HOL.implies"
###           ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G) ("_position" Call)
###             ("\<^const>HOL.implies" ("_position" P)
###               ("\<^const>Set.subset_eq" ("_position" G) ("_position" D))))
###           ("\<^const>VDM_OBJ.VDM_deriv" ("_position" D) ("_position" c)
###             ("_position" A)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" H) ("_position" c)
###       ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" G) ("_idts" ("_position" P) ("_position" D)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" H)
###           ("_applC" ("_position" insert)
###             ("_cargs" ("_position" P) ("_position" D))))
###         ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G) ("_position" Call)
###           ("\<^const>HOL.implies" ("_position" P)
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.subset_eq" ("_position" G) ("_position" D))
###               ("\<^const>VDM_OBJ.VDM_deriv" ("_position" D) ("_position" c)
###                 ("_position" A)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" H) ("_position" c)
###       ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" G) ("_idts" ("_position" P) ("_position" D)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" H)
###           ("_applC" ("_position" insert)
###             ("_cargs" ("_position" P) ("_position" D))))
###         ("\<^const>HOL.implies"
###           ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G) ("_position" Call)
###             ("_position" P))
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.subset_eq" ("_position" G) ("_position" D))
###             ("\<^const>VDM_OBJ.VDM_deriv" ("_position" D) ("_position" c)
###               ("_position" A))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 414 of "$AFP/SIFPL/VDM_OBJ.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>VDM_OBJ.VDM_valid" ("_position" c)
###     ("_applC" ("_position" SSpec) ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>VDM_OBJ.Ctxt_valid"
###     ("\<^const>Set.member" ("_position" c)
###       ("_applC" ("_position" SSpec) ("_position" c)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 417 of "$AFP/SIFPL/VDM_OBJ.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid" ("_position" c) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" t))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" SSpec)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" s) ("_position" t))))
###         ("_applC" ("_position" A)
###           ("_cargs" ("_position" s) ("_position" t)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member" ("_position" c) ("_position" A))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" t))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" SSpec)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" s) ("_position" t))))
###         ("_applC" ("_position" A)
###           ("_cargs" ("_position" s) ("_position" t)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 503 of "$AFP/SIFPL/VDM_OBJ.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid" ("_position" c) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("\<^const>Set.empty") ("_position" c)
###       ("_position" A))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member" ("_position" c) ("_position" A))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("\<^const>Set.empty") ("_position" c)
###       ("_position" A))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.VDM_OBJ"
### 0.691s elapsed time, 1.092s cpu time, 0.081s GC time
Loading theory "Draft.VS_OBJ" (required by "Draft.VS_OBJMoreTemplates")
Proofs for inductive predicate(s) "twiddleValp"
  Proving monotonicity ...
### Ambiguous input (line 95 of "$AFP/SIFPL/VS_OBJ.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" twiddle)
###       ("_cargs" ("_position" \<beta>)
###         ("_cargs" ("_position" s) ("_position" t))))
###     ("\<^const>HOL.conj" ("_applC" ("_position" noLowDPs) ("_position" s))
###       ("\<^const>HOL.conj" ("_applC" ("_position" noLowDPs) ("_position" t))
###         ("\<^const>VS_OBJ.twiddleStore_syntax"
###           ("_applC" ("_position" fst) ("_position" s)) ("_position" \<beta>)
###           ("\<^const>HOL.conj" ("_applC" ("_position" fst) ("_position" t))
###             ("_applC" ("_position" twiddleHeap)
###               ("_cargs" ("_position" \<beta>)
###                 ("_cargs" ("_applC" ("_position" snd) ("_position" s))
###                   ("_applC" ("_position" snd) ("_position" t)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" twiddle)
###       ("_cargs" ("_position" \<beta>)
###         ("_cargs" ("_position" s) ("_position" t))))
###     ("\<^const>HOL.conj" ("_applC" ("_position" noLowDPs) ("_position" s))
###       ("\<^const>HOL.conj" ("_applC" ("_position" noLowDPs) ("_position" t))
###         ("\<^const>HOL.conj"
###           ("\<^const>VS_OBJ.twiddleStore_syntax"
###             ("_applC" ("_position" fst) ("_position" s))
###             ("_position" \<beta>)
###             ("_applC" ("_position" fst) ("_position" t)))
###           ("_applC" ("_position" twiddleHeap)
###             ("_cargs" ("_position" \<beta>)
###               ("_cargs" ("_applC" ("_position" snd) ("_position" s))
###                 ("_applC" ("_position" snd) ("_position" t))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 287 of "$AFP/SIFPL/VS_OBJ.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" Expr_low) ("_position" e))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s)
###         ("_idts" ("_position" t) ("_position" \<beta>)))
###       ("\<^const>VS_OBJ.twiddleStore_syntax" ("_position" s)
###         ("_position" \<beta>)
###         ("\<^const>HOL.implies" ("_position" t)
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" \<beta>)
###               ("_tuple_args"
###                 ("_applC" ("_position" evalE)
###                   ("_cargs" ("_position" e) ("_position" s)))
###                 ("_tuple_arg"
###                   ("_applC" ("_position" evalE)
###                     ("_cargs" ("_position" e) ("_position" t))))))
###             ("_position" twiddleVal)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" Expr_low) ("_position" e))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s)
###         ("_idts" ("_position" t) ("_position" \<beta>)))
###       ("\<^const>HOL.implies"
###         ("\<^const>VS_OBJ.twiddleStore_syntax" ("_position" s)
###           ("_position" \<beta>) ("_position" t))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" \<beta>)
###             ("_tuple_args"
###               ("_applC" ("_position" evalE)
###                 ("_cargs" ("_position" e) ("_position" s)))
###               ("_tuple_arg"
###                 ("_applC" ("_position" evalE)
###                   ("_cargs" ("_position" e) ("_position" t))))))
###           ("_position" twiddleVal))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 294 of "$AFP/SIFPL/VS_OBJ.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" BExpr_low) ("_position" b))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s)
###         ("_idts" ("_position" t) ("_position" \<beta>)))
###       ("\<^const>HOL.eq"
###         ("\<^const>VS_OBJ.twiddleStore_syntax" ("_position" s)
###           ("_position" \<beta>)
###           ("\<^const>HOL.implies" ("_position" t)
###             ("_applC" ("_position" evalB)
###               ("_cargs" ("_position" b) ("_position" s)))))
###         ("_applC" ("_position" evalB)
###           ("_cargs" ("_position" b) ("_position" t)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" BExpr_low) ("_position" b))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s)
###         ("_idts" ("_position" t) ("_position" \<beta>)))
###       ("\<^const>VS_OBJ.twiddleStore_syntax" ("_position" s)
###         ("_position" \<beta>)
###         ("\<^const>HOL.implies" ("_position" t)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" evalB)
###               ("_cargs" ("_position" b) ("_position" s)))
###             ("_applC" ("_position" evalB)
###               ("_cargs" ("_position" b) ("_position" t)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" BExpr_low) ("_position" b))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s)
###         ("_idts" ("_position" t) ("_position" \<beta>)))
###       ("\<^const>HOL.implies"
###         ("\<^const>VS_OBJ.twiddleStore_syntax" ("_position" s)
###           ("_position" \<beta>) ("_position" t))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" evalB)
###             ("_cargs" ("_position" b) ("_position" s)))
###           ("_applC" ("_position" evalB)
###             ("_cargs" ("_position" b) ("_position" t))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 304 of "$AFP/SIFPL/VS_OBJ.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" secure) ("_position" c))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s)
###         ("_idts" ("_position" ss)
###           ("_idts" ("_position" t)
###             ("_idts" ("_position" tt) ("_position" \<beta>)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###           ("_position" \<beta>)
###           ("\<^const>HOL.implies" ("_position" ss)
###             ("\<^const>OBJ.Sem" ("_position" s) ("_position" c)
###               ("_position" t))))
###         ("\<^const>HOL.implies"
###           ("\<^const>OBJ.Sem" ("_position" ss) ("_position" c)
###             ("_position" tt))
###           ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###             ("\<^const>HOL.conj"
###               ("\<^const>VS_OBJ.twiddle_syntax" ("_position" t)
###                 ("_position" \<gamma>) ("_position" tt))
###               ("_applC" ("_position" Pbij_extends)
###                 ("_cargs" ("_position" \<gamma>)
###                   ("_position" \<beta>))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" secure) ("_position" c))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s)
###         ("_idts" ("_position" ss)
###           ("_idts" ("_position" t)
###             ("_idts" ("_position" tt) ("_position" \<beta>)))))
###       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###         ("_position" \<beta>)
###         ("\<^const>HOL.implies" ("_position" ss)
###           ("\<^const>HOL.implies"
###             ("\<^const>OBJ.Sem" ("_position" s) ("_position" c)
###               ("_position" t))
###             ("\<^const>HOL.implies"
###               ("\<^const>OBJ.Sem" ("_position" ss) ("_position" c)
###                 ("_position" tt))
###               ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>VS_OBJ.twiddle_syntax" ("_position" t)
###                     ("_position" \<gamma>) ("_position" tt))
###                   ("_applC" ("_position" Pbij_extends)
###                     ("_cargs" ("_position" \<gamma>)
###                       ("_position" \<beta>))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" secure) ("_position" c))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s)
###         ("_idts" ("_position" ss)
###           ("_idts" ("_position" t)
###             ("_idts" ("_position" tt) ("_position" \<beta>)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###           ("_position" \<beta>) ("_position" ss))
###         ("\<^const>HOL.implies"
###           ("\<^const>OBJ.Sem" ("_position" s) ("_position" c)
###             ("_position" t))
###           ("\<^const>HOL.implies"
###             ("\<^const>OBJ.Sem" ("_position" ss) ("_position" c)
###               ("_position" tt))
###             ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###               ("\<^const>HOL.conj"
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" t)
###                   ("_position" \<gamma>) ("_position" tt))
###                 ("_applC" ("_position" Pbij_extends)
###                   ("_cargs" ("_position" \<gamma>)
###                     ("_position" \<beta>)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" secure) ("_position" c))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s)
###         ("_idts" ("_position" ss)
###           ("_idts" ("_position" t)
###             ("_idts" ("_position" tt) ("_position" \<beta>)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###           ("_position" \<beta>)
###           ("\<^const>HOL.implies" ("_position" ss)
###             ("\<^const>HOL.implies"
###               ("\<^const>OBJ.Sem" ("_position" s) ("_position" c)
###                 ("_position" t))
###               ("\<^const>OBJ.Sem" ("_position" ss) ("_position" c)
###                 ("_position" tt)))))
###         ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###           ("\<^const>HOL.conj"
###             ("\<^const>VS_OBJ.twiddle_syntax" ("_position" t)
###               ("_position" \<gamma>) ("_position" tt))
###             ("_applC" ("_position" Pbij_extends)
###               ("_cargs" ("_position" \<gamma>) ("_position" \<beta>)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" secure) ("_position" c))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s)
###         ("_idts" ("_position" ss)
###           ("_idts" ("_position" t)
###             ("_idts" ("_position" tt) ("_position" \<beta>)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###           ("_position" \<beta>)
###           ("\<^const>HOL.implies" ("_position" ss)
###             ("\<^const>OBJ.Sem" ("_position" s) ("_position" c)
###               ("_position" t))))
###         ("\<^const>HOL.implies"
###           ("\<^const>OBJ.Sem" ("_position" ss) ("_position" c)
###             ("_position" tt))
###           ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###             ("\<^const>VS_OBJ.twiddle_syntax" ("_position" t)
###               ("_position" \<gamma>)
###               ("\<^const>HOL.conj" ("_position" tt)
###                 ("_applC" ("_position" Pbij_extends)
###                   ("_cargs" ("_position" \<gamma>)
###                     ("_position" \<beta>)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" secure) ("_position" c))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s)
###         ("_idts" ("_position" ss)
###           ("_idts" ("_position" t)
###             ("_idts" ("_position" tt) ("_position" \<beta>)))))
###       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###         ("_position" \<beta>)
###         ("\<^const>HOL.implies" ("_position" ss)
###           ("\<^const>HOL.implies"
###             ("\<^const>OBJ.Sem" ("_position" s) ("_position" c)
###               ("_position" t))
###             ("\<^const>HOL.implies"
###               ("\<^const>OBJ.Sem" ("_position" ss) ("_position" c)
###                 ("_position" tt))
###               ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" t)
###                   ("_position" \<gamma>)
###                   ("\<^const>HOL.conj" ("_position" tt)
###                     ("_applC" ("_position" Pbij_extends)
###                       ("_cargs" ("_position" \<gamma>)
###                         ("_position" \<beta>)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" secure) ("_position" c))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s)
###         ("_idts" ("_position" ss)
###           ("_idts" ("_position" t)
###             ("_idts" ("_position" tt) ("_position" \<beta>)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###           ("_position" \<beta>) ("_position" ss))
###         ("\<^const>HOL.implies"
###           ("\<^const>OBJ.Sem" ("_position" s) ("_position" c)
###             ("_position" t))
###           ("\<^const>HOL.implies"
###             ("\<^const>OBJ.Sem" ("_position" ss) ("_position" c)
###               ("_position" tt))
###             ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###               ("\<^const>VS_OBJ.twiddle_syntax" ("_position" t)
###                 ("_position" \<gamma>)
###                 ("\<^const>HOL.conj" ("_position" tt)
###                   ("_applC" ("_position" Pbij_extends)
###                     ("_cargs" ("_position" \<gamma>)
###                       ("_position" \<beta>))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" secure) ("_position" c))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s)
###         ("_idts" ("_position" ss)
###           ("_idts" ("_position" t)
###             ("_idts" ("_position" tt) ("_position" \<beta>)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###           ("_position" \<beta>)
###           ("\<^const>HOL.implies" ("_position" ss)
###             ("\<^const>HOL.implies"
###               ("\<^const>OBJ.Sem" ("_position" s) ("_position" c)
###                 ("_position" t))
###               ("\<^const>OBJ.Sem" ("_position" ss) ("_position" c)
###                 ("_position" tt)))))
###         ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###           ("\<^const>VS_OBJ.twiddle_syntax" ("_position" t)
###             ("_position" \<gamma>)
###             ("\<^const>HOL.conj" ("_position" tt)
###               ("_applC" ("_position" Pbij_extends)
###                 ("_cargs" ("_position" \<gamma>)
###                   ("_position" \<beta>))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 444 of "$AFP/SIFPL/VS_OBJ.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Sec)
###       ("_cargs" ("_position" \<Phi>)
###         ("_cargs" ("_position" s) ("_position" t))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" r) ("_position" \<beta>))
###         ("\<^const>HOL.implies"
###           ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###             ("_position" \<beta>) ("_position" r))
###           ("_applC" ("_position" \<Phi>)
###             ("_tuple" ("_position" t)
###               ("_tuple_args" ("_position" r)
###                 ("_tuple_arg" ("_position" \<beta>)))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" r) ("_position" \<beta>))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" \<Phi>)
###             ("_tuple" ("_position" r)
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" \<beta>)))))
###           ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###             ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###               ("_position" \<gamma>)
###               ("\<^const>HOL.conj" ("_position" t)
###                 ("_applC" ("_position" Pbij_extends)
###                   ("_cargs" ("_position" \<gamma>)
###                     ("_position" \<beta>)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Sec)
###       ("_cargs" ("_position" \<Phi>)
###         ("_cargs" ("_position" s) ("_position" t))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" r) ("_position" \<beta>))
###         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###           ("_position" \<beta>)
###           ("\<^const>HOL.implies" ("_position" r)
###             ("_applC" ("_position" \<Phi>)
###               ("_tuple" ("_position" t)
###                 ("_tuple_args" ("_position" r)
###                   ("_tuple_arg" ("_position" \<beta>))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" r) ("_position" \<beta>))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" \<Phi>)
###             ("_tuple" ("_position" r)
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" \<beta>)))))
###           ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###             ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###               ("_position" \<gamma>)
###               ("\<^const>HOL.conj" ("_position" t)
###                 ("_applC" ("_position" Pbij_extends)
###                   ("_cargs" ("_position" \<gamma>)
###                     ("_position" \<beta>)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Sec)
###       ("_cargs" ("_position" \<Phi>)
###         ("_cargs" ("_position" s) ("_position" t))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" r) ("_position" \<beta>))
###         ("\<^const>HOL.implies"
###           ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###             ("_position" \<beta>) ("_position" r))
###           ("_applC" ("_position" \<Phi>)
###             ("_tuple" ("_position" t)
###               ("_tuple_args" ("_position" r)
###                 ("_tuple_arg" ("_position" \<beta>)))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" r) ("_position" \<beta>))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" \<Phi>)
###             ("_tuple" ("_position" r)
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" \<beta>)))))
###           ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###             ("\<^const>HOL.conj"
###               ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                 ("_position" \<gamma>) ("_position" t))
###               ("_applC" ("_position" Pbij_extends)
###                 ("_cargs" ("_position" \<gamma>)
###                   ("_position" \<beta>))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Sec)
###       ("_cargs" ("_position" \<Phi>)
###         ("_cargs" ("_position" s) ("_position" t))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" r) ("_position" \<beta>))
###         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###           ("_position" \<beta>)
###           ("\<^const>HOL.implies" ("_position" r)
###             ("_applC" ("_position" \<Phi>)
###               ("_tuple" ("_position" t)
###                 ("_tuple_args" ("_position" r)
###                   ("_tuple_arg" ("_position" \<beta>))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" r) ("_position" \<beta>))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" \<Phi>)
###             ("_tuple" ("_position" r)
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" \<beta>)))))
###           ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###             ("\<^const>HOL.conj"
###               ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                 ("_position" \<gamma>) ("_position" t))
###               ("_applC" ("_position" Pbij_extends)
###                 ("_cargs" ("_position" \<gamma>)
###                   ("_position" \<beta>))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 452 of "$AFP/SIFPL/VS_OBJ.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid" ("_position" c)
###       ("_applC" ("_position" Sec) ("_position" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member" ("_position" c)
###         ("_applC" ("_position" Sec) ("_position" \<Phi>)))))
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 466 of "$AFP/SIFPL/VS_OBJ.thy") produces 18 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid" ("_position" c)
###       ("_applC" ("_position" Sec)
###         ("\<^const>HOL.conj"
###           ("\<^const>OBJ.Sem"
###             ("_lambda"
###               ("_pattern" ("_position" r)
###                 ("_patterns" ("_position" t) ("_position" \<beta>)))
###               ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" s)))
###             ("_position" c) ("_position" r))
###           ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###             ("_position" \<beta>) ("_position" t)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member" ("_position" c)
###         ("_applC" ("_position" Sec)
###           ("\<^const>HOL.conj"
###             ("\<^const>OBJ.Sem"
###               ("_lambda"
###                 ("_pattern" ("_position" r)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" s)))
###               ("_position" c) ("_position" r))
###             ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###               ("_position" \<beta>) ("_position" t))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid" ("_position" c)
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" r)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder" ("_position" s)
###             ("\<^const>HOL.conj"
###               ("\<^const>OBJ.Sem" ("_position" s) ("_position" c)
###                 ("_position" r))
###               ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                 ("_position" \<beta>) ("_position" t)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member" ("_position" c)
###         ("_applC" ("_position" Sec)
###           ("_lambda"
###             ("_pattern" ("_position" r)
###               ("_patterns" ("_position" t) ("_position" \<beta>)))
###             ("\<^const>HOL.Ex_binder" ("_position" s)
###               ("\<^const>HOL.conj"
###                 ("\<^const>OBJ.Sem" ("_position" s) ("_position" c)
###                   ("_position" r))
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                   ("_position" \<beta>) ("_position" t))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid" ("_position" c)
###       ("_applC" ("_position" Sec)
###         ("\<^const>OBJ.Sem"
###           ("_lambda"
###             ("_pattern" ("_position" r)
###               ("_patterns" ("_position" t) ("_position" \<beta>)))
###             ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" s)))
###           ("_position" c)
###           ("\<^const>HOL.conj" ("_position" r)
###             ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###               ("_position" \<beta>) ("_position" t))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member" ("_position" c)
###         ("_applC" ("_position" Sec)
###           ("\<^const>OBJ.Sem"
###             ("_lambda"
###               ("_pattern" ("_position" r)
###                 ("_patterns" ("_position" t) ("_position" \<beta>)))
###               ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" s)))
###             ("_position" c)
###             ("\<^const>HOL.conj" ("_position" r)
###               ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                 ("_position" \<beta>) ("_position" t)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid" ("_position" c)
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" r)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder" ("_position" s)
###             ("\<^const>OBJ.Sem" ("_position" s) ("_position" c)
###               ("\<^const>HOL.conj" ("_position" r)
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                   ("_position" \<beta>) ("_position" t))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member" ("_position" c)
###         ("_applC" ("_position" Sec)
###           ("_lambda"
###             ("_pattern" ("_position" r)
###               ("_patterns" ("_position" t) ("_position" \<beta>)))
###             ("\<^const>HOL.Ex_binder" ("_position" s)
###               ("\<^const>OBJ.Sem" ("_position" s) ("_position" c)
###                 ("\<^const>HOL.conj" ("_position" r)
###                   ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                     ("_position" \<beta>) ("_position" t)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid" ("_position" c)
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" r)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>OBJ.Sem"
###             ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" s))
###             ("_position" c)
###             ("\<^const>HOL.conj" ("_position" r)
###               ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                 ("_position" \<beta>) ("_position" t)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member" ("_position" c)
###         ("_applC" ("_position" Sec)
###           ("_lambda"
###             ("_pattern" ("_position" r)
###               ("_patterns" ("_position" t) ("_position" \<beta>)))
###             ("\<^const>OBJ.Sem"
###               ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" s))
###               ("_position" c)
###               ("\<^const>HOL.conj" ("_position" r)
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                   ("_position" \<beta>) ("_position" t))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 489 of "$AFP/SIFPL/VS_OBJ.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<Phi>)
###       ("\<^const>VDM_OBJ.VDM_valid" ("_position" c)
###         ("_applC" ("_position" Sec) ("_position" \<Phi>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<Phi>)
###       ("\<^const>VDM_OBJ.Ctxt_valid"
###         ("\<^const>Set.member" ("_position" c)
###           ("_applC" ("_position" Sec) ("_position" \<Phi>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 495 of "$AFP/SIFPL/VS_OBJ.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" secure) ("_position" c))
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member" ("_position" c)
###         ("_applC" ("_position" Sec)
###           ("_lambda"
###             ("_pattern" ("_position" r)
###               ("_patterns" ("_position" t) ("_position" \<beta>)))
###             ("\<^const>HOL.Ex_binder" ("_position" s)
###               ("\<^const>HOL.conj"
###                 ("\<^const>OBJ.Sem" ("_position" s) ("_position" c)
###                   ("_position" r))
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                   ("_position" \<beta>) ("_position" t))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" secure) ("_position" c))
###     ("\<^const>VDM_OBJ.VDM_valid" ("_position" c)
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" r)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder" ("_position" s)
###             ("\<^const>HOL.conj"
###               ("\<^const>OBJ.Sem" ("_position" s) ("_position" c)
###                 ("_position" r))
###               ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                 ("_position" \<beta>) ("_position" t)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 507 of "$AFP/SIFPL/VS_OBJ.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>VDM_OBJ.VDM_valid" ("_position" Skip)
###     ("_applC" ("_position" Sec)
###       ("_lambda"
###         ("_pattern" ("_position" s)
###           ("_patterns" ("_position" t) ("_position" \<beta>)))
###         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###           ("_position" \<beta>) ("_position" t))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>VDM_OBJ.Ctxt_valid"
###     ("\<^const>Set.member" ("_position" Skip)
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###             ("_position" \<beta>) ("_position" t)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 585 of "$AFP/SIFPL/VS_OBJ.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM_OBJ.Ctxt_valid"
###         ("\<^const>Set.member" ("_position" c1)
###           ("_applC" ("_position" Sec) ("_position" \<Phi>)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.Ctxt_valid"
###           ("\<^const>Set.member" ("_position" c2)
###             ("_applC" ("_position" Sec) ("_position" \<Psi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid"
###       ("_applC" ("_position" Comp)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder" ("_position" r)
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" \<Phi>)
###                 ("_tuple" ("_position" r)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>)))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" w) ("_position" \<gamma>))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                     ("_position" \<gamma>) ("_position" w))
###                   ("_applC" ("_position" \<Psi>)
###                     ("_tuple" ("_position" s)
###                       ("_tuple_args" ("_position" w)
###                         ("_tuple_arg" ("_position" \<gamma>))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM_OBJ.VDM_valid" ("_position" c1)
###         ("_applC" ("_position" Sec) ("_position" \<Phi>))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.Ctxt_valid"
###           ("\<^const>Set.member" ("_position" c2)
###             ("_applC" ("_position" Sec) ("_position" \<Psi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid"
###       ("_applC" ("_position" Comp)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder" ("_position" r)
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" \<Phi>)
###                 ("_tuple" ("_position" r)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>)))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" w) ("_position" \<gamma>))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                     ("_position" \<gamma>) ("_position" w))
###                   ("_applC" ("_position" \<Psi>)
###                     ("_tuple" ("_position" s)
###                       ("_tuple_args" ("_position" w)
###                         ("_tuple_arg" ("_position" \<gamma>))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM_OBJ.Ctxt_valid"
###         ("\<^const>Set.member" ("_position" c1)
###           ("_applC" ("_position" Sec) ("_position" \<Phi>)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.VDM_valid" ("_position" c2)
###           ("_applC" ("_position" Sec) ("_position" \<Psi>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid"
###       ("_applC" ("_position" Comp)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder" ("_position" r)
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" \<Phi>)
###                 ("_tuple" ("_position" r)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>)))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" w) ("_position" \<gamma>))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                     ("_position" \<gamma>) ("_position" w))
###                   ("_applC" ("_position" \<Psi>)
###                     ("_tuple" ("_position" s)
###                       ("_tuple_args" ("_position" w)
###                         ("_tuple_arg" ("_position" \<gamma>))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM_OBJ.VDM_valid" ("_position" c1)
###         ("_applC" ("_position" Sec) ("_position" \<Phi>))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.VDM_valid" ("_position" c2)
###           ("_applC" ("_position" Sec) ("_position" \<Psi>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid"
###       ("_applC" ("_position" Comp)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder" ("_position" r)
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" \<Phi>)
###                 ("_tuple" ("_position" r)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>)))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" w) ("_position" \<gamma>))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                     ("_position" \<gamma>) ("_position" w))
###                   ("_applC" ("_position" \<Psi>)
###                     ("_tuple" ("_position" s)
###                       ("_tuple_args" ("_position" w)
###                         ("_tuple_arg" ("_position" \<gamma>))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM_OBJ.Ctxt_valid"
###         ("\<^const>Set.member" ("_position" c1)
###           ("_applC" ("_position" Sec) ("_position" \<Phi>)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.Ctxt_valid"
###           ("\<^const>Set.member" ("_position" c2)
###             ("_applC" ("_position" Sec) ("_position" \<Psi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" Comp)
###           ("_cargs" ("_position" c1) ("_position" c2)))
###         ("_applC" ("_position" Sec)
###           ("_lambda"
###             ("_pattern" ("_position" s)
###               ("_patterns" ("_position" t) ("_position" \<beta>)))
###             ("\<^const>HOL.Ex_binder" ("_position" r)
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<Phi>)
###                   ("_tuple" ("_position" r)
###                     ("_tuple_args" ("_position" t)
###                       ("_tuple_arg" ("_position" \<beta>)))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" w) ("_position" \<gamma>))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                       ("_position" \<gamma>) ("_position" w))
###                     ("_applC" ("_position" \<Psi>)
###                       ("_tuple" ("_position" s)
###                         ("_tuple_args" ("_position" w)
###                           ("_tuple_arg" ("_position" \<gamma>)))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM_OBJ.VDM_valid" ("_position" c1)
###         ("_applC" ("_position" Sec) ("_position" \<Phi>))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.Ctxt_valid"
###           ("\<^const>Set.member" ("_position" c2)
###             ("_applC" ("_position" Sec) ("_position" \<Psi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" Comp)
###           ("_cargs" ("_position" c1) ("_position" c2)))
###         ("_applC" ("_position" Sec)
###           ("_lambda"
###             ("_pattern" ("_position" s)
###               ("_patterns" ("_position" t) ("_position" \<beta>)))
###             ("\<^const>HOL.Ex_binder" ("_position" r)
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<Phi>)
###                   ("_tuple" ("_position" r)
###                     ("_tuple_args" ("_position" t)
###                       ("_tuple_arg" ("_position" \<beta>)))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" w) ("_position" \<gamma>))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                       ("_position" \<gamma>) ("_position" w))
###                     ("_applC" ("_position" \<Psi>)
###                       ("_tuple" ("_position" s)
###                         ("_tuple_args" ("_position" w)
###                           ("_tuple_arg" ("_position" \<gamma>)))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM_OBJ.Ctxt_valid"
###         ("\<^const>Set.member" ("_position" c1)
###           ("_applC" ("_position" Sec) ("_position" \<Phi>)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.VDM_valid" ("_position" c2)
###           ("_applC" ("_position" Sec) ("_position" \<Psi>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" Comp)
###           ("_cargs" ("_position" c1) ("_position" c2)))
###         ("_applC" ("_position" Sec)
###           ("_lambda"
###             ("_pattern" ("_position" s)
###               ("_patterns" ("_position" t) ("_position" \<beta>)))
###             ("\<^const>HOL.Ex_binder" ("_position" r)
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<Phi>)
###                   ("_tuple" ("_position" r)
###                     ("_tuple_args" ("_position" t)
###                       ("_tuple_arg" ("_position" \<beta>)))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" w) ("_position" \<gamma>))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                       ("_position" \<gamma>) ("_position" w))
###                     ("_applC" ("_position" \<Psi>)
###                       ("_tuple" ("_position" s)
###                         ("_tuple_args" ("_position" w)
###                           ("_tuple_arg" ("_position" \<gamma>)))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM_OBJ.VDM_valid" ("_position" c1)
###         ("_applC" ("_position" Sec) ("_position" \<Phi>))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.VDM_valid" ("_position" c2)
###           ("_applC" ("_position" Sec) ("_position" \<Psi>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" Comp)
###           ("_cargs" ("_position" c1) ("_position" c2)))
###         ("_applC" ("_position" Sec)
###           ("_lambda"
###             ("_pattern" ("_position" s)
###               ("_patterns" ("_position" t) ("_position" \<beta>)))
###             ("\<^const>HOL.Ex_binder" ("_position" r)
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<Phi>)
###                   ("_tuple" ("_position" r)
###                     ("_tuple_args" ("_position" t)
###                       ("_tuple_arg" ("_position" \<beta>)))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" w) ("_position" \<gamma>))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                       ("_position" \<gamma>) ("_position" w))
###                     ("_applC" ("_position" \<Psi>)
###                       ("_tuple" ("_position" s)
###                         ("_tuple_args" ("_position" w)
###                           ("_tuple_arg" ("_position" \<gamma>)))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM_OBJ.Ctxt_valid"
###         ("\<^const>Set.member" ("_position" c1)
###           ("_applC" ("_position" Sec) ("_position" \<Phi>)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.Ctxt_valid"
###           ("\<^const>Set.member" ("_position" c2)
###             ("_applC" ("_position" Sec) ("_position" \<Psi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid"
###       ("_applC" ("_position" Comp)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder" ("_position" r)
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" \<Phi>)
###                 ("_tuple" ("_position" r)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>)))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" w) ("_position" \<gamma>))
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                   ("_position" \<gamma>)
###                   ("\<^const>HOL.implies" ("_position" w)
###                     ("_applC" ("_position" \<Psi>)
###                       ("_tuple" ("_position" s)
###                         ("_tuple_args" ("_position" w)
###                           ("_tuple_arg" ("_position" \<gamma>)))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM_OBJ.VDM_valid" ("_position" c1)
###         ("_applC" ("_position" Sec) ("_position" \<Phi>))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.Ctxt_valid"
###           ("\<^const>Set.member" ("_position" c2)
###             ("_applC" ("_position" Sec) ("_position" \<Psi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid"
###       ("_applC" ("_position" Comp)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder" ("_position" r)
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" \<Phi>)
###                 ("_tuple" ("_position" r)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>)))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" w) ("_position" \<gamma>))
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                   ("_position" \<gamma>)
###                   ("\<^const>HOL.implies" ("_position" w)
###                     ("_applC" ("_position" \<Psi>)
###                       ("_tuple" ("_position" s)
###                         ("_tuple_args" ("_position" w)
###                           ("_tuple_arg" ("_position" \<gamma>)))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 633 of "$AFP/SIFPL/VS_OBJ.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G) ("_position" c1)
###         ("_applC" ("_position" Sec) ("_position" \<Phi>))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G) ("_position" c2)
###           ("_applC" ("_position" Sec) ("_position" \<Psi>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G)
###       ("_applC" ("_position" Comp)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder" ("_position" r)
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" \<Phi>)
###                 ("_tuple" ("_position" r)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>)))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" w) ("_position" \<gamma>))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                     ("_position" \<gamma>) ("_position" w))
###                   ("_applC" ("_position" \<Psi>)
###                     ("_tuple" ("_position" s)
###                       ("_tuple_args" ("_position" w)
###                         ("_tuple_arg" ("_position" \<gamma>))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G) ("_position" c1)
###         ("_applC" ("_position" Sec) ("_position" \<Phi>))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G) ("_position" c2)
###           ("_applC" ("_position" Sec) ("_position" \<Psi>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G)
###       ("_applC" ("_position" Comp)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder" ("_position" r)
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" \<Phi>)
###                 ("_tuple" ("_position" r)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>)))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" w) ("_position" \<gamma>))
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                   ("_position" \<gamma>)
###                   ("\<^const>HOL.implies" ("_position" w)
###                     ("_applC" ("_position" \<Psi>)
###                       ("_tuple" ("_position" s)
###                         ("_tuple_args" ("_position" w)
###                           ("_tuple_arg" ("_position" \<gamma>)))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 678 of "$AFP/SIFPL/VS_OBJ.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" BExpr_low) ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.Ctxt_valid"
###           ("\<^const>Set.member" ("_position" c1)
###             ("_applC" ("_position" Sec) ("_position" \<Phi>)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>VDM_OBJ.Ctxt_valid"
###             ("\<^const>Set.member" ("_position" c2)
###               ("_applC" ("_position" Sec) ("_position" \<Psi>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid"
###       ("_applC" ("_position" Iff)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c1) ("_position" c2))))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" t))))
###               ("_applC" ("_position" \<Phi>)
###                 ("_tuple" ("_position" s)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>))))))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" evalB)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" fst) ("_position" t)))))
###               ("_applC" ("_position" \<Psi>)
###                 ("_tuple" ("_position" s)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" BExpr_low) ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.VDM_valid" ("_position" c1)
###           ("_applC" ("_position" Sec) ("_position" \<Phi>))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>VDM_OBJ.Ctxt_valid"
###             ("\<^const>Set.member" ("_position" c2)
###               ("_applC" ("_position" Sec) ("_position" \<Psi>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid"
###       ("_applC" ("_position" Iff)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c1) ("_position" c2))))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" t))))
###               ("_applC" ("_position" \<Phi>)
###                 ("_tuple" ("_position" s)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>))))))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" evalB)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" fst) ("_position" t)))))
###               ("_applC" ("_position" \<Psi>)
###                 ("_tuple" ("_position" s)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" BExpr_low) ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.Ctxt_valid"
###           ("\<^const>Set.member" ("_position" c1)
###             ("_applC" ("_position" Sec) ("_position" \<Phi>)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>VDM_OBJ.VDM_valid" ("_position" c2)
###             ("_applC" ("_position" Sec) ("_position" \<Psi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid"
###       ("_applC" ("_position" Iff)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c1) ("_position" c2))))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" t))))
###               ("_applC" ("_position" \<Phi>)
###                 ("_tuple" ("_position" s)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>))))))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" evalB)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" fst) ("_position" t)))))
###               ("_applC" ("_position" \<Psi>)
###                 ("_tuple" ("_position" s)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" BExpr_low) ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.VDM_valid" ("_position" c1)
###           ("_applC" ("_position" Sec) ("_position" \<Phi>))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>VDM_OBJ.VDM_valid" ("_position" c2)
###             ("_applC" ("_position" Sec) ("_position" \<Psi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid"
###       ("_applC" ("_position" Iff)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c1) ("_position" c2))))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" t))))
###               ("_applC" ("_position" \<Phi>)
###                 ("_tuple" ("_position" s)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>))))))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" evalB)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" fst) ("_position" t)))))
###               ("_applC" ("_position" \<Psi>)
###                 ("_tuple" ("_position" s)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" BExpr_low) ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.Ctxt_valid"
###           ("\<^const>Set.member" ("_position" c1)
###             ("_applC" ("_position" Sec) ("_position" \<Phi>)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>VDM_OBJ.Ctxt_valid"
###             ("\<^const>Set.member" ("_position" c2)
###               ("_applC" ("_position" Sec) ("_position" \<Psi>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" Iff)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c1) ("_position" c2))))
###         ("_applC" ("_position" Sec)
###           ("_lambda"
###             ("_pattern" ("_position" s)
###               ("_patterns" ("_position" t) ("_position" \<beta>)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" evalB)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" fst) ("_position" t))))
###                 ("_applC" ("_position" \<Phi>)
###                   ("_tuple" ("_position" s)
###                     ("_tuple_args" ("_position" t)
###                       ("_tuple_arg" ("_position" \<beta>))))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" evalB)
###                     ("_cargs" ("_position" b)
###                       ("_applC" ("_position" fst) ("_position" t)))))
###                 ("_applC" ("_position" \<Psi>)
###                   ("_tuple" ("_position" s)
###                     ("_tuple_args" ("_position" t)
###                       ("_tuple_arg" ("_position" \<beta>)))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" BExpr_low) ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.VDM_valid" ("_position" c1)
###           ("_applC" ("_position" Sec) ("_position" \<Phi>))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>VDM_OBJ.Ctxt_valid"
###             ("\<^const>Set.member" ("_position" c2)
###               ("_applC" ("_position" Sec) ("_position" \<Psi>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" Iff)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c1) ("_position" c2))))
###         ("_applC" ("_position" Sec)
###           ("_lambda"
###             ("_pattern" ("_position" s)
###               ("_patterns" ("_position" t) ("_position" \<beta>)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" evalB)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" fst) ("_position" t))))
###                 ("_applC" ("_position" \<Phi>)
###                   ("_tuple" ("_position" s)
###                     ("_tuple_args" ("_position" t)
###                       ("_tuple_arg" ("_position" \<beta>))))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" evalB)
###                     ("_cargs" ("_position" b)
###                       ("_applC" ("_position" fst) ("_position" t)))))
###                 ("_applC" ("_position" \<Psi>)
###                   ("_tuple" ("_position" s)
###                     ("_tuple_args" ("_position" t)
###                       ("_tuple_arg" ("_position" \<beta>)))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" BExpr_low) ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.Ctxt_valid"
###           ("\<^const>Set.member" ("_position" c1)
###             ("_applC" ("_position" Sec) ("_position" \<Phi>)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>VDM_OBJ.VDM_valid" ("_position" c2)
###             ("_applC" ("_position" Sec) ("_position" \<Psi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" Iff)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c1) ("_position" c2))))
###         ("_applC" ("_position" Sec)
###           ("_lambda"
###             ("_pattern" ("_position" s)
###               ("_patterns" ("_position" t) ("_position" \<beta>)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" evalB)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" fst) ("_position" t))))
###                 ("_applC" ("_position" \<Phi>)
###                   ("_tuple" ("_position" s)
###                     ("_tuple_args" ("_position" t)
###                       ("_tuple_arg" ("_position" \<beta>))))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" evalB)
###                     ("_cargs" ("_position" b)
###                       ("_applC" ("_position" fst) ("_position" t)))))
###                 ("_applC" ("_position" \<Psi>)
###                   ("_tuple" ("_position" s)
###                     ("_tuple_args" ("_position" t)
###                       ("_tuple_arg" ("_position" \<beta>)))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" BExpr_low) ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.VDM_valid" ("_position" c1)
###           ("_applC" ("_position" Sec) ("_position" \<Phi>))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>VDM_OBJ.VDM_valid" ("_position" c2)
###             ("_applC" ("_position" Sec) ("_position" \<Psi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" Iff)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c1) ("_position" c2))))
###         ("_applC" ("_position" Sec)
###           ("_lambda"
###             ("_pattern" ("_position" s)
###               ("_patterns" ("_position" t) ("_position" \<beta>)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" evalB)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" fst) ("_position" t))))
###                 ("_applC" ("_position" \<Phi>)
###                   ("_tuple" ("_position" s)
###                     ("_tuple_args" ("_position" t)
###                       ("_tuple_arg" ("_position" \<beta>))))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" evalB)
###                     ("_cargs" ("_position" b)
###                       ("_applC" ("_position" fst) ("_position" t)))))
###                 ("_applC" ("_position" \<Psi>)
###                   ("_tuple" ("_position" s)
###                     ("_tuple_args" ("_position" t)
###                       ("_tuple_arg" ("_position" \<beta>)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 763 of "$AFP/SIFPL/VS_OBJ.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###       ("_position" low)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G)
###       ("_applC" ("_position" New)
###         ("_cargs" ("_position" x) ("_position" C)))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" l) ("_position" r))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member" ("_position" l)
###                 ("_applC" ("_position" Dom)
###                   ("_applC" ("_position" snd) ("_position" r))))
###               ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                 ("_position" \<beta>)
###                 ("\<^const>HOL.conj" ("_position" t)
###                   ("\<^const>HOL.eq" ("_position" s)
###                     ("_tuple"
###                       ("_applC" ("_position" update)
###                         ("_cargs"
###                           ("_applC" ("_position" fst) ("_position" r))
###                           ("_cargs" ("_position" x)
###                             ("_applC" ("_position" RVal)
###                               ("_applC" ("_position" Loc)
###                                 ("_position" l))))))
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" l)
###                             ("_tuple_arg"
###                               ("_tuple" ("_position" C)
###                                 ("_tuple_arg" ("\<^const>List.list.Nil")))))
###                           ("_applC" ("_position" snd)
###                             ("_position" r)))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###       ("_position" low)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G)
###       ("_applC" ("_position" New)
###         ("_cargs" ("_position" x) ("_position" C)))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" l) ("_position" r))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member" ("_position" l)
###                 ("_applC" ("_position" Dom)
###                   ("_applC" ("_position" snd) ("_position" r))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                   ("_position" \<beta>) ("_position" t))
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_tuple"
###                     ("_applC" ("_position" update)
###                       ("_cargs" ("_applC" ("_position" fst) ("_position" r))
###                         ("_cargs" ("_position" x)
###                           ("_applC" ("_position" RVal)
###                             ("_applC" ("_position" Loc) ("_position" l))))))
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" l)
###                           ("_tuple_arg"
###                             ("_tuple" ("_position" C)
###                               ("_tuple_arg" ("\<^const>List.list.Nil")))))
###                         ("_applC" ("_position" snd)
###                           ("_position" r))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###       ("_position" low)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G)
###       ("_applC" ("_position" New)
###         ("_cargs" ("_position" x) ("_position" C)))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" l) ("_position" r))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member" ("_position" l)
###                 ("_applC" ("_position" Dom)
###                   ("_applC" ("_position" snd) ("_position" r))))
###               ("\<^const>HOL.eq"
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                   ("_position" \<beta>)
###                   ("\<^const>HOL.conj" ("_position" t) ("_position" s)))
###                 ("_tuple"
###                   ("_applC" ("_position" update)
###                     ("_cargs" ("_applC" ("_position" fst) ("_position" r))
###                       ("_cargs" ("_position" x)
###                         ("_applC" ("_position" RVal)
###                           ("_applC" ("_position" Loc) ("_position" l))))))
###                   ("_tuple_arg"
###                     ("\<^const>List.list.Cons"
###                       ("_tuple" ("_position" l)
###                         ("_tuple_arg"
###                           ("_tuple" ("_position" C)
###                             ("_tuple_arg" ("\<^const>List.list.Nil")))))
###                       ("_applC" ("_position" snd)
###                         ("_position" r)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 823 of "$AFP/SIFPL/VS_OBJ.thy") produces 3 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" y))
###         ("_position" low)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G)
###       ("_applC" ("_position" Get)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" y) ("_position" f))))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" C)
###                   ("_idts" ("_position" Flds) ("_position" v)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                   ("_position" y))
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" l))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" lookup)
###                     ("_cargs" ("_applC" ("_position" snd) ("_position" r))
###                       ("_position" l)))
###                   ("_applC" ("_position" Some)
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" Flds)))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" lookup)
###                       ("_cargs" ("_position" Flds) ("_position" f)))
###                     ("_applC" ("_position" Some) ("_position" v)))
###                   ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                     ("_position" \<beta>)
###                     ("\<^const>HOL.conj" ("_position" t)
###                       ("\<^const>HOL.eq" ("_position" s)
###                         ("_tuple"
###                           ("_applC" ("_position" update)
###                             ("_cargs"
###                               ("_applC" ("_position" fst) ("_position" r))
###                               ("_cargs" ("_position" x) ("_position" v))))
###                           ("_tuple_arg"
###                             ("_applC" ("_position" snd)
###                               ("_position" r))))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" y))
###         ("_position" low)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G)
###       ("_applC" ("_position" Get)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" y) ("_position" f))))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" C)
###                   ("_idts" ("_position" Flds) ("_position" v)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                   ("_position" y))
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" l))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" lookup)
###                     ("_cargs" ("_applC" ("_position" snd) ("_position" r))
###                       ("_position" l)))
###                   ("_applC" ("_position" Some)
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" Flds)))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" lookup)
###                       ("_cargs" ("_position" Flds) ("_position" f)))
###                     ("_applC" ("_position" Some) ("_position" v)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                       ("_position" \<beta>) ("_position" t))
###                     ("\<^const>HOL.eq" ("_position" s)
###                       ("_tuple"
###                         ("_applC" ("_position" update)
###                           ("_cargs"
###                             ("_applC" ("_position" fst) ("_position" r))
###                             ("_cargs" ("_position" x) ("_position" v))))
###                         ("_tuple_arg"
###                           ("_applC" ("_position" snd)
###                             ("_position" r)))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" y))
###         ("_position" low)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G)
###       ("_applC" ("_position" Get)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" y) ("_position" f))))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" C)
###                   ("_idts" ("_position" Flds) ("_position" v)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                   ("_position" y))
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" l))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" lookup)
###                     ("_cargs" ("_applC" ("_position" snd) ("_position" r))
###                       ("_position" l)))
###                   ("_applC" ("_position" Some)
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" Flds)))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" lookup)
###                       ("_cargs" ("_position" Flds) ("_position" f)))
###                     ("_applC" ("_position" Some) ("_position" v)))
###                   ("\<^const>HOL.eq"
###                     ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                       ("_position" \<beta>)
###                       ("\<^const>HOL.conj" ("_position" t) ("_position" s)))
###                     ("_tuple"
###                       ("_applC" ("_position" update)
###                         ("_cargs"
###                           ("_applC" ("_position" fst) ("_position" r))
###                           ("_cargs" ("_position" x) ("_position" v))))
###                       ("_tuple_arg"
###                         ("_applC" ("_position" snd)
###                           ("_position" r))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 871 of "$AFP/SIFPL/VS_OBJ.thy") produces 5 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###         ("_position" low)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" Expr_low) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G)
###       ("_applC" ("_position" Put)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" f) ("_position" e))))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" C) ("_position" Flds))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                   ("_position" x))
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" l))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                     ("_position" \<beta>)
###                     ("\<^const>HOL.conj" ("_position" t)
###                       ("_applC" ("_position" lookup)
###                         ("_cargs"
###                           ("_applC" ("_position" snd) ("_position" r))
###                           ("_position" l)))))
###                   ("_applC" ("_position" Some)
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" Flds)))))
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_tuple" ("_applC" ("_position" fst) ("_position" r))
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" l)
###                           ("_tuple_arg"
###                             ("_tuple" ("_position" C)
###                               ("_tuple_arg"
###                                 ("\<^const>List.list.Cons"
###                                   ("_tuple" ("_position" f)
###                                     ("_tuple_arg"
### ("_applC" ("_position" evalE)
###   ("_cargs" ("_position" e) ("_applC" ("_position" fst) ("_position" r))))))
###                                   ("_position" Flds))))))
###                         ("_applC" ("_position" snd)
###                           ("_position" r))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###         ("_position" low)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" Expr_low) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G)
###       ("_applC" ("_position" Put)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" f) ("_position" e))))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" C) ("_position" Flds))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                   ("_position" x))
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" l))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                   ("_position" \<beta>)
###                   ("\<^const>HOL.conj" ("_position" t)
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" lookup)
###                         ("_cargs"
###                           ("_applC" ("_position" snd) ("_position" r))
###                           ("_position" l)))
###                       ("_applC" ("_position" Some)
###                         ("_tuple" ("_position" C)
###                           ("_tuple_arg" ("_position" Flds)))))))
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_tuple" ("_applC" ("_position" fst) ("_position" r))
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" l)
###                           ("_tuple_arg"
###                             ("_tuple" ("_position" C)
###                               ("_tuple_arg"
###                                 ("\<^const>List.list.Cons"
###                                   ("_tuple" ("_position" f)
###                                     ("_tuple_arg"
### ("_applC" ("_position" evalE)
###   ("_cargs" ("_position" e) ("_applC" ("_position" fst) ("_position" r))))))
###                                   ("_position" Flds))))))
###                         ("_applC" ("_position" snd)
###                           ("_position" r))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###         ("_position" low)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" Expr_low) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G)
###       ("_applC" ("_position" Put)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" f) ("_position" e))))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" C) ("_position" Flds))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                   ("_position" x))
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" l))))
###               ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                 ("_position" \<beta>)
###                 ("\<^const>HOL.conj" ("_position" t)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" lookup)
###                         ("_cargs"
###                           ("_applC" ("_position" snd) ("_position" r))
###                           ("_position" l)))
###                       ("_applC" ("_position" Some)
###                         ("_tuple" ("_position" C)
###                           ("_tuple_arg" ("_position" Flds)))))
###                     ("\<^const>HOL.eq" ("_position" s)
###                       ("_tuple" ("_applC" ("_position" fst) ("_position" r))
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" l)
###                               ("_tuple_arg"
###                                 ("_tuple" ("_position" C)
###                                   ("_tuple_arg"
###                                     ("\<^const>List.list.Cons"
### ("_tuple" ("_position" f)
###   ("_tuple_arg"
###     ("_applC" ("_position" evalE)
###       ("_cargs" ("_position" e)
###         ("_applC" ("_position" fst) ("_position" r))))))
### ("_position" Flds))))))
###                             ("_applC" ("_position" snd)
###                               ("_position" r))))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###         ("_position" low)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" Expr_low) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G)
###       ("_applC" ("_position" Put)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" f) ("_position" e))))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" C) ("_position" Flds))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                   ("_position" x))
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" l))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                   ("_position" \<beta>) ("_position" t))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" lookup)
###                       ("_cargs" ("_applC" ("_position" snd) ("_position" r))
###                         ("_position" l)))
###                     ("_applC" ("_position" Some)
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" Flds)))))
###                   ("\<^const>HOL.eq" ("_position" s)
###                     ("_tuple" ("_applC" ("_position" fst) ("_position" r))
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" l)
###                             ("_tuple_arg"
###                               ("_tuple" ("_position" C)
###                                 ("_tuple_arg"
###                                   ("\<^const>List.list.Cons"
###                                     ("_tuple" ("_position" f)
### ("_tuple_arg"
###   ("_applC" ("_position" evalE)
###     ("_cargs" ("_position" e)
###       ("_applC" ("_position" fst) ("_position" r))))))
###                                     ("_position" Flds))))))
###                           ("_applC" ("_position" snd)
###                             ("_position" r)))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###         ("_position" low)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" Expr_low) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G)
###       ("_applC" ("_position" Put)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" f) ("_position" e))))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" C) ("_position" Flds))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                   ("_position" x))
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" l))))
###               ("\<^const>HOL.eq"
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                   ("_position" \<beta>)
###                   ("\<^const>HOL.conj" ("_position" t)
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" lookup)
###                           ("_cargs"
###                             ("_applC" ("_position" snd) ("_position" r))
###                             ("_position" l)))
###                         ("_applC" ("_position" Some)
###                           ("_tuple" ("_position" C)
###                             ("_tuple_arg" ("_position" Flds)))))
###                       ("_position" s))))
###                 ("_tuple" ("_applC" ("_position" fst) ("_position" r))
###                   ("_tuple_arg"
###                     ("\<^const>List.list.Cons"
###                       ("_tuple" ("_position" l)
###                         ("_tuple_arg"
###                           ("_tuple" ("_position" C)
###                             ("_tuple_arg"
###                               ("\<^const>List.list.Cons"
###                                 ("_tuple" ("_position" f)
###                                   ("_tuple_arg"
###                                     ("_applC" ("_position" evalE)
### ("_cargs" ("_position" e) ("_applC" ("_position" fst) ("_position" r))))))
###                                 ("_position" Flds))))))
###                       ("_applC" ("_position" snd)
###                         ("_position" r)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1006 of "$AFP/SIFPL/VS_OBJ.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" PhiWhileOp)
###       ("_cargs" ("_position" b) ("_position" \<Phi>)))
###     ("_lambda" ("_position" \<Psi>)
###       ("_lambda"
###         ("_pattern" ("_position" s)
###           ("_patterns" ("_position" t) ("_position" \<beta>)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" evalB)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" fst) ("_position" t))))
###             ("\<^const>HOL.Ex_binder" ("_position" r)
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<Phi>)
###                   ("_tuple" ("_position" r)
###                     ("_tuple_args" ("_position" t)
###                       ("_tuple_arg" ("_position" \<beta>)))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" w) ("_position" \<gamma>))
###                   ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                     ("_position" \<gamma>)
###                     ("\<^const>HOL.implies" ("_position" w)
###                       ("_applC" ("_position" \<Psi>)
###                         ("_tuple" ("_position" s)
###                           ("_tuple_args" ("_position" w)
###                             ("_tuple_arg" ("_position" \<gamma>)))))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" t)))))
###             ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###               ("_position" \<beta>) ("_position" t))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" PhiWhileOp)
###       ("_cargs" ("_position" b) ("_position" \<Phi>)))
###     ("_lambda" ("_position" \<Psi>)
###       ("_lambda"
###         ("_pattern" ("_position" s)
###           ("_patterns" ("_position" t) ("_position" \<beta>)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" evalB)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" fst) ("_position" t))))
###             ("\<^const>HOL.Ex_binder" ("_position" r)
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<Phi>)
###                   ("_tuple" ("_position" r)
###                     ("_tuple_args" ("_position" t)
###                       ("_tuple_arg" ("_position" \<beta>)))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" w) ("_position" \<gamma>))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                       ("_position" \<gamma>) ("_position" w))
###                     ("_applC" ("_position" \<Psi>)
###                       ("_tuple" ("_position" s)
###                         ("_tuple_args" ("_position" w)
###                           ("_tuple_arg" ("_position" \<gamma>))))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" t)))))
###             ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###               ("_position" \<beta>) ("_position" t))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1123 of "$AFP/SIFPL/VS_OBJ.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evalB)
###         ("_cargs" ("_position" b)
###           ("_applC" ("_position" fst) ("_position" t)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" \<Phi>)
###           ("_tuple" ("_position" r)
###             ("_tuple_args" ("_position" t)
###               ("_tuple_arg" ("_position" \<beta>))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" w) ("_position" \<gamma>))
###             ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###               ("_position" \<gamma>)
###               ("\<^const>HOL.implies" ("_position" w)
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" b)
###                     ("_tuple_args" ("_position" \<Phi>)
###                       ("_tuple_args" ("_position" \<gamma>)
###                         ("_tuple_args" ("_position" s)
###                           ("_tuple_arg" ("_position" w))))))
###                   ("_position" var)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" b)
###         ("_tuple_args" ("_position" \<Phi>)
###           ("_tuple_args" ("_position" \<beta>)
###             ("_tuple_args" ("_position" s)
###               ("_tuple_arg" ("_position" t))))))
###       ("_position" var))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evalB)
###         ("_cargs" ("_position" b)
###           ("_applC" ("_position" fst) ("_position" t)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" \<Phi>)
###           ("_tuple" ("_position" r)
###             ("_tuple_args" ("_position" t)
###               ("_tuple_arg" ("_position" \<beta>))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" w) ("_position" \<gamma>))
###             ("\<^const>HOL.implies"
###               ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                 ("_position" \<gamma>) ("_position" w))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" b)
###                   ("_tuple_args" ("_position" \<Phi>)
###                     ("_tuple_args" ("_position" \<gamma>)
###                       ("_tuple_args" ("_position" s)
###                         ("_tuple_arg" ("_position" w))))))
###                 ("_position" var))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" b)
###         ("_tuple_args" ("_position" \<Phi>)
###           ("_tuple_args" ("_position" \<beta>)
###             ("_tuple_args" ("_position" s)
###               ("_tuple_arg" ("_position" t))))))
###       ("_position" var))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "varp"
  Proving monotonicity ...
### Ambiguous input (line 1697 of "$AFP/SIFPL/VS_OBJ.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" G)
###           ("_tuple_args" ("_position" c1)
###             ("_tuple_arg"
###               ("_applC" ("_position" Sec) ("_position" \<Phi>)))))
###         ("_position" Deriv)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" G)
###             ("_tuple_args" ("_position" c2)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Sec) ("_position" \<Psi>)))))
###           ("_position" Deriv)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" Comp)
###             ("_cargs" ("_position" c1) ("_position" c2)))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder" ("_position" r)
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" \<Phi>)
###                       ("_tuple" ("_position" r)
###                         ("_tuple_args" ("_position" t)
###                           ("_tuple_arg" ("_position" \<beta>)))))
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" w) ("_position" \<gamma>))
###                       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                         ("_position" \<gamma>)
###                         ("\<^const>HOL.implies" ("_position" w)
###                           ("_applC" ("_position" \<Psi>)
###                             ("_tuple" ("_position" s)
###                               ("_tuple_args" ("_position" w)
###                                 ("_tuple_arg"
###                                   ("_position" \<gamma>)))))))))))))))
###       ("_position" Deriv))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" G)
###           ("_tuple_args" ("_position" c1)
###             ("_tuple_arg"
###               ("_applC" ("_position" Sec) ("_position" \<Phi>)))))
###         ("_position" Deriv)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" G)
###             ("_tuple_args" ("_position" c2)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Sec) ("_position" \<Psi>)))))
###           ("_position" Deriv)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" Comp)
###             ("_cargs" ("_position" c1) ("_position" c2)))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder" ("_position" r)
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" \<Phi>)
###                       ("_tuple" ("_position" r)
###                         ("_tuple_args" ("_position" t)
###                           ("_tuple_arg" ("_position" \<beta>)))))
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" w) ("_position" \<gamma>))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                           ("_position" \<gamma>) ("_position" w))
###                         ("_applC" ("_position" \<Psi>)
###                           ("_tuple" ("_position" s)
###                             ("_tuple_args" ("_position" w)
###                               ("_tuple_arg"
###                                 ("_position" \<gamma>))))))))))))))
###       ("_position" Deriv))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1709 of "$AFP/SIFPL/VS_OBJ.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###       ("_position" low)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" New)
###             ("_cargs" ("_position" x) ("_position" C)))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" l) ("_position" r))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.not_member" ("_position" l)
###                       ("_applC" ("_position" Dom)
###                         ("_applC" ("_position" snd) ("_position" r))))
###                     ("\<^const>HOL.eq"
###                       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                         ("_position" \<beta>)
###                         ("\<^const>HOL.conj" ("_position" t)
###                           ("_position" s)))
###                       ("_tuple"
###                         ("_applC" ("_position" update)
###                           ("_cargs"
###                             ("_applC" ("_position" fst) ("_position" r))
###                             ("_cargs" ("_position" x)
###                               ("_applC" ("_position" RVal)
###                                 ("_applC" ("_position" Loc)
###                                   ("_position" l))))))
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" l)
###                               ("_tuple_arg"
###                                 ("_tuple" ("_position" C)
###                                   ("_tuple_arg"
###                                     ("\<^const>List.list.Nil")))))
###                             ("_applC" ("_position" snd)
###                               ("_position" r)))))))))))))
###       ("_position" Deriv))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###       ("_position" low)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" New)
###             ("_cargs" ("_position" x) ("_position" C)))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" l) ("_position" r))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.not_member" ("_position" l)
###                       ("_applC" ("_position" Dom)
###                         ("_applC" ("_position" snd) ("_position" r))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                         ("_position" \<beta>) ("_position" t))
###                       ("\<^const>HOL.eq" ("_position" s)
###                         ("_tuple"
###                           ("_applC" ("_position" update)
###                             ("_cargs"
###                               ("_applC" ("_position" fst) ("_position" r))
###                               ("_cargs" ("_position" x)
###                                 ("_applC" ("_position" RVal)
###                                   ("_applC" ("_position" Loc)
###                                     ("_position" l))))))
###                           ("_tuple_arg"
###                             ("\<^const>List.list.Cons"
###                               ("_tuple" ("_position" l)
###                                 ("_tuple_arg"
###                                   ("_tuple" ("_position" C)
###                                     ("_tuple_arg"
### ("\<^const>List.list.Nil")))))
###                               ("_applC" ("_position" snd)
###                                 ("_position" r))))))))))))))
###       ("_position" Deriv))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###       ("_position" low)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" New)
###             ("_cargs" ("_position" x) ("_position" C)))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" l) ("_position" r))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.not_member" ("_position" l)
###                       ("_applC" ("_position" Dom)
###                         ("_applC" ("_position" snd) ("_position" r))))
###                     ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                       ("_position" \<beta>)
###                       ("\<^const>HOL.conj" ("_position" t)
###                         ("\<^const>HOL.eq" ("_position" s)
###                           ("_tuple"
###                             ("_applC" ("_position" update)
###                               ("_cargs"
###                                 ("_applC" ("_position" fst) ("_position" r))
###                                 ("_cargs" ("_position" x)
###                                   ("_applC" ("_position" RVal)
###                                     ("_applC" ("_position" Loc)
### ("_position" l))))))
###                             ("_tuple_arg"
###                               ("\<^const>List.list.Cons"
###                                 ("_tuple" ("_position" l)
###                                   ("_tuple_arg"
###                                     ("_tuple" ("_position" C)
### ("_tuple_arg" ("\<^const>List.list.Nil")))))
###                                 ("_applC" ("_position" snd)
###                                   ("_position" r)))))))))))))))
###       ("_position" Deriv))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1716 of "$AFP/SIFPL/VS_OBJ.thy") produces 3 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" y))
###         ("_position" low)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" Get)
###             ("_cargs" ("_position" x)
###               ("_cargs" ("_position" y) ("_position" f))))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" r)
###                     ("_idts" ("_position" l)
###                       ("_idts" ("_position" C)
###                         ("_idts" ("_position" Flds) ("_position" v)))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                         ("_position" y))
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" l))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" lookup)
###                           ("_cargs"
###                             ("_applC" ("_position" snd) ("_position" r))
###                             ("_position" l)))
###                         ("_applC" ("_position" Some)
###                           ("_tuple" ("_position" C)
###                             ("_tuple_arg" ("_position" Flds)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" lookup)
###                             ("_cargs" ("_position" Flds) ("_position" f)))
###                           ("_applC" ("_position" Some) ("_position" v)))
###                         ("\<^const>HOL.eq"
###                           ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                             ("_position" \<beta>)
###                             ("\<^const>HOL.conj" ("_position" t)
###                               ("_position" s)))
###                           ("_tuple"
###                             ("_applC" ("_position" update)
###                               ("_cargs"
###                                 ("_applC" ("_position" fst) ("_position" r))
###                                 ("_cargs" ("_position" x) ("_position" v))))
###                             ("_tuple_arg"
###                               ("_applC" ("_position" snd)
###                                 ("_position" r))))))))))))))
###       ("_position" Deriv))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" y))
###         ("_position" low)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" Get)
###             ("_cargs" ("_position" x)
###               ("_cargs" ("_position" y) ("_position" f))))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" r)
###                     ("_idts" ("_position" l)
###                       ("_idts" ("_position" C)
###                         ("_idts" ("_position" Flds) ("_position" v)))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                         ("_position" y))
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" l))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" lookup)
###                           ("_cargs"
###                             ("_applC" ("_position" snd) ("_position" r))
###                             ("_position" l)))
###                         ("_applC" ("_position" Some)
###                           ("_tuple" ("_position" C)
###                             ("_tuple_arg" ("_position" Flds)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" lookup)
###                             ("_cargs" ("_position" Flds) ("_position" f)))
###                           ("_applC" ("_position" Some) ("_position" v)))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                             ("_position" \<beta>) ("_position" t))
###                           ("\<^const>HOL.eq" ("_position" s)
###                             ("_tuple"
###                               ("_applC" ("_position" update)
###                                 ("_cargs"
###                                   ("_applC" ("_position" fst)
###                                     ("_position" r))
###                                   ("_cargs" ("_position" x)
###                                     ("_position" v))))
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" snd)
###                                   ("_position" r)))))))))))))))
###       ("_position" Deriv))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" y))
###         ("_position" low)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" Get)
###             ("_cargs" ("_position" x)
###               ("_cargs" ("_position" y) ("_position" f))))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" r)
###                     ("_idts" ("_position" l)
###                       ("_idts" ("_position" C)
###                         ("_idts" ("_position" Flds) ("_position" v)))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                         ("_position" y))
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" l))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" lookup)
###                           ("_cargs"
###                             ("_applC" ("_position" snd) ("_position" r))
###                             ("_position" l)))
###                         ("_applC" ("_position" Some)
###                           ("_tuple" ("_position" C)
###                             ("_tuple_arg" ("_position" Flds)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" lookup)
###                             ("_cargs" ("_position" Flds) ("_position" f)))
###                           ("_applC" ("_position" Some) ("_position" v)))
###                         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                           ("_position" \<beta>)
###                           ("\<^const>HOL.conj" ("_position" t)
###                             ("\<^const>HOL.eq" ("_position" s)
###                               ("_tuple"
###                                 ("_applC" ("_position" update)
###                                   ("_cargs"
###                                     ("_applC" ("_position" fst)
### ("_position" r))
###                                     ("_cargs" ("_position" x)
### ("_position" v))))
###                                 ("_tuple_arg"
###                                   ("_applC" ("_position" snd)
###                                     ("_position" r))))))))))))))))
###       ("_position" Deriv))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1724 of "$AFP/SIFPL/VS_OBJ.thy") produces 7 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###         ("_position" low)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" Expr_low) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" Put)
###             ("_cargs" ("_position" x)
###               ("_cargs" ("_position" f) ("_position" e))))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" r)
###                     ("_idts" ("_position" l)
###                       ("_idts" ("_position" C)
###                         ("_idts" ("_position" F) ("_position" h)))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                         ("_position" x))
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" l))))
###                     ("\<^const>HOL.eq"
###                       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                         ("_position" \<beta>)
###                         ("\<^const>HOL.conj" ("_position" t)
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.eq"
###                               ("_applC" ("_position" lookup)
###                                 ("_cargs"
###                                   ("_applC" ("_position" snd)
###                                     ("_position" r))
###                                   ("_position" l)))
###                               ("_applC" ("_position" Some)
###                                 ("_tuple" ("_position" C)
###                                   ("_tuple_arg" ("_position" F)))))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.eq" ("_position" h)
###                                 ("\<^const>List.list.Cons"
###                                   ("_tuple" ("_position" l)
###                                     ("_tuple_arg"
### ("_tuple" ("_position" C)
###   ("_tuple_arg"
###     ("\<^const>List.list.Cons"
###       ("_tuple" ("_position" f)
###         ("_tuple_arg"
###           ("_applC" ("_position" evalE)
###             ("_cargs" ("_position" e)
###               ("_applC" ("_position" fst) ("_position" r))))))
###       ("_position" F))))))
###                                   ("_applC" ("_position" snd)
###                                     ("_position" r))))
###                               ("_position" s)))))
###                       ("_tuple" ("_applC" ("_position" fst) ("_position" r))
###                         ("_tuple_arg" ("_position" h)))))))))))
###       ("_position" Deriv))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###         ("_position" low)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" Expr_low) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" Put)
###             ("_cargs" ("_position" x)
###               ("_cargs" ("_position" f) ("_position" e))))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" r)
###                     ("_idts" ("_position" l)
###                       ("_idts" ("_position" C)
###                         ("_idts" ("_position" F) ("_position" h)))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                         ("_position" x))
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" l))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                           ("_position" \<beta>)
###                           ("\<^const>HOL.conj" ("_position" t)
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.eq"
###                                 ("_applC" ("_position" lookup)
###                                   ("_cargs"
###                                     ("_applC" ("_position" snd)
### ("_position" r))
###                                     ("_position" l)))
###                                 ("_applC" ("_position" Some)
###                                   ("_tuple" ("_position" C)
###                                     ("_tuple_arg" ("_position" F)))))
###                               ("_position" h))))
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" l)
###                             ("_tuple_arg"
###                               ("_tuple" ("_position" C)
###                                 ("_tuple_arg"
###                                   ("\<^const>List.list.Cons"
###                                     ("_tuple" ("_position" f)
### ("_tuple_arg"
###   ("_applC" ("_position" evalE)
###     ("_cargs" ("_position" e)
###       ("_applC" ("_position" fst) ("_position" r))))))
###                                     ("_position" F))))))
###                           ("_applC" ("_position" snd) ("_position" r))))
###                       ("\<^const>HOL.eq" ("_position" s)
###                         ("_tuple"
###                           ("_applC" ("_position" fst) ("_position" r))
###                           ("_tuple_arg" ("_position" h))))))))))))
###       ("_position" Deriv))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###         ("_position" low)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" Expr_low) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" Put)
###             ("_cargs" ("_position" x)
###               ("_cargs" ("_position" f) ("_position" e))))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" r)
###                     ("_idts" ("_position" l)
###                       ("_idts" ("_position" C)
###                         ("_idts" ("_position" F) ("_position" h)))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                         ("_position" x))
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" l))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                         ("_position" \<beta>) ("_position" t))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" lookup)
###                             ("_cargs"
###                               ("_applC" ("_position" snd) ("_position" r))
###                               ("_position" l)))
###                           ("_applC" ("_position" Some)
###                             ("_tuple" ("_position" C)
###                               ("_tuple_arg" ("_position" F)))))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.eq" ("_position" h)
###                             ("\<^const>List.list.Cons"
###                               ("_tuple" ("_position" l)
###                                 ("_tuple_arg"
###                                   ("_tuple" ("_position" C)
###                                     ("_tuple_arg"
### ("\<^const>List.list.Cons"
###   ("_tuple" ("_position" f)
###     ("_tuple_arg"
###       ("_applC" ("_position" evalE)
###         ("_cargs" ("_position" e)
###           ("_applC" ("_position" fst) ("_position" r))))))
###   ("_position" F))))))
###                               ("_applC" ("_position" snd) ("_position" r))))
###                           ("\<^const>HOL.eq" ("_position" s)
###                             ("_tuple"
###                               ("_applC" ("_position" fst) ("_position" r))
###                               ("_tuple_arg" ("_position" h))))))))))))))
###       ("_position" Deriv))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###         ("_position" low)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" Expr_low) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" Put)
###             ("_cargs" ("_position" x)
###               ("_cargs" ("_position" f) ("_position" e))))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" r)
###                     ("_idts" ("_position" l)
###                       ("_idts" ("_position" C)
###                         ("_idts" ("_position" F) ("_position" h)))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                         ("_position" x))
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" l))))
###                     ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                       ("_position" \<beta>)
###                       ("\<^const>HOL.conj" ("_position" t)
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" lookup)
###                               ("_cargs"
###                                 ("_applC" ("_position" snd) ("_position" r))
###                                 ("_position" l)))
###                             ("_applC" ("_position" Some)
###                               ("_tuple" ("_position" C)
###                                 ("_tuple_arg" ("_position" F)))))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.eq" ("_position" h)
###                               ("\<^const>List.list.Cons"
###                                 ("_tuple" ("_position" l)
###                                   ("_tuple_arg"
###                                     ("_tuple" ("_position" C)
### ("_tuple_arg"
###   ("\<^const>List.list.Cons"
###     ("_tuple" ("_position" f)
###       ("_tuple_arg"
###         ("_applC" ("_position" evalE)
###           ("_cargs" ("_position" e)
###             ("_applC" ("_position" fst) ("_position" r))))))
###     ("_position" F))))))
###                                 ("_applC" ("_position" snd)
###                                   ("_position" r))))
###                             ("\<^const>HOL.eq" ("_position" s)
###                               ("_tuple"
###                                 ("_applC" ("_position" fst) ("_position" r))
###                                 ("_tuple_arg" ("_position" h)))))))))))))))
###       ("_position" Deriv))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###         ("_position" low)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" Expr_low) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" Put)
###             ("_cargs" ("_position" x)
###               ("_cargs" ("_position" f) ("_position" e))))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" r)
###                     ("_idts" ("_position" l)
###                       ("_idts" ("_position" C)
###                         ("_idts" ("_position" F) ("_position" h)))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                         ("_position" x))
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" l))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                         ("_position" \<beta>)
###                         ("\<^const>HOL.conj" ("_position" t)
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" lookup)
###                               ("_cargs"
###                                 ("_applC" ("_position" snd) ("_position" r))
###                                 ("_position" l)))
###                             ("_applC" ("_position" Some)
###                               ("_tuple" ("_position" C)
###                                 ("_tuple_arg" ("_position" F)))))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq" ("_position" h)
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" l)
###                               ("_tuple_arg"
###                                 ("_tuple" ("_position" C)
###                                   ("_tuple_arg"
###                                     ("\<^const>List.list.Cons"
### ("_tuple" ("_position" f)
###   ("_tuple_arg"
###     ("_applC" ("_position" evalE)
###       ("_cargs" ("_position" e)
###         ("_applC" ("_position" fst) ("_position" r))))))
### ("_position" F))))))
###                             ("_applC" ("_position" snd) ("_position" r))))
###                         ("\<^const>HOL.eq" ("_position" s)
###                           ("_tuple"
###                             ("_applC" ("_position" fst) ("_position" r))
###                             ("_tuple_arg" ("_position" h)))))))))))))
###       ("_position" Deriv))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###         ("_position" low)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" Expr_low) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" Put)
###             ("_cargs" ("_position" x)
###               ("_cargs" ("_position" f) ("_position" e))))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" r)
###                     ("_idts" ("_position" l)
###                       ("_idts" ("_position" C)
###                         ("_idts" ("_position" F) ("_position" h)))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                         ("_position" x))
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" l))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                           ("_position" \<beta>)
###                           ("\<^const>HOL.conj" ("_position" t)
###                             ("_applC" ("_position" lookup)
###                               ("_cargs"
###                                 ("_applC" ("_position" snd) ("_position" r))
###                                 ("_position" l)))))
###                         ("_applC" ("_position" Some)
###                           ("_tuple" ("_position" C)
###                             ("_tuple_arg" ("_position" F)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq" ("_position" h)
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" l)
###                               ("_tuple_arg"
###                                 ("_tuple" ("_position" C)
###                                   ("_tuple_arg"
###                                     ("\<^const>List.list.Cons"
### ("_tuple" ("_position" f)
###   ("_tuple_arg"
###     ("_applC" ("_position" evalE)
###       ("_cargs" ("_position" e)
###         ("_applC" ("_position" fst) ("_position" r))))))
### ("_position" F))))))
###                             ("_applC" ("_position" snd) ("_position" r))))
###                         ("\<^const>HOL.eq" ("_position" s)
###                           ("_tuple"
###                             ("_applC" ("_position" fst) ("_position" r))
###                             ("_tuple_arg" ("_position" h)))))))))))))
###       ("_position" Deriv))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###         ("_position" low)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" Expr_low) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" Put)
###             ("_cargs" ("_position" x)
###               ("_cargs" ("_position" f) ("_position" e))))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" r)
###                     ("_idts" ("_position" l)
###                       ("_idts" ("_position" C)
###                         ("_idts" ("_position" F) ("_position" h)))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                         ("_position" x))
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" l))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                         ("_position" \<beta>)
###                         ("\<^const>HOL.conj" ("_position" t)
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.eq"
###                               ("_applC" ("_position" lookup)
###                                 ("_cargs"
###                                   ("_applC" ("_position" snd)
###                                     ("_position" r))
###                                   ("_position" l)))
###                               ("_applC" ("_position" Some)
###                                 ("_tuple" ("_position" C)
###                                   ("_tuple_arg" ("_position" F)))))
###                             ("\<^const>HOL.eq" ("_position" h)
###                               ("\<^const>List.list.Cons"
###                                 ("_tuple" ("_position" l)
###                                   ("_tuple_arg"
###                                     ("_tuple" ("_position" C)
### ("_tuple_arg"
###   ("\<^const>List.list.Cons"
###     ("_tuple" ("_position" f)
###       ("_tuple_arg"
###         ("_applC" ("_position" evalE)
###           ("_cargs" ("_position" e)
###             ("_applC" ("_position" fst) ("_position" r))))))
###     ("_position" F))))))
###                                 ("_applC" ("_position" snd)
###                                   ("_position" r)))))))
###                       ("\<^const>HOL.eq" ("_position" s)
###                         ("_tuple"
###                           ("_applC" ("_position" fst) ("_position" r))
###                           ("_tuple_arg" ("_position" h))))))))))))
###       ("_position" Deriv))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "Derivp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "VS_exprp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "VS_Bexprp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "VS_comp"
  Proving monotonicity ...
consts
  SemExpr :: "Expr => TP => bool"
consts
  SemBExpr :: "BExpr => TP => bool"
### theory "Draft.VS_OBJ"
### 2.405s elapsed time, 3.078s cpu time, 0.936s GC time
Loading theory "Draft.VS_OBJMoreTemplates"
val templateLemmas =
   [("VS_OBJ.PhiWhileOp_Monotone", "Monotone (PhiWhileOp ?b ?\<Phi>)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("VS_OBJ.PhiWhileMonotone", "Monotone (PhiWhile ?b)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("VS_OBJ.SkipHigh", "?G \<rhd> Skip : HighSec",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 1))),
           template_hole 0)
         )),
    ("VS_OBJ.Assign1", "Expr_low ?e ==> secure (Assign ?x ?e)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("VS_OBJ.Prop1A", " \<Turnstile> ?c : Sec ?\<Phi>  ==> secure ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("VS_OBJ.isPBij", "?s \<equiv>\<^sub>?\<beta> ?t ==> ?\<beta> : Pbij",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0)
           ))),
    ("VS_OBJ.twiddleHeap_isPbij",
     "twiddleHeap ?\<beta> ?h ?hh ==> ?\<beta> : Pbij",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0)
           ))),
    ("VS_OBJ.VS_SOUND", "(low, ?c) : VS_com ==> secure ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 0)),
              template_hole 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("VS_OBJ.Fix_lemma",
     "Monotone ?\<phi> ==> ?\<phi> (FIX ?\<phi>) = FIX ?\<phi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_var 0, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("VS_OBJ.Prop1BB",
     "secure ?c ==> EX \<Phi>.  \<Turnstile> ?c : Sec \<Phi> ",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("VS_OBJ.ExprSound", "(?e, ?tp) : VS_expr ==> SemExpr ?e ?tp",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("VS_OBJ.BExprSound", "(?e, ?tp) : VS_Bexpr ==> SemBExpr ?e ?tp",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("VS_OBJ.Pbij_inverse_twiddle",
     "?s \<equiv>\<^sub>?\<beta> ?t ==>
      ?t \<equiv>\<^sub>Pbij_inverse ?\<beta> ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 0),
             template_var 1)
           ))),
    ("VS_OBJ.twiddleHeap_inverse",
     "twiddleHeap ?\<beta> ?s ?t ==>
      twiddleHeap (Pbij_inverse ?\<beta>) ?t ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 0),
             template_var 1)
           ))),
    ("VS_OBJ.twiddleStore_inverse",
     "?s  \<approx>\<^sub>?\<beta> ?t ==>
      ?t  \<approx>\<^sub>Pbij_inverse ?\<beta> ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 0),
             template_var 1)
           ))),
    ("VS_OBJ.Comp1",
     "[| secure ?c1.0; secure ?c2.0 |] ==> secure (Comp ?c1.0 ?c2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("VS_OBJ.NewHigh",
     "CONTEXT ?x = high ==> ?G \<rhd> New ?x ?C : HighSec",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 2), template_hole 6)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 0)),
                   template_hole 1))),
             template_hole 0)
           ))),
    ("VS_OBJ.twiddle_mkId",
     "noLowDPs (?s, ?h) ==> (?s, ?h) \<equiv>\<^sub>mkId ?h (?s, ?h)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))
           ))),
    ("VS_OBJ.twiddleObj_betaExtend",
     "[| twiddleObj ?\<beta> ?o1.0 ?o2.0; Pbij_extends ?\<gamma> ?\<beta> |]
      ==> twiddleObj ?\<gamma> ?o1.0 ?o2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("VS_OBJ.SKIP",
     "?G \<rhd> Skip : Sec (%(s, t, \<beta>). s \<equiv>\<^sub>\<beta> t)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 0),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, t_empty))))),
           template_hole 0)
         )),
    ("VS_OBJ.GetHigh",
     "CONTEXT ?x = high ==> ?G \<rhd> Get ?x ?y ?f : HighSec",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 3), template_hole 6)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 2, template_var 3),
                         template_var 1),
                       template_var 0)),
                   template_hole 1))),
             template_hole 0)
           ))),
    ("VS_OBJ.Deriv_derivable", "(?G, ?c, ?A) : Deriv ==> ?G \<rhd> ?c : ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 0))),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             template_hole 0)
           ))),
    ("VS_OBJ.twiddleVal_inverse",
     "(?\<beta>, ?w, ?v) : twiddleVal ==>
      (Pbij_inverse ?\<beta>, ?v, ?w) : twiddleVal",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 0))),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 0, template_var 2)),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1))),
             template_hole 1)
           ))),
    ("VS_OBJ.Iff1",
     "[| BExpr_low ?b; secure ?c1.0; secure ?c2.0 |]
      ==> secure (Iff ?b ?c1.0 ?c2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("VS_OBJ.var_Monotone",
     "Monotone
       (%\<Phi> (s, t, \<beta>). (?b, \<Phi>, \<beta>, s, t) : var)",
     template_predicate (template_app (template_hole 8, t_empty))),
    ("VS_OBJ.WhileHigh",
     "?G \<rhd> ?c : HighSec ==> ?G \<rhd> While ?b ?c : HighSec",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_hole 2))),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 1)),
                   template_hole 2))),
             template_hole 1)
           ))),
    ("VS_OBJ.twiddle_compose",
     "[| ?s \<equiv>\<^sub>?\<beta> ?r; ?r \<equiv>\<^sub>?\<gamma> ?t |]
      ==> ?s \<equiv>\<^sub>Pbij_compose ?\<beta> ?\<gamma> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 1)),
               template_var 3),
             template_var 0)
           ))),
    ("VS_OBJ.twiddleStore_compose",
     "[| ?s  \<approx>\<^sub>?\<beta> ?r;
         ?r  \<approx>\<^sub>?\<gamma> ?t |]
      ==> ?s  \<approx>\<^sub>Pbij_compose ?\<beta> ?\<gamma> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 1)),
               template_var 3),
             template_var 0)
           ))),
    ("VS_OBJ.FIXvarFIX",
     "PhiWhile ?b =
      (%\<Phi> (s, t, \<beta>). (?b, \<Phi>, \<beta>, s, t) : var)",
     template_equation
      (template_app (template_hole 8, template_var 0), t_empty)),
    ("VS_OBJ.FIXvarFIX'",
     "PhiWhile ?b ?\<Phi> =
      (%(s, t, \<beta>). (?b, ?\<Phi>, \<beta>, s, t) : var)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       template_app (template_hole 7, t_empty))),
    ("VS_OBJ.varFIXvar",
     "PhiWhile ?b ?\<Phi> (?s, ?t, ?\<beta>) =
      ((?b, ?\<Phi>, ?\<beta>, ?s, ?t) : var)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 8, template_var 4), template_var 3),
         template_app
          (template_app (template_hole 7, template_var 2),
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 4),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1))))),
         template_hole 0))),
    ("VS_OBJ.CallHigh",
     "({HighSec} Un ?G) \<rhd> body : HighSec ==> ?G \<rhd> Call : HighSec",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app
                       (template_hole 7,
                        template_app
                         (template_app (template_hole 6, template_hole 5),
                          template_hole 4)),
                      template_var 0)),
                  template_app
                   (template_app (template_hole 3, template_hole 2),
                    template_hole 5))),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_app
                  (template_app (template_hole 3, template_hole 0),
                   template_hole 5))),
             template_hole 1)
           ))),
    ("VS_OBJ.noLowDPs_NEW",
     "noLowDPs (?s, ?h) ==>
      noLowDPs (update ?s ?x (RVal (Loc ?l)), (?l, ?C, []) # ?h)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_app (template_hole 6, template_var 4),
                     template_var 2),
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 1)))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_hole 0))),
                 template_var 3)))
           ))),
    ("VS_OBJ.FIXvar",
     "PhiWhile ?b ?\<Phi> (?s, ?t, ?\<beta>) ==>
      (?b, ?\<Phi>, ?\<beta>, ?s, ?t) : var",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 1))))),
             template_hole 0)
           ))),
    ("VS_OBJ.varFIX",
     "(?b, ?\<Phi>, ?\<beta>, ?s, ?t) : var ==>
      PhiWhile ?b ?\<Phi> (?s, ?t, ?\<beta>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_app
                     (template_app (template_hole 5, template_var 2),
                      template_app
                       (template_app (template_hole 4, template_var 1),
                        template_var 0))))),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)))
           ))),
    ("VS_OBJ.Fix1",
     "[| Monotone ?\<phi>; FIX ?\<phi> (?s, ?t, ?\<beta>) |]
      ==> ?\<phi> (FIX ?\<phi>) (?s, ?t, ?\<beta>)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_var 3,
               template_app (template_hole 2, template_var 3)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("VS_OBJ.Fix2",
     "[| Monotone ?\<phi>; ?\<phi> (FIX ?\<phi>) (?s, ?t, ?\<beta>) |]
      ==> FIX ?\<phi> (?s, ?t, ?\<beta>)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_var 3,
                template_app (template_hole 2, template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("VS_OBJ.twiddleVal_betaExtend",
     "[| (?\<beta>, ?v, ?w) : twiddleVal; Pbij_extends ?\<gamma> ?\<beta> |]
      ==> (?\<gamma>, ?v, ?w) : twiddleVal",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 1))),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1))),
             template_hole 1)
           ))),
    ("VS_OBJ.Prop1",
     "secure ?c =
      ( \<Turnstile> ?c : Sec (%(r, t, \<beta>).
                                  EX s. s , ?c \<Down> r  &
  s \<equiv>\<^sub>\<beta> t) )",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_hole 6, template_app (template_hole 5, t_empty))))),
    ("VS_OBJ.twiddle_mkIDs_compose'",
     "[| ?s \<equiv>\<^sub>mkId (snd ?s) ?r;
         ?r \<equiv>\<^sub>mkId (snd ?r) ?t |]
      ==> ?s \<equiv>\<^sub>mkId (snd ?s) ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_hole 1,
                    template_app (template_hole 0, template_var 2))),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_hole 1,
                    template_app (template_hole 0, template_var 1))),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2))),
               template_var 2),
             template_var 0)
           ))),
    ("VS_OBJ.Prop1B",
     "secure ?c ==>
       \<Turnstile> ?c : Sec (%(r, t, \<beta>).
                                 EX s. s , ?c \<Down> r  &
 s \<equiv>\<^sub>\<beta> t) ",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 0),
             template_app
              (template_hole 6, template_app (template_hole 5, t_empty)))
           ))),
    ("VS_OBJ.PutHigh2",
     "[| GAMMA ?f = high; ALL s. Expr_good ?e s |]
      ==> ?G \<rhd> Put ?x ?f ?e : HighSec",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 3), template_hole 8),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 2, template_var 0),
                         template_var 3),
                       template_var 2)),
                   template_hole 1))),
             template_hole 0)
           ))),
    ("VS_OBJ.CAST",
     "?G \<rhd> ?c : HighSec ==>
      ?G \<rhd> ?c : Sec (%(s, t, \<beta>). s \<equiv>\<^sub>\<beta> t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_app
                   (template_app (template_hole 6, template_var 0),
                    template_hole 5))),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, t_empty))))),
             template_hole 4)
           ))),
    ("VS_OBJ.AssignHigh",
     "[| CONTEXT ?x = high; ALL s. noLowDPs s --> Expr_good ?e s |]
      ==> ?G \<rhd> Assign ?x ?e : HighSec",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 2),
          template_hole 10),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 1)),
                   template_hole 1))),
             template_hole 0)
           ))),
    ("VS_OBJ.WHILE",
     "[| BExpr_low ?b; ?G \<rhd> ?c : Sec ?\<Phi> |]
      ==> ?G \<rhd> While ?b ?c : Sec (PhiWhile ?b ?\<Phi>)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_app (template_hole 3, template_var 0)))),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 1, template_var 3),
                       template_var 1)),
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 0))))),
             template_hole 2)
           ))),
    ("VS_OBJ.PutHigh",
     "[| GAMMA ?f = high; ALL s. noLowDPs s --> Expr_good ?e s |]
      ==> ?G \<rhd> Put ?x ?f ?e : HighSec",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 3),
          template_hole 10),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 2, template_var 0),
                         template_var 3),
                       template_var 2)),
                   template_hole 1))),
             template_hole 0)
           ))),
    ("VS_OBJ.CompHigh",
     "[| ?G \<rhd> ?c : HighSec; ?G \<rhd> ?d : HighSec |]
      ==> ?G \<rhd> Comp ?c ?d : HighSec",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_hole 2))),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app
                   (template_app (template_hole 3, template_var 0),
                    template_hole 2))),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 0)),
                   template_hole 2))),
             template_hole 1)
           ))),
    ("VS_OBJ.twiddleVal_compose",
     "[| (?\<beta>, ?v, ?u) : twiddleVal;
         (?\<gamma>, ?u, ?w) : twiddleVal |]
      ==> (Pbij_compose ?\<beta> ?\<gamma>, ?v, ?w) : twiddleVal",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2))),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 0))),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 0))),
             template_hole 1)
           ))),
    ("VS_OBJ.IfHigh",
     "[| ?G \<rhd> ?c : HighSec; ?G \<rhd> ?d : HighSec |]
      ==> ?G \<rhd> Iff ?b ?c ?d : HighSec",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_hole 2))),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_hole 2))),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 2),
                       template_var 1)),
                   template_hole 2))),
             template_hole 1)
           ))),
    ("VS_OBJ.twiddleHeap_compose",
     "[| twiddleHeap ?\<beta> ?h1.0 ?h2.0;
         twiddleHeap ?\<gamma> ?h2.0 ?h3.0; ?\<beta> : Pbij;
         ?\<gamma> : Pbij |]
      ==> twiddleHeap (Pbij_compose ?\<beta> ?\<gamma>) ?h1.0 ?h3.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 1)),
               template_var 3),
             template_var 0)
           ))),
    ("VS_OBJ.twiddle_mkIDs_compose",
     "[| (?a, ?b) \<equiv>\<^sub>mkId ?b (?ab, ?bb);
         (?ab, ?bb) \<equiv>\<^sub>mkId ?bb (?aa, ?ba) |]
      ==> (?a, ?b) \<equiv>\<^sub>mkId ?b (?aa, ?ba)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 5)),
                template_app
                 (template_app (template_hole 0, template_var 4),
                  template_var 5)),
              template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 2)),
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 5)),
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 5)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("VS_OBJ.CALL",
     "[| ({Sec (FIX ?\<phi>)} Un
          ?X) \<rhd> body : Sec (?\<phi> (FIX ?\<phi>));
         Monotone ?\<phi> |]
      ==> ?X \<rhd> Call : Sec (FIX ?\<phi>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app
                       (template_hole 9,
                        template_app
                         (template_app
                           (template_hole 8,
                            template_app
                             (template_hole 7,
                              template_app
                               (template_hole 6, template_var 1))),
                          template_hole 5)),
                      template_var 0)),
                  template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_app
                     (template_hole 7,
                      template_app
                       (template_var 1,
                        template_app (template_hole 6, template_var 1)))))),
              template_hole 2)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app (template_hole 10, template_var 0),
                 template_app
                  (template_app (template_hole 4, template_hole 0),
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_var 1))))),
             template_hole 2)
           ))),
    ("VS_OBJ.VS_com_Deriv",
     "(?t, ?c) : VS_com ==>
      (?t = high --> (?G, ?c, HighSec) : Deriv) &
      (?t = low --> (EX \<Phi>. (?G, ?c, Sec \<Phi>) : Deriv))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 2),
                  template_var 1)),
              template_hole 12)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 9, template_var 2),
                     template_hole 8)),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_var 0),
                       template_app
                        (template_app (template_hole 5, template_var 1),
                         template_hole 4))),
                   template_hole 3))),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_var 2),
                   template_hole 2)),
               template_app (template_hole 1, t_empty)))
           ))),
    ("VS_OBJ.AssignAux",
     "[| Expr_low ?e; ?s \<equiv>\<^sub>?\<beta> ?t |]
      ==> (update (fst ?s) ?x (evalE ?e (fst ?s)),
           snd ?s) \<equiv>\<^sub>?\<beta> (update (fst ?t) ?x
       (evalE ?e (fst ?t)),
      snd ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 2)),
                       template_var 0),
                     template_app
                      (template_app (template_hole 1, template_var 4),
                       template_app (template_hole 2, template_var 2)))),
                 template_app (template_hole 0, template_var 2))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 1)),
                     template_var 0),
                   template_app
                    (template_app (template_hole 1, template_var 4),
                     template_app (template_hole 2, template_var 1)))),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("VS_OBJ.ASSIGN",
     "Expr_low ?e ==>
      ?G \<rhd> Assign ?x
                 ?e : Sec (%(s, t, \<beta>).
                              EX r. s =
                                    (update (fst r) ?x (evalE ?e (fst r)),
                                     snd r) &
                                    r \<equiv>\<^sub>\<beta> t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 16,
               template_app
                (template_app (template_hole 15, template_var 1),
                 template_app
                  (template_app
                    (template_hole 14,
                     template_app
                      (template_app (template_hole 13, template_var 0),
                       template_var 2)),
                   template_app
                    (template_hole 12,
                     template_app (template_hole 11, t_empty))))),
             template_hole 0)
           ))),
    ("VS_OBJ.WHILE_IND",
     "[| BExpr_low ?b; ?G \<rhd> ?c : Sec ?\<Phi> |]
      ==> ?G \<rhd> While ?b
                     ?c : Sec (%(s, t, \<gamma>).
                                  (?b, ?\<Phi>, \<gamma>, s, t) : var)",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 2),
                  template_app
                   (template_app (template_hole 11, template_var 1),
                    template_app (template_hole 10, template_var 0)))),
              template_hole 9)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app (template_hole 12, template_var 2),
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 8, template_var 3),
                       template_var 1)),
                   template_app
                    (template_hole 10,
                     template_app (template_hole 7, t_empty))))),
             template_hole 9)
           ))),
    ("VS_OBJ.CompSem",
     "[|  \<Turnstile> ?c1.0 : Sec ?\<Phi> ;
          \<Turnstile> ?c2.0 : Sec ?\<Psi>  |]
      ==>  \<Turnstile> Comp ?c1.0
                         ?c2.0 : Sec (%(s, t, \<beta>).
   EX r. ?\<Phi> (r, t, \<beta>) &
         (ALL w \<gamma>.
             r \<equiv>\<^sub>\<gamma> w --> ?\<Psi> (s, w, \<gamma>))) ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 3),
              template_app (template_hole 11, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app (template_hole 11, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 10, template_var 3),
                 template_var 1)),
             template_app
              (template_hole 11, template_app (template_hole 9, t_empty)))
           ))),
    ("VS_OBJ.varMonotoneAux",
     "[| (?b, ?\<Phi>, ?\<beta>, ?s, ?t) : var;
         !!s t \<gamma>.
            ?\<Phi> (s, t, \<gamma>) ==> ?\<Psi> (s, t, \<gamma>) |]
      ==> (?b, ?\<Psi>, ?\<beta>, ?s, ?t) : var",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_app
                   (template_app (template_hole 7, template_var 4),
                    template_app
                     (template_app (template_hole 6, template_var 3),
                      template_app
                       (template_app (template_hole 5, template_var 2),
                        template_var 1))))),
              template_hole 4)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 5),
                 template_app
                  (template_app (template_hole 7, template_var 0),
                   template_app
                    (template_app (template_hole 6, template_var 3),
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 1))))),
             template_hole 4)
           ))),
    ("VS_OBJ.IffSem",
     "[| BExpr_low ?b;  \<Turnstile> ?c1.0 : Sec ?\<Phi> ;
          \<Turnstile> ?c2.0 : Sec ?\<Psi>  |]
      ==>  \<Turnstile> Iff ?b ?c1.0
                         ?c2.0 : Sec (%(s, t, \<beta>).
   (evalB ?b (fst t) --> ?\<Phi> (s, t, \<beta>)) &
   (~ evalB ?b (fst t) --> ?\<Psi> (s, t, \<beta>))) ",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app (template_hole 10, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_app (template_hole 9, template_var 4),
                   template_var 3),
                 template_var 1)),
             template_app
              (template_hole 10, template_app (template_hole 8, t_empty)))
           ))),
    ("VS_OBJ.NEW",
     "CONTEXT ?x = low ==>
      ?G \<rhd> New ?x
                 ?C : Sec (%(s, t, \<beta>).
                              EX l r.
                                 l ~: Dom (snd r) &
                                 r \<equiv>\<^sub>\<beta> t &
                                 s =
                                 (update (fst r) ?x (RVal (Loc l)),
                                  (l, ?C, []) # snd r))",
     template_implication
      ([template_equation
         (template_app (template_hole 27, template_var 2),
          template_hole 26)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 25,
               template_app
                (template_app (template_hole 24, template_var 1),
                 template_app
                  (template_app
                    (template_hole 23,
                     template_app
                      (template_app (template_hole 22, template_var 2),
                       template_var 0)),
                   template_app
                    (template_hole 21,
                     template_app (template_hole 20, t_empty))))),
             template_hole 0)
           ))),
    ("VS_OBJ.COMP",
     "[| ?G \<rhd> ?c1.0 : Sec ?\<Phi>; ?G \<rhd> ?c2.0 : Sec ?\<Psi> |]
      ==> ?G \<rhd> Comp ?c1.0
                     ?c2.0 : Sec (%(s, t, \<beta>).
                                     EX r.
  ?\<Phi> (r, t, \<beta>) &
  (ALL w \<gamma>.
      r \<equiv>\<^sub>\<gamma> w --> ?\<Psi> (s, w, \<gamma>)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 4),
                  template_app
                   (template_app (template_hole 13, template_var 3),
                    template_app (template_hole 12, template_var 2)))),
              template_hole 11)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 4),
                  template_app
                   (template_app (template_hole 13, template_var 1),
                    template_app (template_hole 12, template_var 0)))),
              template_hole 11)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app (template_hole 14, template_var 4),
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app
                      (template_app (template_hole 10, template_var 3),
                       template_var 1)),
                   template_app
                    (template_hole 12,
                     template_app (template_hole 9, t_empty))))),
             template_hole 11)
           ))),
    ("VS_OBJ.IFF",
     "[| BExpr_low ?b; ?G \<rhd> ?c1.0 : Sec ?\<Phi>;
         ?G \<rhd> ?c2.0 : Sec ?\<Psi> |]
      ==> ?G \<rhd> Iff ?b ?c1.0
                     ?c2.0 : Sec (%(s, t, \<beta>).
                                     (evalB ?b (fst t) -->
?\<Phi> (s, t, \<beta>)) &
                                     (~ evalB ?b (fst t) -->
?\<Psi> (s, t, \<beta>)))",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 4),
                  template_app
                   (template_app (template_hole 12, template_var 3),
                    template_app (template_hole 11, template_var 2)))),
              template_hole 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 4),
                  template_app
                   (template_app (template_hole 12, template_var 1),
                    template_app (template_hole 11, template_var 0)))),
              template_hole 10)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app (template_hole 13, template_var 4),
                 template_app
                  (template_app
                    (template_hole 12,
                     template_app
                      (template_app
                        (template_app (template_hole 9, template_var 5),
                         template_var 3),
                       template_var 1)),
                   template_app
                    (template_hole 11,
                     template_app (template_hole 8, t_empty))))),
             template_hole 10)
           ))),
    ("VS_OBJ.GET",
     "[| CONTEXT ?y = low; GAMMA ?f = low |]
      ==> ?G \<rhd> Get ?x ?y
                     ?f : Sec (%(s, t, \<beta>).
                                  EX r l C Flds v.
                                     fst r ?y = RVal (Loc l) &
                                     lookup (snd r) l = Some (C, Flds) &
                                     lookup Flds ?f = Some v &
                                     r \<equiv>\<^sub>\<beta> t &
                                     s = (update (fst r) ?x v, snd r))",
     template_implication
      ([template_equation
         (template_app (template_hole 32, template_var 3),
          template_hole 31),
        template_equation
         (template_app (template_hole 30, template_var 2),
          template_hole 31)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 29,
               template_app
                (template_app (template_hole 28, template_var 1),
                 template_app
                  (template_app
                    (template_hole 27,
                     template_app
                      (template_app
                        (template_app (template_hole 26, template_var 0),
                         template_var 3),
                       template_var 2)),
                   template_app
                    (template_hole 25,
                     template_app (template_hole 24, t_empty))))),
             template_hole 0)
           ))),
    ("VS_OBJ.PUT",
     "[| CONTEXT ?x = low; GAMMA ?f = low; Expr_low ?e |]
      ==> ?G \<rhd> Put ?x ?f
                     ?e : Sec (%(s, t, \<beta>).
                                  EX r l C Flds.
                                     fst r ?x = RVal (Loc l) &
                                     r \<equiv>\<^sub>\<beta> t &
                                     lookup (snd r) l = Some (C, Flds) &
                                     s =
                                     (fst r,
(l, C, (?f, evalE ?e (fst r)) # Flds) # snd r))",
     template_implication
      ([template_equation
         (template_app (template_hole 33, template_var 3),
          template_hole 32),
        template_equation
         (template_app (template_hole 31, template_var 2),
          template_hole 32),
        template_predicate
         (template_app (template_hole 30, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 29,
               template_app
                (template_app (template_hole 28, template_var 0),
                 template_app
                  (template_app
                    (template_hole 27,
                     template_app
                      (template_app
                        (template_app (template_hole 26, template_var 3),
                         template_var 2),
                       template_var 1)),
                   template_app
                    (template_hole 25,
                     template_app (template_hole 24, t_empty))))),
             template_hole 0)
           )))]:
   (string * thm * template) list
### theory "Draft.VS_OBJMoreTemplates"
### 0.623s elapsed time, 1.370s cpu time, 0.858s GC time
val it = (): unit
