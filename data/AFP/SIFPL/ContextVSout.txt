Loading theory "Draft.IMP" (required by "Draft.ContextVSMoreTemplates" via "Draft.ContextVS" via "Draft.VS" via "Draft.VDM")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ContextVSMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ContextVSMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ContextVSMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.123s elapsed time, 0.512s cpu time, 0.044s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ContextVSMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.203s elapsed time, 0.830s cpu time, 0.044s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ContextVSMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.319s elapsed time, 1.286s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ContextVSMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  evalE :: "Expr => (Var => Val) => Val"
consts
  evalB :: "BExpr => (Var => Val) => bool"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Proofs for inductive predicate(s) "Semnp"
### theory "HOL-Library.BigO"
### 0.916s elapsed time, 3.457s cpu time, 0.852s GC time
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.991s elapsed time, 3.594s cpu time, 0.812s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 128 of "$AFP/SIFPL/IMP.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>Sem" ("_position" s) ("_position" c) ("_position" t))
###     ("\<^const>HOL.Ex_binder" ("_position" n)
###       ("\<^const>IMP.SemN" ("_position" s) ("_position" c) ("_position" n)
###         ("_position" t)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Sem" ("_position" s) ("_position" c)
###     ("\<^const>HOL.eq" ("_position" t)
###       ("\<^const>HOL.Ex_binder" ("_position" n)
###         ("\<^const>IMP.SemN" ("_position" s) ("_position" c) ("_position" n)
###           ("_position" t))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>Sem" ("_position" s) ("_position" c) ("_position" t))
###     ("\<^const>IMP.SemN"
###       ("\<^const>HOL.Ex_binder" ("_position" n) ("_position" s))
###       ("_position" c) ("_position" n) ("_position" t))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Sem" ("_position" s) ("_position" c)
###     ("\<^const>HOL.eq" ("_position" t)
###       ("\<^const>IMP.SemN"
###         ("\<^const>HOL.Ex_binder" ("_position" n) ("_position" s))
###         ("_position" c) ("_position" n) ("_position" t)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.IMP"
### 1.650s elapsed time, 5.621s cpu time, 1.032s GC time
Loading theory "Draft.VDM" (required by "Draft.ContextVSMoreTemplates" via "Draft.ContextVS" via "Draft.VS")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 55 of "$AFP/SIFPL/VDM.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>Ctxt_valid" ("_position" G))
###     ("\<^const>HOL.All_binder" ("_position" A)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" A) ("_position" G))
###         ("\<^const>Set.member" ("\<^fixed>Ctxt_valid" ("_position" Call))
###           ("_position" A))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>Ctxt_valid" ("_position" G))
###     ("\<^const>HOL.All_binder" ("_position" A)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" A) ("_position" G))
###         ("\<^const>VDM.VDM_valid" ("_position" Call) ("_position" A))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 61 of "$AFP/SIFPL/VDM.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>Ctxt_validn" ("_position" n) ("_position" G))
###     ("\<^const>HOL.All_binder" ("_position" m)
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" n))
###         ("\<^const>HOL.All_binder" ("_position" A)
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.member" ("_position" A) ("_position" G))
###             ("\<^const>Set.member"
###               ("\<^fixed>Ctxt_validn" ("_position" m) ("_position" Call))
###               ("_position" A))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>Ctxt_validn" ("_position" n) ("_position" G))
###     ("\<^const>HOL.All_binder" ("_position" m)
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" n))
###         ("\<^const>HOL.All_binder" ("_position" A)
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.member" ("_position" A) ("_position" G))
###             ("\<^const>VDM.VDM_validn" ("_position" m) ("_position" Call)
###               ("_position" A))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 89 of "$AFP/SIFPL/VDM.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>valid" ("_position" G) ("_position" c) ("_position" A))
###     ("\<^const>HOL.implies" ("\<^const>VDM.Ctxt_valid" ("_position" G))
###       ("\<^const>VDM.VDM_valid" ("_position" c) ("_position" A)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>valid" ("_position" G) ("_position" c) ("_position" A))
###     ("\<^const>HOL.implies" ("\<^const>VDM.Ctxt_valid" ("_position" G))
###       ("\<^const>Set.member" ("\<^const>VDM.Ctxt_valid" ("_position" c))
###         ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 96 of "$AFP/SIFPL/VDM.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>validn" ("_position" G) ("_position" n) ("_position" c)
###       ("_position" A))
###     ("\<^const>HOL.implies"
###       ("\<^const>VDM.Ctxt_validn" ("_position" n) ("_position" G))
###       ("\<^const>Set.member"
###         ("\<^const>VDM.Ctxt_validn" ("_position" n) ("_position" c))
###         ("_position" A)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>validn" ("_position" G) ("_position" n) ("_position" c)
###       ("_position" A))
###     ("\<^const>HOL.implies"
###       ("\<^const>VDM.Ctxt_validn" ("_position" n) ("_position" G))
###       ("\<^const>VDM.VDM_validn" ("_position" n) ("_position" c)
###         ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 107 of "$AFP/SIFPL/VDM.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM.Ctxt_validn" ("_position" n) ("_position" G)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("\<^const>VDM.Ctxt_validn" ("_position" n) ("_position" Call))
###           ("_position" A)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM.Ctxt_validn" ("_position" n)
###       ("\<^const>Set.union" ("_Finset" ("_position" A)) ("_position" G)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM.Ctxt_validn" ("_position" n) ("_position" G)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM.VDM_validn" ("_position" n) ("_position" Call)
###           ("_position" A)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM.Ctxt_validn" ("_position" n)
###       ("\<^const>Set.union" ("_Finset" ("_position" A)) ("_position" G)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "VDM_proofp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 246 of "$AFP/SIFPL/VDM.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>HOL.implies"
###           ("\<^const>VDM.Ctxt_validn" ("_position" n)
###             ("\<^const>Set.union" ("_Finset" ("_position" A))
###               ("_position" G)))
###           ("\<^const>Set.member"
###             ("\<^const>VDM.Ctxt_validn" ("_position" n) ("_position" body))
###             ("_position" A))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>VDM.Ctxt_validn" ("_position" n) ("_position" G))
###       ("\<^const>VDM.VDM_validn" ("_position" n) ("_position" Call)
###         ("_position" A)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>HOL.implies"
###           ("\<^const>VDM.Ctxt_validn" ("_position" n)
###             ("\<^const>Set.union" ("_Finset" ("_position" A))
###               ("_position" G)))
###           ("\<^const>VDM.VDM_validn" ("_position" n) ("_position" body)
###             ("_position" A))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>VDM.Ctxt_validn" ("_position" n) ("_position" G))
###       ("\<^const>VDM.VDM_validn" ("_position" n) ("_position" Call)
###         ("_position" A)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>HOL.implies"
###           ("\<^const>VDM.Ctxt_validn" ("_position" n)
###             ("\<^const>Set.union" ("_Finset" ("_position" A))
###               ("_position" G)))
###           ("\<^const>Set.member"
###             ("\<^const>VDM.Ctxt_validn" ("_position" n) ("_position" body))
###             ("_position" A))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>VDM.Ctxt_validn" ("_position" n) ("_position" G))
###       ("\<^const>Set.member"
###         ("\<^const>VDM.Ctxt_validn" ("_position" n) ("_position" Call))
###         ("_position" A)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>HOL.implies"
###           ("\<^const>VDM.Ctxt_validn" ("_position" n)
###             ("\<^const>Set.union" ("_Finset" ("_position" A))
###               ("_position" G)))
###           ("\<^const>VDM.VDM_validn" ("_position" n) ("_position" body)
###             ("_position" A))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>VDM.Ctxt_validn" ("_position" n) ("_position" G))
###       ("\<^const>Set.member"
###         ("\<^const>VDM.Ctxt_validn" ("_position" n) ("_position" Call))
###         ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Tree"
### 1.936s elapsed time, 5.962s cpu time, 1.085s GC time
Loading theory "Draft.Templates" (required by "Draft.ContextVSMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 300 of "$AFP/SIFPL/VDM.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM.VDM_deriv" ("\<^const>Set.empty") ("_position" c)
###       ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("\<^const>VDM.Ctxt_valid" ("_position" c))
###       ("_position" A))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM.VDM_deriv" ("\<^const>Set.empty") ("_position" c)
###       ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM.VDM_valid" ("_position" c) ("_position" A))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 471 of "$AFP/SIFPL/VDM.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>IMP.Sem"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" SSpec)
###         ("_cargs" ("_position" c)
###           ("_cargs" ("_position" s) ("_position" t))))
###       ("_position" s))
###     ("_position" c) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" SSpec)
###     ("\<^const>IMP.Sem"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" c)
###           ("_cargs" ("_position" s) ("_position" t)))
###         ("_position" s))
###       ("_position" c) ("_position" t))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" SSpec)
###     ("_cargs" ("_position" c)
###       ("\<^const>IMP.Sem"
###         ("\<^const>HOL.eq" ("_applC" ("_position" s) ("_position" t))
###           ("_position" s))
###         ("_position" c) ("_position" t)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" SSpec)
###     ("_cargs" ("_position" c)
###       ("_cargs" ("_position" s)
###         ("\<^const>IMP.Sem"
###           ("\<^const>HOL.eq" ("_position" t) ("_position" s))
###           ("_position" c) ("_position" t))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" SSpec)
###       ("_cargs" ("_position" c) ("_cargs" ("_position" s) ("_position" t))))
###     ("\<^const>IMP.Sem" ("_position" s) ("_position" c) ("_position" t))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.110s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ContextVSMoreTemplates")
### Ambiguous input (line 474 of "$AFP/SIFPL/VDM.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("\<^const>VDM.Ctxt_valid" ("_position" c))
###     ("_applC" ("_position" SSpec) ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>VDM.VDM_valid" ("_position" c)
###     ("_applC" ("_position" SSpec) ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 480 of "$AFP/SIFPL/VDM.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("\<^const>VDM.Ctxt_valid" ("_position" c))
###       ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" t))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" SSpec)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" s) ("_position" t))))
###         ("_applC" ("_position" A)
###           ("_cargs" ("_position" s) ("_position" t)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM.VDM_valid" ("_position" c) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" t))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" SSpec)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" s) ("_position" t))))
###         ("_applC" ("_position" A)
###           ("_cargs" ("_position" s) ("_position" t)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 565 of "$AFP/SIFPL/VDM.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("\<^const>VDM.Ctxt_valid" ("_position" c))
###       ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM.VDM_deriv" ("\<^const>Set.empty") ("_position" c)
###       ("_position" A))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM.VDM_valid" ("_position" c) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM.VDM_deriv" ("\<^const>Set.empty") ("_position" c)
###       ("_position" A))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.VDM"
### 0.488s elapsed time, 1.018s cpu time, 0.096s GC time
Loading theory "Draft.VS" (required by "Draft.ContextVSMoreTemplates" via "Draft.ContextVS")
### Ambiguous input (line 47 of "$AFP/SIFPL/VS.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("\<^const>VDM.Ctxt_valid" ("_position" c))
###       ("_applC" ("_position" Sec) ("_position" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM.VDM_valid" ("_position" c)
###       ("_applC" ("_position" Sec) ("_position" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 53 of "$AFP/SIFPL/VS.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("\<^const>VDM.Ctxt_valid" ("_position" c))
###       ("_applC" ("_position" Sec)
###         ("_lambda" ("_pattern" ("_position" r) ("_position" t))
###           ("\<^const>HOL.Ex_binder" ("_position" s)
###             ("\<^const>HOL.conj"
###               ("\<^const>IMP.Sem" ("_position" s) ("_position" c)
###                 ("_position" r))
###               ("\<^const>VS.twiddle" ("_position" s) ("_position" t)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM.VDM_valid" ("_position" c)
###       ("_applC" ("_position" Sec)
###         ("_lambda" ("_pattern" ("_position" r) ("_position" t))
###           ("\<^const>HOL.Ex_binder" ("_position" s)
###             ("\<^const>HOL.conj"
###               ("\<^const>IMP.Sem" ("_position" s) ("_position" c)
###                 ("_position" r))
###               ("\<^const>VS.twiddle" ("_position" s) ("_position" t)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 64 of "$AFP/SIFPL/VS.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<Phi>)
###       ("\<^const>Set.member" ("\<^const>VDM.Ctxt_valid" ("_position" c))
###         ("_applC" ("_position" Sec) ("_position" \<Phi>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<Phi>)
###       ("\<^const>VDM.VDM_valid" ("_position" c)
###         ("_applC" ("_position" Sec) ("_position" \<Phi>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 70 of "$AFP/SIFPL/VS.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" secure) ("_position" c))
###     ("\<^const>VDM.VDM_valid" ("_position" c)
###       ("_applC" ("_position" Sec)
###         ("_lambda" ("_pattern" ("_position" r) ("_position" t))
###           ("\<^const>HOL.Ex_binder" ("_position" s)
###             ("\<^const>HOL.conj"
###               ("\<^const>IMP.Sem" ("_position" s) ("_position" c)
###                 ("_position" r))
###               ("\<^const>VS.twiddle" ("_position" s) ("_position" t)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" secure) ("_position" c))
###     ("\<^const>Set.member" ("\<^const>VDM.Ctxt_valid" ("_position" c))
###       ("_applC" ("_position" Sec)
###         ("_lambda" ("_pattern" ("_position" r) ("_position" t))
###           ("\<^const>HOL.Ex_binder" ("_position" s)
###             ("\<^const>HOL.conj"
###               ("\<^const>IMP.Sem" ("_position" s) ("_position" c)
###                 ("_position" r))
###               ("\<^const>VS.twiddle" ("_position" s) ("_position" t)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "varp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "VS_exprp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "VS_Bexprp"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.563s elapsed time, 1.185s cpu time, 0.135s GC time
Proofs for inductive predicate(s) "VS_comp"
  Proving monotonicity ...
consts
  SemExpr :: "Expr => TP => bool"
consts
  SemBExpr :: "BExpr => TP => bool"
consts
  SemCom :: "TP => IMP => bool"
Proofs for inductive predicate(s) "Derivp"
  Proving monotonicity ...
### theory "Draft.VS"
### 1.115s elapsed time, 1.745s cpu time, 0.179s GC time
Loading theory "Draft.ContextVS" (required by "Draft.ContextVSMoreTemplates")
consts
  Fill :: "CtxtProg => IMP => IMP"
consts
  EVars :: "Expr => Var set"
consts
  BVars :: "BExpr => Var set"
consts
  Vars :: "IMP => Var set"
consts
  CtxtVars :: "Var set => CtxtProg => bool"
### theory "Draft.ContextVS"
### 0.416s elapsed time, 0.454s cpu time, 0.053s GC time
Loading theory "Draft.ContextVSMoreTemplates"
val templateLemmas =
   [("ContextVS.Secure_comp",
     "[| secure ?c1.0; secure ?c2.0 |] ==> secure (Comp ?c1.0 ?c2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("ContextVS.Secure_while",
     "[| secure ?c;
         ALL s ss.  s \<approx> ss  --> evalB ?b s = evalB ?b ss |]
      ==> secure (While ?b ?c)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("ContextVS.secureI_secureFillI",
     "[| secure ?c; LOW ?X ?C; LOW ?X Ctxt_Body; body = Fill Ctxt_Body ?c |]
      ==> secure (Fill ?C ?c)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            ),
        template_equation
         (template_hole 1,
          template_app
           (template_app (template_hole 0, template_hole 3),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("ContextVS.low_EvalB",
     "[| !!x. x : BVars ?b ==> CONTEXT x = low;  ?s \<approx> ?t  |]
      ==> evalB ?b ?s = evalB ?b ?t",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("ContextVS.low_Eval",
     "[| !!x. x : EVars ?e ==> CONTEXT x = low;  ?s \<approx> ?t  |]
      ==> evalE ?e ?s = evalE ?e ?t",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("ContextVS.Secure_iff",
     "[| secure ?c1.0; secure ?c2.0;
         ALL s ss.  s \<approx> ss  --> evalB ?b s = evalB ?b ss |]
      ==> secure (Iff ?b ?c1.0 ?c2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 1))
           ))),
    ("ContextVS.secure_while_aux",
     "[| ?n <= ?k; ?m <= ?k;  ?s , While ?b ?c \<rightarrow>\<^sub>?n  ?ss ;
          ?t , While ?b ?c \<rightarrow>\<^sub>?m  ?tt ; secure ?c;
         !!s ss.  s \<approx> ss  ==> evalB ?b s = evalB ?b ss;
          ?s \<approx> ?t  |]
      ==>  ?ss \<approx> ?tt ",
     template_implication
      ([template_inequation (less_equals, template_var 8, template_var 7),
        template_inequation (less_equals, template_var 6, template_var 7),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 5),
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app (template_hole 7, template_var 4),
                        template_var 3)),
                    template_app
                     (template_app (template_hole 6, template_var 8),
                      template_var 2)))),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 1),
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app (template_hole 7, template_var 4),
                        template_var 3)),
                    template_app
                     (template_app (template_hole 6, template_var 6),
                      template_var 0)))),
              template_hole 5)
            ),
        template_predicate (template_app (template_hole 4, template_var 3)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 5),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2), template_var 0)
           ))),
    ("ContextVS.secureI_secureFillI_Aux",
     "[| ?n <= ?k; ?m <= ?k;  ?s , ?d \<rightarrow>\<^sub>?n  ?t ;
          ?ss , ?d \<rightarrow>\<^sub>?m  ?tt ;  ?s \<approx> ?ss ;
         ?d = Fill ?C ?c; LOW ?X ?C; LOW ?X Ctxt_Body;
         body = Fill Ctxt_Body ?c; secure ?c |]
      ==>  ?t \<approx> ?tt ",
     template_implication
      ([template_inequation (less_equals, template_var 10, template_var 9),
        template_inequation (less_equals, template_var 8, template_var 9),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 7),
                  template_app
                   (template_app (template_hole 9, template_var 6),
                    template_app
                     (template_app (template_hole 8, template_var 10),
                      template_var 5)))),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 4),
                  template_app
                   (template_app (template_hole 9, template_var 6),
                    template_app
                     (template_app (template_hole 8, template_var 8),
                      template_var 3)))),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 7),
              template_var 4)
            ),
        template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            ),
        template_equation
         (template_hole 1,
          template_app
           (template_app (template_hole 4, template_hole 2),
            template_var 1)),
        template_predicate
         (template_app (template_hole 0, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 5), template_var 3)
           )))]:
   (string * thm * template) list
### theory "Draft.ContextVSMoreTemplates"
### 0.361s elapsed time, 0.536s cpu time, 0.067s GC time
val it = (): unit
