Loading theory "Draft.OBJ" (required by "Draft.ContextOBJMoreTemplates" via "Draft.ContextOBJ" via "Draft.VS_OBJ" via "Draft.VDM_OBJ")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ContextOBJMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ContextOBJMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ContextOBJMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
consts
  lookup :: "('a * 'b) list => 'a => 'b option"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.154s elapsed time, 0.630s cpu time, 0.042s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ContextOBJMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.211s elapsed time, 0.858s cpu time, 0.042s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ContextOBJMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.353s elapsed time, 1.408s cpu time, 0.135s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ContextOBJMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  evalE :: "Expr => (Var => Val) => Val"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  evalB :: "BExpr => (Var => Val) => bool"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.974s elapsed time, 3.688s cpu time, 0.923s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.059s elapsed time, 3.826s cpu time, 0.881s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Semnp"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.960s elapsed time, 6.127s cpu time, 1.194s GC time
Loading theory "Draft.Templates" (required by "Draft.ContextOBJMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 199 of "$AFP/SIFPL/OBJ.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>Sem" ("_position" s) ("_position" c) ("_position" t))
###     ("\<^const>HOL.Ex_binder" ("_position" n)
###       ("\<^const>OBJ.SemN" ("_position" s) ("_position" c) ("_position" n)
###         ("_position" t)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Sem" ("_position" s) ("_position" c)
###     ("\<^const>HOL.eq" ("_position" t)
###       ("\<^const>HOL.Ex_binder" ("_position" n)
###         ("\<^const>OBJ.SemN" ("_position" s) ("_position" c) ("_position" n)
###           ("_position" t))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>Sem" ("_position" s) ("_position" c) ("_position" t))
###     ("\<^const>OBJ.SemN"
###       ("\<^const>HOL.Ex_binder" ("_position" n) ("_position" s))
###       ("_position" c) ("_position" n) ("_position" t))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Sem" ("_position" s) ("_position" c)
###     ("\<^const>HOL.eq" ("_position" t)
###       ("\<^const>OBJ.SemN"
###         ("\<^const>HOL.Ex_binder" ("_position" n) ("_position" s))
###         ("_position" c) ("_position" n) ("_position" t)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.112s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ContextOBJMoreTemplates")
### theory "Draft.OBJ"
### 2.445s elapsed time, 7.439s cpu time, 1.276s GC time
Loading theory "Draft.PBIJ" (required by "Draft.ContextOBJMoreTemplates" via "Draft.ContextOBJ" via "Draft.VS_OBJ")
Loading theory "Draft.VDM_OBJ" (required by "Draft.ContextOBJMoreTemplates" via "Draft.ContextOBJ" via "Draft.VS_OBJ")
### Ambiguous input (line 44 of "$AFP/SIFPL/VDM_OBJ.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>Ctxt_validn" ("_position" n) ("_position" G))
###     ("\<^const>HOL.All_binder" ("_position" m)
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" n))
###         ("\<^const>HOL.All_binder" ("_position" A)
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.member" ("_position" A) ("_position" G))
###             ("\<^const>VDM_OBJ.VDM_validn" ("_position" n)
###               ("_position" Call) ("_position" A))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>Ctxt_validn" ("_position" n) ("_position" G))
###     ("\<^const>HOL.All_binder" ("_position" m)
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" n))
###         ("\<^const>HOL.All_binder" ("_position" A)
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.member" ("_position" A) ("_position" G))
###             ("\<^fixed>Ctxt_validn" ("_position" n)
###               ("\<^const>Set.member" ("_position" Call)
###                 ("_position" A)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 47 of "$AFP/SIFPL/VDM_OBJ.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>Ctxt_valid" ("_position" G))
###     ("\<^const>HOL.All_binder" ("_position" A)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" A) ("_position" G))
###         ("\<^fixed>Ctxt_valid"
###           ("\<^const>Set.member" ("_position" Call) ("_position" A)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>Ctxt_valid" ("_position" G))
###     ("\<^const>HOL.All_binder" ("_position" A)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" A) ("_position" G))
###         ("\<^const>VDM_OBJ.VDM_valid" ("_position" Call)
###           ("_position" A))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 76 of "$AFP/SIFPL/VDM_OBJ.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>validn" ("_position" G) ("_position" n) ("_position" c)
###       ("_position" A))
###     ("\<^const>HOL.implies"
###       ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n) ("_position" G))
###       ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###         ("\<^const>Set.member" ("_position" c) ("_position" A))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>validn" ("_position" G) ("_position" n) ("_position" c)
###       ("_position" A))
###     ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###       ("\<^const>HOL.implies" ("_position" G)
###         ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###           ("\<^const>Set.member" ("_position" c) ("_position" A)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>validn" ("_position" G) ("_position" n) ("_position" c)
###       ("_position" A))
###     ("\<^const>VDM_OBJ.VDM_validn" ("_position" n)
###       ("\<^const>HOL.implies" ("_position" G)
###         ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n) ("_position" c)))
###       ("_position" A))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>validn" ("_position" G) ("_position" n) ("_position" c)
###       ("_position" A))
###     ("\<^const>HOL.implies"
###       ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n) ("_position" G))
###       ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" c)
###         ("_position" A)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>validn" ("_position" G) ("_position" n) ("_position" c)
###       ("_position" A))
###     ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###       ("\<^const>HOL.implies" ("_position" G)
###         ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" c)
###           ("_position" A))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 78 of "$AFP/SIFPL/VDM_OBJ.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" n)
###       ("\<^const>VDM_OBJ.validn" ("_position" G) ("_position" n)
###         ("_position" c) ("_position" A))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.valid" ("_position" G) ("_position" c)
###       ("_position" A))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.validn"
###       ("\<^const>HOL.All_binder" ("_position" n) ("_position" G))
###       ("_position" n) ("_position" c) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.valid" ("_position" G) ("_position" c)
###       ("_position" A))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 87 of "$AFP/SIFPL/VDM_OBJ.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n) ("_position" G)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###           ("\<^const>Set.member" ("_position" Call) ("_position" A))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###       ("\<^const>Set.union" ("_Finset" ("_position" A)) ("_position" G)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n) ("_position" G)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" Call)
###           ("_position" A)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###       ("\<^const>Set.union" ("_Finset" ("_position" A)) ("_position" G)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.PBIJ"
### 0.090s elapsed time, 0.272s cpu time, 0.000s GC time
Proofs for inductive predicate(s) "VDM_proofp"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.544s elapsed time, 1.225s cpu time, 0.094s GC time
### Ambiguous input (line 188 of "$AFP/SIFPL/VDM_OBJ.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.All_binder" ("_position" n)
###       ("\<^const>VDM_OBJ.validn" ("_position" G) ("_position" n)
###         ("_position" c) ("_position" B)))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.All_binder" ("_position" s)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" evalB)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" fst) ("_position" s)))))
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s) ("_position" s)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.All_binder" ("_position" s)
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" evalB)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" fst) ("_position" s))))
###             ("\<^const>HOL.All_binder" ("_position" r)
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" B)
###                   ("_cargs" ("_position" s) ("_position" r)))
###                 ("\<^const>HOL.All_binder" ("_position" t)
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" r) ("_position" t)))
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s) ("_position" t)))))))))
###         ("\<^const>VDM_OBJ.validn" ("_position" G) ("_position" n)
###           ("_applC" ("_position" While)
###             ("_cargs" ("_position" b) ("_position" c)))
###           ("_lambda" ("_pttrns" ("_position" s) ("_position" t))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" A)
###                 ("_cargs" ("_position" s) ("_position" t)))
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" evalB)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" fst) ("_position" t))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>VDM_OBJ.validn"
###       ("\<^const>HOL.All_binder" ("_position" n) ("_position" G))
###       ("_position" n) ("_position" c) ("_position" B))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.All_binder" ("_position" s)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" evalB)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" fst) ("_position" s)))))
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s) ("_position" s)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.All_binder" ("_position" s)
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" evalB)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" fst) ("_position" s))))
###             ("\<^const>HOL.All_binder" ("_position" r)
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" B)
###                   ("_cargs" ("_position" s) ("_position" r)))
###                 ("\<^const>HOL.All_binder" ("_position" t)
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" r) ("_position" t)))
###                     ("_applC" ("_position" A)
###                       ("_cargs" ("_position" s) ("_position" t)))))))))
###         ("\<^const>VDM_OBJ.validn" ("_position" G) ("_position" n)
###           ("_applC" ("_position" While)
###             ("_cargs" ("_position" b) ("_position" c)))
###           ("_lambda" ("_pttrns" ("_position" s) ("_position" t))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" A)
###                 ("_cargs" ("_position" s) ("_position" t)))
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" evalB)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" fst) ("_position" t))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.All_binder" ("_position" n)
###       ("\<^const>VDM_OBJ.validn" ("_position" G) ("_position" n)
###         ("_position" c) ("_position" B)))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.All_binder" ("_position" s)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" evalB)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" fst) ("_position" s)))))
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s) ("_position" s)))))
###       ("\<^const>VDM_OBJ.validn"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.All_binder" ("_position" s)
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" s))))
###               ("\<^const>HOL.All_binder" ("_position" r)
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" B)
###                     ("_cargs" ("_position" s) ("_position" r)))
###                   ("\<^const>HOL.All_binder" ("_position" t)
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" r) ("_position" t)))
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s) ("_position" t)))))))))
###           ("_position" G))
###         ("_position" n)
###         ("_applC" ("_position" While)
###           ("_cargs" ("_position" b) ("_position" c)))
###         ("_lambda" ("_pttrns" ("_position" s) ("_position" t))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" A)
###               ("_cargs" ("_position" s) ("_position" t)))
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" t)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>VDM_OBJ.validn"
###       ("\<^const>HOL.All_binder" ("_position" n) ("_position" G))
###       ("_position" n) ("_position" c) ("_position" B))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.All_binder" ("_position" s)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" evalB)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" fst) ("_position" s)))))
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s) ("_position" s)))))
###       ("\<^const>VDM_OBJ.validn"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.All_binder" ("_position" s)
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" s))))
###               ("\<^const>HOL.All_binder" ("_position" r)
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" B)
###                     ("_cargs" ("_position" s) ("_position" r)))
###                   ("\<^const>HOL.All_binder" ("_position" t)
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" r) ("_position" t)))
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s) ("_position" t)))))))))
###           ("_position" G))
###         ("_position" n)
###         ("_applC" ("_position" While)
###           ("_cargs" ("_position" b) ("_position" c)))
###         ("_lambda" ("_pttrns" ("_position" s) ("_position" t))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" A)
###               ("_cargs" ("_position" s) ("_position" t)))
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" t)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>VDM_OBJ.validn"
###     ("\<^const>HOL.implies"
###       ("\<^const>VDM_OBJ.validn"
###         ("\<^const>HOL.All_binder" ("_position" n) ("_position" G))
###         ("_position" n) ("_position" c) ("_position" B))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.All_binder" ("_position" s)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" s)))))
###             ("_applC" ("_position" A)
###               ("_cargs" ("_position" s) ("_position" s)))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.All_binder" ("_position" s)
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" s))))
###               ("\<^const>HOL.All_binder" ("_position" r)
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" B)
###                     ("_cargs" ("_position" s) ("_position" r)))
###                   ("\<^const>HOL.All_binder" ("_position" t)
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" r) ("_position" t)))
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s) ("_position" t)))))))))
###           ("_position" G))))
###     ("_position" n)
###     ("_applC" ("_position" While)
###       ("_cargs" ("_position" b) ("_position" c)))
###     ("_lambda" ("_pttrns" ("_position" s) ("_position" t))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" A)
###           ("_cargs" ("_position" s) ("_position" t)))
###         ("\<^const>HOL.Not"
###           ("_applC" ("_position" evalB)
###             ("_cargs" ("_position" b)
###               ("_applC" ("_position" fst) ("_position" t)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.All_binder" ("_position" n)
###       ("\<^const>VDM_OBJ.validn" ("_position" G) ("_position" n)
###         ("_position" c) ("_position" B)))
###     ("\<^const>VDM_OBJ.validn"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.All_binder" ("_position" s)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" s)))))
###             ("_applC" ("_position" A)
###               ("_cargs" ("_position" s) ("_position" s)))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.All_binder" ("_position" s)
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" s))))
###               ("\<^const>HOL.All_binder" ("_position" r)
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" B)
###                     ("_cargs" ("_position" s) ("_position" r)))
###                   ("\<^const>HOL.All_binder" ("_position" t)
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" r) ("_position" t)))
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s) ("_position" t)))))))))
###           ("_position" G)))
###       ("_position" n)
###       ("_applC" ("_position" While)
###         ("_cargs" ("_position" b) ("_position" c)))
###       ("_lambda" ("_pttrns" ("_position" s) ("_position" t))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s) ("_position" t)))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" evalB)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" fst) ("_position" t))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>VDM_OBJ.validn"
###       ("\<^const>HOL.All_binder" ("_position" n) ("_position" G))
###       ("_position" n) ("_position" c) ("_position" B))
###     ("\<^const>VDM_OBJ.validn"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.All_binder" ("_position" s)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" s)))))
###             ("_applC" ("_position" A)
###               ("_cargs" ("_position" s) ("_position" s)))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.All_binder" ("_position" s)
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" s))))
###               ("\<^const>HOL.All_binder" ("_position" r)
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" B)
###                     ("_cargs" ("_position" s) ("_position" r)))
###                   ("\<^const>HOL.All_binder" ("_position" t)
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" r) ("_position" t)))
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s) ("_position" t)))))))))
###           ("_position" G)))
###       ("_position" n)
###       ("_applC" ("_position" While)
###         ("_cargs" ("_position" b) ("_position" c)))
###       ("_lambda" ("_pttrns" ("_position" s) ("_position" t))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" A)
###             ("_cargs" ("_position" s) ("_position" t)))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" evalB)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" fst) ("_position" t))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>VDM_OBJ.validn"
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>VDM_OBJ.validn" ("_position" G) ("_position" n)
###           ("_position" c) ("_position" B)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.All_binder" ("_position" s)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" s)))))
###             ("_applC" ("_position" A)
###               ("_cargs" ("_position" s) ("_position" s)))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.All_binder" ("_position" s)
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" s))))
###               ("\<^const>HOL.All_binder" ("_position" r)
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" B)
###                     ("_cargs" ("_position" s) ("_position" r)))
###                   ("\<^const>HOL.All_binder" ("_position" t)
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" r) ("_position" t)))
###                       ("_applC" ("_position" A)
###                         ("_cargs" ("_position" s) ("_position" t)))))))))
###           ("_position" G))))
###     ("_position" n)
###     ("_applC" ("_position" While)
###       ("_cargs" ("_position" b) ("_position" c)))
###     ("_lambda" ("_pttrns" ("_position" s) ("_position" t))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" A)
###           ("_cargs" ("_position" s) ("_position" t)))
###         ("\<^const>HOL.Not"
###           ("_applC" ("_position" evalB)
###             ("_cargs" ("_position" b)
###               ("_applC" ("_position" fst) ("_position" t)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 210 of "$AFP/SIFPL/VDM_OBJ.thy") produces 25 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>HOL.implies"
###           ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###             ("\<^const>Set.union" ("_Finset" ("_position" A))
###               ("_position" G)))
###           ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###             ("\<^const>Set.member" ("_position" body) ("_position" A)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###       ("\<^const>HOL.implies" ("_position" G)
###         ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" Call)
###           ("_position" A))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.union" ("_Finset" ("_position" A))
###               ("_position" G))
###             ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###               ("\<^const>Set.member" ("_position" body)
###                 ("_position" A))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###       ("\<^const>HOL.implies" ("_position" G)
###         ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" Call)
###           ("_position" A))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>VDM_OBJ.VDM_validn" ("_position" n)
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.union" ("_Finset" ("_position" A))
###               ("_position" G))
###             ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###               ("_position" body)))
###           ("_position" A)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###       ("\<^const>HOL.implies" ("_position" G)
###         ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" Call)
###           ("_position" A))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>HOL.implies"
###           ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###             ("\<^const>Set.union" ("_Finset" ("_position" A))
###               ("_position" G)))
###           ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" body)
###             ("_position" A))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###       ("\<^const>HOL.implies" ("_position" G)
###         ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" Call)
###           ("_position" A))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.union" ("_Finset" ("_position" A))
###               ("_position" G))
###             ("\<^const>VDM_OBJ.VDM_validn" ("_position" n)
###               ("_position" body) ("_position" A)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###       ("\<^const>HOL.implies" ("_position" G)
###         ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" Call)
###           ("_position" A))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>HOL.implies"
###           ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###             ("\<^const>Set.union" ("_Finset" ("_position" A))
###               ("_position" G)))
###           ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###             ("\<^const>Set.member" ("_position" body) ("_position" A)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n) ("_position" G))
###       ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" Call)
###         ("_position" A)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.union" ("_Finset" ("_position" A))
###               ("_position" G))
###             ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###               ("\<^const>Set.member" ("_position" body)
###                 ("_position" A))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n) ("_position" G))
###       ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" Call)
###         ("_position" A)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>VDM_OBJ.VDM_validn" ("_position" n)
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.union" ("_Finset" ("_position" A))
###               ("_position" G))
###             ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###               ("_position" body)))
###           ("_position" A)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n) ("_position" G))
###       ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" Call)
###         ("_position" A)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>HOL.implies"
###           ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###             ("\<^const>Set.union" ("_Finset" ("_position" A))
###               ("_position" G)))
###           ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" body)
###             ("_position" A))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n) ("_position" G))
###       ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" Call)
###         ("_position" A)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n)
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.union" ("_Finset" ("_position" A))
###               ("_position" G))
###             ("\<^const>VDM_OBJ.VDM_validn" ("_position" n)
###               ("_position" body) ("_position" A)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>VDM_OBJ.Ctxt_validn" ("_position" n) ("_position" G))
###       ("\<^const>VDM_OBJ.VDM_validn" ("_position" n) ("_position" Call)
###         ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 223 of "$AFP/SIFPL/VDM_OBJ.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G) ("_position" c)
###       ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" n)
###       ("\<^const>VDM_OBJ.validn" ("_position" G) ("_position" n)
###         ("_position" c) ("_position" A)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G) ("_position" c)
###       ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.validn"
###       ("\<^const>HOL.All_binder" ("_position" n) ("_position" G))
###       ("_position" n) ("_position" c) ("_position" A))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 266 of "$AFP/SIFPL/VDM_OBJ.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("\<^const>Set.empty") ("_position" c)
###       ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid" ("_position" c) ("_position" A))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("\<^const>Set.empty") ("_position" c)
###       ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member" ("_position" c) ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 295 of "$AFP/SIFPL/VDM_OBJ.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" H) ("_position" c)
###       ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" G) ("_idts" ("_position" P) ("_position" D)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" H)
###           ("_applC" ("_position" insert)
###             ("_cargs" ("_position" P) ("_position" D))))
###         ("\<^const>HOL.implies"
###           ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G) ("_position" Call)
###             ("\<^const>HOL.implies" ("_position" P)
###               ("\<^const>Set.subset_eq" ("_position" G) ("_position" D))))
###           ("\<^const>VDM_OBJ.VDM_deriv" ("_position" D) ("_position" c)
###             ("_position" A)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" H) ("_position" c)
###       ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" G) ("_idts" ("_position" P) ("_position" D)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" H)
###           ("_applC" ("_position" insert)
###             ("_cargs" ("_position" P) ("_position" D))))
###         ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G) ("_position" Call)
###           ("\<^const>HOL.implies" ("_position" P)
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.subset_eq" ("_position" G) ("_position" D))
###               ("\<^const>VDM_OBJ.VDM_deriv" ("_position" D) ("_position" c)
###                 ("_position" A)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" H) ("_position" c)
###       ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" G) ("_idts" ("_position" P) ("_position" D)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" H)
###           ("_applC" ("_position" insert)
###             ("_cargs" ("_position" P) ("_position" D))))
###         ("\<^const>HOL.implies"
###           ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G) ("_position" Call)
###             ("_position" P))
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.subset_eq" ("_position" G) ("_position" D))
###             ("\<^const>VDM_OBJ.VDM_deriv" ("_position" D) ("_position" c)
###               ("_position" A))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 414 of "$AFP/SIFPL/VDM_OBJ.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>VDM_OBJ.VDM_valid" ("_position" c)
###     ("_applC" ("_position" SSpec) ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>VDM_OBJ.Ctxt_valid"
###     ("\<^const>Set.member" ("_position" c)
###       ("_applC" ("_position" SSpec) ("_position" c)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 417 of "$AFP/SIFPL/VDM_OBJ.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid" ("_position" c) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" t))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" SSpec)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" s) ("_position" t))))
###         ("_applC" ("_position" A)
###           ("_cargs" ("_position" s) ("_position" t)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member" ("_position" c) ("_position" A))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" t))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" SSpec)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" s) ("_position" t))))
###         ("_applC" ("_position" A)
###           ("_cargs" ("_position" s) ("_position" t)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 503 of "$AFP/SIFPL/VDM_OBJ.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid" ("_position" c) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("\<^const>Set.empty") ("_position" c)
###       ("_position" A))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member" ("_position" c) ("_position" A))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("\<^const>Set.empty") ("_position" c)
###       ("_position" A))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.VDM_OBJ"
### 0.684s elapsed time, 1.092s cpu time, 0.085s GC time
Loading theory "Draft.VS_OBJ" (required by "Draft.ContextOBJMoreTemplates" via "Draft.ContextOBJ")
Proofs for inductive predicate(s) "twiddleValp"
  Proving monotonicity ...
### Ambiguous input (line 95 of "$AFP/SIFPL/VS_OBJ.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" twiddle)
###       ("_cargs" ("_position" \<beta>)
###         ("_cargs" ("_position" s) ("_position" t))))
###     ("\<^const>HOL.conj" ("_applC" ("_position" noLowDPs) ("_position" s))
###       ("\<^const>HOL.conj" ("_applC" ("_position" noLowDPs) ("_position" t))
###         ("\<^const>VS_OBJ.twiddleStore_syntax"
###           ("_applC" ("_position" fst) ("_position" s)) ("_position" \<beta>)
###           ("\<^const>HOL.conj" ("_applC" ("_position" fst) ("_position" t))
###             ("_applC" ("_position" twiddleHeap)
###               ("_cargs" ("_position" \<beta>)
###                 ("_cargs" ("_applC" ("_position" snd) ("_position" s))
###                   ("_applC" ("_position" snd) ("_position" t)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" twiddle)
###       ("_cargs" ("_position" \<beta>)
###         ("_cargs" ("_position" s) ("_position" t))))
###     ("\<^const>HOL.conj" ("_applC" ("_position" noLowDPs) ("_position" s))
###       ("\<^const>HOL.conj" ("_applC" ("_position" noLowDPs) ("_position" t))
###         ("\<^const>HOL.conj"
###           ("\<^const>VS_OBJ.twiddleStore_syntax"
###             ("_applC" ("_position" fst) ("_position" s))
###             ("_position" \<beta>)
###             ("_applC" ("_position" fst) ("_position" t)))
###           ("_applC" ("_position" twiddleHeap)
###             ("_cargs" ("_position" \<beta>)
###               ("_cargs" ("_applC" ("_position" snd) ("_position" s))
###                 ("_applC" ("_position" snd) ("_position" t))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 287 of "$AFP/SIFPL/VS_OBJ.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" Expr_low) ("_position" e))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s)
###         ("_idts" ("_position" t) ("_position" \<beta>)))
###       ("\<^const>VS_OBJ.twiddleStore_syntax" ("_position" s)
###         ("_position" \<beta>)
###         ("\<^const>HOL.implies" ("_position" t)
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" \<beta>)
###               ("_tuple_args"
###                 ("_applC" ("_position" evalE)
###                   ("_cargs" ("_position" e) ("_position" s)))
###                 ("_tuple_arg"
###                   ("_applC" ("_position" evalE)
###                     ("_cargs" ("_position" e) ("_position" t))))))
###             ("_position" twiddleVal)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" Expr_low) ("_position" e))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s)
###         ("_idts" ("_position" t) ("_position" \<beta>)))
###       ("\<^const>HOL.implies"
###         ("\<^const>VS_OBJ.twiddleStore_syntax" ("_position" s)
###           ("_position" \<beta>) ("_position" t))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" \<beta>)
###             ("_tuple_args"
###               ("_applC" ("_position" evalE)
###                 ("_cargs" ("_position" e) ("_position" s)))
###               ("_tuple_arg"
###                 ("_applC" ("_position" evalE)
###                   ("_cargs" ("_position" e) ("_position" t))))))
###           ("_position" twiddleVal))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 294 of "$AFP/SIFPL/VS_OBJ.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" BExpr_low) ("_position" b))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s)
###         ("_idts" ("_position" t) ("_position" \<beta>)))
###       ("\<^const>HOL.eq"
###         ("\<^const>VS_OBJ.twiddleStore_syntax" ("_position" s)
###           ("_position" \<beta>)
###           ("\<^const>HOL.implies" ("_position" t)
###             ("_applC" ("_position" evalB)
###               ("_cargs" ("_position" b) ("_position" s)))))
###         ("_applC" ("_position" evalB)
###           ("_cargs" ("_position" b) ("_position" t)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" BExpr_low) ("_position" b))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s)
###         ("_idts" ("_position" t) ("_position" \<beta>)))
###       ("\<^const>VS_OBJ.twiddleStore_syntax" ("_position" s)
###         ("_position" \<beta>)
###         ("\<^const>HOL.implies" ("_position" t)
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" evalB)
###               ("_cargs" ("_position" b) ("_position" s)))
###             ("_applC" ("_position" evalB)
###               ("_cargs" ("_position" b) ("_position" t)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" BExpr_low) ("_position" b))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s)
###         ("_idts" ("_position" t) ("_position" \<beta>)))
###       ("\<^const>HOL.implies"
###         ("\<^const>VS_OBJ.twiddleStore_syntax" ("_position" s)
###           ("_position" \<beta>) ("_position" t))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" evalB)
###             ("_cargs" ("_position" b) ("_position" s)))
###           ("_applC" ("_position" evalB)
###             ("_cargs" ("_position" b) ("_position" t))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 304 of "$AFP/SIFPL/VS_OBJ.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" secure) ("_position" c))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s)
###         ("_idts" ("_position" ss)
###           ("_idts" ("_position" t)
###             ("_idts" ("_position" tt) ("_position" \<beta>)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###           ("_position" \<beta>)
###           ("\<^const>HOL.implies" ("_position" ss)
###             ("\<^const>OBJ.Sem" ("_position" s) ("_position" c)
###               ("_position" t))))
###         ("\<^const>HOL.implies"
###           ("\<^const>OBJ.Sem" ("_position" ss) ("_position" c)
###             ("_position" tt))
###           ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###             ("\<^const>HOL.conj"
###               ("\<^const>VS_OBJ.twiddle_syntax" ("_position" t)
###                 ("_position" \<gamma>) ("_position" tt))
###               ("_applC" ("_position" Pbij_extends)
###                 ("_cargs" ("_position" \<gamma>)
###                   ("_position" \<beta>))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" secure) ("_position" c))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s)
###         ("_idts" ("_position" ss)
###           ("_idts" ("_position" t)
###             ("_idts" ("_position" tt) ("_position" \<beta>)))))
###       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###         ("_position" \<beta>)
###         ("\<^const>HOL.implies" ("_position" ss)
###           ("\<^const>HOL.implies"
###             ("\<^const>OBJ.Sem" ("_position" s) ("_position" c)
###               ("_position" t))
###             ("\<^const>HOL.implies"
###               ("\<^const>OBJ.Sem" ("_position" ss) ("_position" c)
###                 ("_position" tt))
###               ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>VS_OBJ.twiddle_syntax" ("_position" t)
###                     ("_position" \<gamma>) ("_position" tt))
###                   ("_applC" ("_position" Pbij_extends)
###                     ("_cargs" ("_position" \<gamma>)
###                       ("_position" \<beta>))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" secure) ("_position" c))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s)
###         ("_idts" ("_position" ss)
###           ("_idts" ("_position" t)
###             ("_idts" ("_position" tt) ("_position" \<beta>)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###           ("_position" \<beta>) ("_position" ss))
###         ("\<^const>HOL.implies"
###           ("\<^const>OBJ.Sem" ("_position" s) ("_position" c)
###             ("_position" t))
###           ("\<^const>HOL.implies"
###             ("\<^const>OBJ.Sem" ("_position" ss) ("_position" c)
###               ("_position" tt))
###             ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###               ("\<^const>HOL.conj"
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" t)
###                   ("_position" \<gamma>) ("_position" tt))
###                 ("_applC" ("_position" Pbij_extends)
###                   ("_cargs" ("_position" \<gamma>)
###                     ("_position" \<beta>)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" secure) ("_position" c))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s)
###         ("_idts" ("_position" ss)
###           ("_idts" ("_position" t)
###             ("_idts" ("_position" tt) ("_position" \<beta>)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###           ("_position" \<beta>)
###           ("\<^const>HOL.implies" ("_position" ss)
###             ("\<^const>HOL.implies"
###               ("\<^const>OBJ.Sem" ("_position" s) ("_position" c)
###                 ("_position" t))
###               ("\<^const>OBJ.Sem" ("_position" ss) ("_position" c)
###                 ("_position" tt)))))
###         ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###           ("\<^const>HOL.conj"
###             ("\<^const>VS_OBJ.twiddle_syntax" ("_position" t)
###               ("_position" \<gamma>) ("_position" tt))
###             ("_applC" ("_position" Pbij_extends)
###               ("_cargs" ("_position" \<gamma>) ("_position" \<beta>)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" secure) ("_position" c))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s)
###         ("_idts" ("_position" ss)
###           ("_idts" ("_position" t)
###             ("_idts" ("_position" tt) ("_position" \<beta>)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###           ("_position" \<beta>)
###           ("\<^const>HOL.implies" ("_position" ss)
###             ("\<^const>OBJ.Sem" ("_position" s) ("_position" c)
###               ("_position" t))))
###         ("\<^const>HOL.implies"
###           ("\<^const>OBJ.Sem" ("_position" ss) ("_position" c)
###             ("_position" tt))
###           ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###             ("\<^const>VS_OBJ.twiddle_syntax" ("_position" t)
###               ("_position" \<gamma>)
###               ("\<^const>HOL.conj" ("_position" tt)
###                 ("_applC" ("_position" Pbij_extends)
###                   ("_cargs" ("_position" \<gamma>)
###                     ("_position" \<beta>)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" secure) ("_position" c))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s)
###         ("_idts" ("_position" ss)
###           ("_idts" ("_position" t)
###             ("_idts" ("_position" tt) ("_position" \<beta>)))))
###       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###         ("_position" \<beta>)
###         ("\<^const>HOL.implies" ("_position" ss)
###           ("\<^const>HOL.implies"
###             ("\<^const>OBJ.Sem" ("_position" s) ("_position" c)
###               ("_position" t))
###             ("\<^const>HOL.implies"
###               ("\<^const>OBJ.Sem" ("_position" ss) ("_position" c)
###                 ("_position" tt))
###               ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" t)
###                   ("_position" \<gamma>)
###                   ("\<^const>HOL.conj" ("_position" tt)
###                     ("_applC" ("_position" Pbij_extends)
###                       ("_cargs" ("_position" \<gamma>)
###                         ("_position" \<beta>)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" secure) ("_position" c))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s)
###         ("_idts" ("_position" ss)
###           ("_idts" ("_position" t)
###             ("_idts" ("_position" tt) ("_position" \<beta>)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###           ("_position" \<beta>) ("_position" ss))
###         ("\<^const>HOL.implies"
###           ("\<^const>OBJ.Sem" ("_position" s) ("_position" c)
###             ("_position" t))
###           ("\<^const>HOL.implies"
###             ("\<^const>OBJ.Sem" ("_position" ss) ("_position" c)
###               ("_position" tt))
###             ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###               ("\<^const>VS_OBJ.twiddle_syntax" ("_position" t)
###                 ("_position" \<gamma>)
###                 ("\<^const>HOL.conj" ("_position" tt)
###                   ("_applC" ("_position" Pbij_extends)
###                     ("_cargs" ("_position" \<gamma>)
###                       ("_position" \<beta>))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" secure) ("_position" c))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s)
###         ("_idts" ("_position" ss)
###           ("_idts" ("_position" t)
###             ("_idts" ("_position" tt) ("_position" \<beta>)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###           ("_position" \<beta>)
###           ("\<^const>HOL.implies" ("_position" ss)
###             ("\<^const>HOL.implies"
###               ("\<^const>OBJ.Sem" ("_position" s) ("_position" c)
###                 ("_position" t))
###               ("\<^const>OBJ.Sem" ("_position" ss) ("_position" c)
###                 ("_position" tt)))))
###         ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###           ("\<^const>VS_OBJ.twiddle_syntax" ("_position" t)
###             ("_position" \<gamma>)
###             ("\<^const>HOL.conj" ("_position" tt)
###               ("_applC" ("_position" Pbij_extends)
###                 ("_cargs" ("_position" \<gamma>)
###                   ("_position" \<beta>))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 444 of "$AFP/SIFPL/VS_OBJ.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Sec)
###       ("_cargs" ("_position" \<Phi>)
###         ("_cargs" ("_position" s) ("_position" t))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" r) ("_position" \<beta>))
###         ("\<^const>HOL.implies"
###           ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###             ("_position" \<beta>) ("_position" r))
###           ("_applC" ("_position" \<Phi>)
###             ("_tuple" ("_position" t)
###               ("_tuple_args" ("_position" r)
###                 ("_tuple_arg" ("_position" \<beta>)))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" r) ("_position" \<beta>))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" \<Phi>)
###             ("_tuple" ("_position" r)
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" \<beta>)))))
###           ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###             ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###               ("_position" \<gamma>)
###               ("\<^const>HOL.conj" ("_position" t)
###                 ("_applC" ("_position" Pbij_extends)
###                   ("_cargs" ("_position" \<gamma>)
###                     ("_position" \<beta>)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Sec)
###       ("_cargs" ("_position" \<Phi>)
###         ("_cargs" ("_position" s) ("_position" t))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" r) ("_position" \<beta>))
###         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###           ("_position" \<beta>)
###           ("\<^const>HOL.implies" ("_position" r)
###             ("_applC" ("_position" \<Phi>)
###               ("_tuple" ("_position" t)
###                 ("_tuple_args" ("_position" r)
###                   ("_tuple_arg" ("_position" \<beta>))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" r) ("_position" \<beta>))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" \<Phi>)
###             ("_tuple" ("_position" r)
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" \<beta>)))))
###           ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###             ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###               ("_position" \<gamma>)
###               ("\<^const>HOL.conj" ("_position" t)
###                 ("_applC" ("_position" Pbij_extends)
###                   ("_cargs" ("_position" \<gamma>)
###                     ("_position" \<beta>)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Sec)
###       ("_cargs" ("_position" \<Phi>)
###         ("_cargs" ("_position" s) ("_position" t))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" r) ("_position" \<beta>))
###         ("\<^const>HOL.implies"
###           ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###             ("_position" \<beta>) ("_position" r))
###           ("_applC" ("_position" \<Phi>)
###             ("_tuple" ("_position" t)
###               ("_tuple_args" ("_position" r)
###                 ("_tuple_arg" ("_position" \<beta>)))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" r) ("_position" \<beta>))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" \<Phi>)
###             ("_tuple" ("_position" r)
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" \<beta>)))))
###           ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###             ("\<^const>HOL.conj"
###               ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                 ("_position" \<gamma>) ("_position" t))
###               ("_applC" ("_position" Pbij_extends)
###                 ("_cargs" ("_position" \<gamma>)
###                   ("_position" \<beta>))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Sec)
###       ("_cargs" ("_position" \<Phi>)
###         ("_cargs" ("_position" s) ("_position" t))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" r) ("_position" \<beta>))
###         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###           ("_position" \<beta>)
###           ("\<^const>HOL.implies" ("_position" r)
###             ("_applC" ("_position" \<Phi>)
###               ("_tuple" ("_position" t)
###                 ("_tuple_args" ("_position" r)
###                   ("_tuple_arg" ("_position" \<beta>))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" r) ("_position" \<beta>))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" \<Phi>)
###             ("_tuple" ("_position" r)
###               ("_tuple_args" ("_position" s)
###                 ("_tuple_arg" ("_position" \<beta>)))))
###           ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###             ("\<^const>HOL.conj"
###               ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                 ("_position" \<gamma>) ("_position" t))
###               ("_applC" ("_position" Pbij_extends)
###                 ("_cargs" ("_position" \<gamma>)
###                   ("_position" \<beta>))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 452 of "$AFP/SIFPL/VS_OBJ.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid" ("_position" c)
###       ("_applC" ("_position" Sec) ("_position" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member" ("_position" c)
###         ("_applC" ("_position" Sec) ("_position" \<Phi>)))))
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 466 of "$AFP/SIFPL/VS_OBJ.thy") produces 18 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid" ("_position" c)
###       ("_applC" ("_position" Sec)
###         ("\<^const>HOL.conj"
###           ("\<^const>OBJ.Sem"
###             ("_lambda"
###               ("_pattern" ("_position" r)
###                 ("_patterns" ("_position" t) ("_position" \<beta>)))
###               ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" s)))
###             ("_position" c) ("_position" r))
###           ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###             ("_position" \<beta>) ("_position" t)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member" ("_position" c)
###         ("_applC" ("_position" Sec)
###           ("\<^const>HOL.conj"
###             ("\<^const>OBJ.Sem"
###               ("_lambda"
###                 ("_pattern" ("_position" r)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" s)))
###               ("_position" c) ("_position" r))
###             ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###               ("_position" \<beta>) ("_position" t))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid" ("_position" c)
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" r)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder" ("_position" s)
###             ("\<^const>HOL.conj"
###               ("\<^const>OBJ.Sem" ("_position" s) ("_position" c)
###                 ("_position" r))
###               ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                 ("_position" \<beta>) ("_position" t)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member" ("_position" c)
###         ("_applC" ("_position" Sec)
###           ("_lambda"
###             ("_pattern" ("_position" r)
###               ("_patterns" ("_position" t) ("_position" \<beta>)))
###             ("\<^const>HOL.Ex_binder" ("_position" s)
###               ("\<^const>HOL.conj"
###                 ("\<^const>OBJ.Sem" ("_position" s) ("_position" c)
###                   ("_position" r))
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                   ("_position" \<beta>) ("_position" t))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid" ("_position" c)
###       ("_applC" ("_position" Sec)
###         ("\<^const>OBJ.Sem"
###           ("_lambda"
###             ("_pattern" ("_position" r)
###               ("_patterns" ("_position" t) ("_position" \<beta>)))
###             ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" s)))
###           ("_position" c)
###           ("\<^const>HOL.conj" ("_position" r)
###             ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###               ("_position" \<beta>) ("_position" t))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member" ("_position" c)
###         ("_applC" ("_position" Sec)
###           ("\<^const>OBJ.Sem"
###             ("_lambda"
###               ("_pattern" ("_position" r)
###                 ("_patterns" ("_position" t) ("_position" \<beta>)))
###               ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" s)))
###             ("_position" c)
###             ("\<^const>HOL.conj" ("_position" r)
###               ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                 ("_position" \<beta>) ("_position" t)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid" ("_position" c)
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" r)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder" ("_position" s)
###             ("\<^const>OBJ.Sem" ("_position" s) ("_position" c)
###               ("\<^const>HOL.conj" ("_position" r)
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                   ("_position" \<beta>) ("_position" t))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member" ("_position" c)
###         ("_applC" ("_position" Sec)
###           ("_lambda"
###             ("_pattern" ("_position" r)
###               ("_patterns" ("_position" t) ("_position" \<beta>)))
###             ("\<^const>HOL.Ex_binder" ("_position" s)
###               ("\<^const>OBJ.Sem" ("_position" s) ("_position" c)
###                 ("\<^const>HOL.conj" ("_position" r)
###                   ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                     ("_position" \<beta>) ("_position" t)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid" ("_position" c)
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" r)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>OBJ.Sem"
###             ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" s))
###             ("_position" c)
###             ("\<^const>HOL.conj" ("_position" r)
###               ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                 ("_position" \<beta>) ("_position" t)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member" ("_position" c)
###         ("_applC" ("_position" Sec)
###           ("_lambda"
###             ("_pattern" ("_position" r)
###               ("_patterns" ("_position" t) ("_position" \<beta>)))
###             ("\<^const>OBJ.Sem"
###               ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" s))
###               ("_position" c)
###               ("\<^const>HOL.conj" ("_position" r)
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                   ("_position" \<beta>) ("_position" t))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 489 of "$AFP/SIFPL/VS_OBJ.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<Phi>)
###       ("\<^const>VDM_OBJ.VDM_valid" ("_position" c)
###         ("_applC" ("_position" Sec) ("_position" \<Phi>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" secure) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<Phi>)
###       ("\<^const>VDM_OBJ.Ctxt_valid"
###         ("\<^const>Set.member" ("_position" c)
###           ("_applC" ("_position" Sec) ("_position" \<Phi>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 495 of "$AFP/SIFPL/VS_OBJ.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" secure) ("_position" c))
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member" ("_position" c)
###         ("_applC" ("_position" Sec)
###           ("_lambda"
###             ("_pattern" ("_position" r)
###               ("_patterns" ("_position" t) ("_position" \<beta>)))
###             ("\<^const>HOL.Ex_binder" ("_position" s)
###               ("\<^const>HOL.conj"
###                 ("\<^const>OBJ.Sem" ("_position" s) ("_position" c)
###                   ("_position" r))
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                   ("_position" \<beta>) ("_position" t))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" secure) ("_position" c))
###     ("\<^const>VDM_OBJ.VDM_valid" ("_position" c)
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" r)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder" ("_position" s)
###             ("\<^const>HOL.conj"
###               ("\<^const>OBJ.Sem" ("_position" s) ("_position" c)
###                 ("_position" r))
###               ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                 ("_position" \<beta>) ("_position" t)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 507 of "$AFP/SIFPL/VS_OBJ.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>VDM_OBJ.VDM_valid" ("_position" Skip)
###     ("_applC" ("_position" Sec)
###       ("_lambda"
###         ("_pattern" ("_position" s)
###           ("_patterns" ("_position" t) ("_position" \<beta>)))
###         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###           ("_position" \<beta>) ("_position" t))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>VDM_OBJ.Ctxt_valid"
###     ("\<^const>Set.member" ("_position" Skip)
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###             ("_position" \<beta>) ("_position" t)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 585 of "$AFP/SIFPL/VS_OBJ.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM_OBJ.Ctxt_valid"
###         ("\<^const>Set.member" ("_position" c1)
###           ("_applC" ("_position" Sec) ("_position" \<Phi>)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.Ctxt_valid"
###           ("\<^const>Set.member" ("_position" c2)
###             ("_applC" ("_position" Sec) ("_position" \<Psi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid"
###       ("_applC" ("_position" Comp)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder" ("_position" r)
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" \<Phi>)
###                 ("_tuple" ("_position" r)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>)))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" w) ("_position" \<gamma>))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                     ("_position" \<gamma>) ("_position" w))
###                   ("_applC" ("_position" \<Psi>)
###                     ("_tuple" ("_position" s)
###                       ("_tuple_args" ("_position" w)
###                         ("_tuple_arg" ("_position" \<gamma>))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM_OBJ.VDM_valid" ("_position" c1)
###         ("_applC" ("_position" Sec) ("_position" \<Phi>))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.Ctxt_valid"
###           ("\<^const>Set.member" ("_position" c2)
###             ("_applC" ("_position" Sec) ("_position" \<Psi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid"
###       ("_applC" ("_position" Comp)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder" ("_position" r)
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" \<Phi>)
###                 ("_tuple" ("_position" r)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>)))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" w) ("_position" \<gamma>))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                     ("_position" \<gamma>) ("_position" w))
###                   ("_applC" ("_position" \<Psi>)
###                     ("_tuple" ("_position" s)
###                       ("_tuple_args" ("_position" w)
###                         ("_tuple_arg" ("_position" \<gamma>))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM_OBJ.Ctxt_valid"
###         ("\<^const>Set.member" ("_position" c1)
###           ("_applC" ("_position" Sec) ("_position" \<Phi>)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.VDM_valid" ("_position" c2)
###           ("_applC" ("_position" Sec) ("_position" \<Psi>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid"
###       ("_applC" ("_position" Comp)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder" ("_position" r)
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" \<Phi>)
###                 ("_tuple" ("_position" r)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>)))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" w) ("_position" \<gamma>))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                     ("_position" \<gamma>) ("_position" w))
###                   ("_applC" ("_position" \<Psi>)
###                     ("_tuple" ("_position" s)
###                       ("_tuple_args" ("_position" w)
###                         ("_tuple_arg" ("_position" \<gamma>))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM_OBJ.VDM_valid" ("_position" c1)
###         ("_applC" ("_position" Sec) ("_position" \<Phi>))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.VDM_valid" ("_position" c2)
###           ("_applC" ("_position" Sec) ("_position" \<Psi>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid"
###       ("_applC" ("_position" Comp)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder" ("_position" r)
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" \<Phi>)
###                 ("_tuple" ("_position" r)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>)))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" w) ("_position" \<gamma>))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                     ("_position" \<gamma>) ("_position" w))
###                   ("_applC" ("_position" \<Psi>)
###                     ("_tuple" ("_position" s)
###                       ("_tuple_args" ("_position" w)
###                         ("_tuple_arg" ("_position" \<gamma>))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM_OBJ.Ctxt_valid"
###         ("\<^const>Set.member" ("_position" c1)
###           ("_applC" ("_position" Sec) ("_position" \<Phi>)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.Ctxt_valid"
###           ("\<^const>Set.member" ("_position" c2)
###             ("_applC" ("_position" Sec) ("_position" \<Psi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" Comp)
###           ("_cargs" ("_position" c1) ("_position" c2)))
###         ("_applC" ("_position" Sec)
###           ("_lambda"
###             ("_pattern" ("_position" s)
###               ("_patterns" ("_position" t) ("_position" \<beta>)))
###             ("\<^const>HOL.Ex_binder" ("_position" r)
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<Phi>)
###                   ("_tuple" ("_position" r)
###                     ("_tuple_args" ("_position" t)
###                       ("_tuple_arg" ("_position" \<beta>)))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" w) ("_position" \<gamma>))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                       ("_position" \<gamma>) ("_position" w))
###                     ("_applC" ("_position" \<Psi>)
###                       ("_tuple" ("_position" s)
###                         ("_tuple_args" ("_position" w)
###                           ("_tuple_arg" ("_position" \<gamma>)))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM_OBJ.VDM_valid" ("_position" c1)
###         ("_applC" ("_position" Sec) ("_position" \<Phi>))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.Ctxt_valid"
###           ("\<^const>Set.member" ("_position" c2)
###             ("_applC" ("_position" Sec) ("_position" \<Psi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" Comp)
###           ("_cargs" ("_position" c1) ("_position" c2)))
###         ("_applC" ("_position" Sec)
###           ("_lambda"
###             ("_pattern" ("_position" s)
###               ("_patterns" ("_position" t) ("_position" \<beta>)))
###             ("\<^const>HOL.Ex_binder" ("_position" r)
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<Phi>)
###                   ("_tuple" ("_position" r)
###                     ("_tuple_args" ("_position" t)
###                       ("_tuple_arg" ("_position" \<beta>)))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" w) ("_position" \<gamma>))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                       ("_position" \<gamma>) ("_position" w))
###                     ("_applC" ("_position" \<Psi>)
###                       ("_tuple" ("_position" s)
###                         ("_tuple_args" ("_position" w)
###                           ("_tuple_arg" ("_position" \<gamma>)))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM_OBJ.Ctxt_valid"
###         ("\<^const>Set.member" ("_position" c1)
###           ("_applC" ("_position" Sec) ("_position" \<Phi>)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.VDM_valid" ("_position" c2)
###           ("_applC" ("_position" Sec) ("_position" \<Psi>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" Comp)
###           ("_cargs" ("_position" c1) ("_position" c2)))
###         ("_applC" ("_position" Sec)
###           ("_lambda"
###             ("_pattern" ("_position" s)
###               ("_patterns" ("_position" t) ("_position" \<beta>)))
###             ("\<^const>HOL.Ex_binder" ("_position" r)
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<Phi>)
###                   ("_tuple" ("_position" r)
###                     ("_tuple_args" ("_position" t)
###                       ("_tuple_arg" ("_position" \<beta>)))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" w) ("_position" \<gamma>))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                       ("_position" \<gamma>) ("_position" w))
###                     ("_applC" ("_position" \<Psi>)
###                       ("_tuple" ("_position" s)
###                         ("_tuple_args" ("_position" w)
###                           ("_tuple_arg" ("_position" \<gamma>)))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM_OBJ.VDM_valid" ("_position" c1)
###         ("_applC" ("_position" Sec) ("_position" \<Phi>))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.VDM_valid" ("_position" c2)
###           ("_applC" ("_position" Sec) ("_position" \<Psi>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" Comp)
###           ("_cargs" ("_position" c1) ("_position" c2)))
###         ("_applC" ("_position" Sec)
###           ("_lambda"
###             ("_pattern" ("_position" s)
###               ("_patterns" ("_position" t) ("_position" \<beta>)))
###             ("\<^const>HOL.Ex_binder" ("_position" r)
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<Phi>)
###                   ("_tuple" ("_position" r)
###                     ("_tuple_args" ("_position" t)
###                       ("_tuple_arg" ("_position" \<beta>)))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" w) ("_position" \<gamma>))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                       ("_position" \<gamma>) ("_position" w))
###                     ("_applC" ("_position" \<Psi>)
###                       ("_tuple" ("_position" s)
###                         ("_tuple_args" ("_position" w)
###                           ("_tuple_arg" ("_position" \<gamma>)))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM_OBJ.Ctxt_valid"
###         ("\<^const>Set.member" ("_position" c1)
###           ("_applC" ("_position" Sec) ("_position" \<Phi>)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.Ctxt_valid"
###           ("\<^const>Set.member" ("_position" c2)
###             ("_applC" ("_position" Sec) ("_position" \<Psi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid"
###       ("_applC" ("_position" Comp)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder" ("_position" r)
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" \<Phi>)
###                 ("_tuple" ("_position" r)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>)))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" w) ("_position" \<gamma>))
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                   ("_position" \<gamma>)
###                   ("\<^const>HOL.implies" ("_position" w)
###                     ("_applC" ("_position" \<Psi>)
###                       ("_tuple" ("_position" s)
###                         ("_tuple_args" ("_position" w)
###                           ("_tuple_arg" ("_position" \<gamma>)))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM_OBJ.VDM_valid" ("_position" c1)
###         ("_applC" ("_position" Sec) ("_position" \<Phi>))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.Ctxt_valid"
###           ("\<^const>Set.member" ("_position" c2)
###             ("_applC" ("_position" Sec) ("_position" \<Psi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid"
###       ("_applC" ("_position" Comp)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder" ("_position" r)
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" \<Phi>)
###                 ("_tuple" ("_position" r)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>)))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" w) ("_position" \<gamma>))
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                   ("_position" \<gamma>)
###                   ("\<^const>HOL.implies" ("_position" w)
###                     ("_applC" ("_position" \<Psi>)
###                       ("_tuple" ("_position" s)
###                         ("_tuple_args" ("_position" w)
###                           ("_tuple_arg" ("_position" \<gamma>)))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 633 of "$AFP/SIFPL/VS_OBJ.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G) ("_position" c1)
###         ("_applC" ("_position" Sec) ("_position" \<Phi>))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G) ("_position" c2)
###           ("_applC" ("_position" Sec) ("_position" \<Psi>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G)
###       ("_applC" ("_position" Comp)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder" ("_position" r)
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" \<Phi>)
###                 ("_tuple" ("_position" r)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>)))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" w) ("_position" \<gamma>))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                     ("_position" \<gamma>) ("_position" w))
###                   ("_applC" ("_position" \<Psi>)
###                     ("_tuple" ("_position" s)
###                       ("_tuple_args" ("_position" w)
###                         ("_tuple_arg" ("_position" \<gamma>))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G) ("_position" c1)
###         ("_applC" ("_position" Sec) ("_position" \<Phi>))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G) ("_position" c2)
###           ("_applC" ("_position" Sec) ("_position" \<Psi>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G)
###       ("_applC" ("_position" Comp)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder" ("_position" r)
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" \<Phi>)
###                 ("_tuple" ("_position" r)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>)))))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" w) ("_position" \<gamma>))
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                   ("_position" \<gamma>)
###                   ("\<^const>HOL.implies" ("_position" w)
###                     ("_applC" ("_position" \<Psi>)
###                       ("_tuple" ("_position" s)
###                         ("_tuple_args" ("_position" w)
###                           ("_tuple_arg" ("_position" \<gamma>)))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 678 of "$AFP/SIFPL/VS_OBJ.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" BExpr_low) ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.Ctxt_valid"
###           ("\<^const>Set.member" ("_position" c1)
###             ("_applC" ("_position" Sec) ("_position" \<Phi>)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>VDM_OBJ.Ctxt_valid"
###             ("\<^const>Set.member" ("_position" c2)
###               ("_applC" ("_position" Sec) ("_position" \<Psi>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid"
###       ("_applC" ("_position" Iff)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c1) ("_position" c2))))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" t))))
###               ("_applC" ("_position" \<Phi>)
###                 ("_tuple" ("_position" s)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>))))))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" evalB)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" fst) ("_position" t)))))
###               ("_applC" ("_position" \<Psi>)
###                 ("_tuple" ("_position" s)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" BExpr_low) ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.VDM_valid" ("_position" c1)
###           ("_applC" ("_position" Sec) ("_position" \<Phi>))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>VDM_OBJ.Ctxt_valid"
###             ("\<^const>Set.member" ("_position" c2)
###               ("_applC" ("_position" Sec) ("_position" \<Psi>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid"
###       ("_applC" ("_position" Iff)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c1) ("_position" c2))))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" t))))
###               ("_applC" ("_position" \<Phi>)
###                 ("_tuple" ("_position" s)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>))))))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" evalB)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" fst) ("_position" t)))))
###               ("_applC" ("_position" \<Psi>)
###                 ("_tuple" ("_position" s)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" BExpr_low) ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.Ctxt_valid"
###           ("\<^const>Set.member" ("_position" c1)
###             ("_applC" ("_position" Sec) ("_position" \<Phi>)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>VDM_OBJ.VDM_valid" ("_position" c2)
###             ("_applC" ("_position" Sec) ("_position" \<Psi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid"
###       ("_applC" ("_position" Iff)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c1) ("_position" c2))))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" t))))
###               ("_applC" ("_position" \<Phi>)
###                 ("_tuple" ("_position" s)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>))))))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" evalB)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" fst) ("_position" t)))))
###               ("_applC" ("_position" \<Psi>)
###                 ("_tuple" ("_position" s)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" BExpr_low) ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.VDM_valid" ("_position" c1)
###           ("_applC" ("_position" Sec) ("_position" \<Phi>))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>VDM_OBJ.VDM_valid" ("_position" c2)
###             ("_applC" ("_position" Sec) ("_position" \<Psi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_valid"
###       ("_applC" ("_position" Iff)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c1) ("_position" c2))))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" t))))
###               ("_applC" ("_position" \<Phi>)
###                 ("_tuple" ("_position" s)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>))))))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" evalB)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" fst) ("_position" t)))))
###               ("_applC" ("_position" \<Psi>)
###                 ("_tuple" ("_position" s)
###                   ("_tuple_args" ("_position" t)
###                     ("_tuple_arg" ("_position" \<beta>))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" BExpr_low) ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.Ctxt_valid"
###           ("\<^const>Set.member" ("_position" c1)
###             ("_applC" ("_position" Sec) ("_position" \<Phi>)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>VDM_OBJ.Ctxt_valid"
###             ("\<^const>Set.member" ("_position" c2)
###               ("_applC" ("_position" Sec) ("_position" \<Psi>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" Iff)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c1) ("_position" c2))))
###         ("_applC" ("_position" Sec)
###           ("_lambda"
###             ("_pattern" ("_position" s)
###               ("_patterns" ("_position" t) ("_position" \<beta>)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" evalB)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" fst) ("_position" t))))
###                 ("_applC" ("_position" \<Phi>)
###                   ("_tuple" ("_position" s)
###                     ("_tuple_args" ("_position" t)
###                       ("_tuple_arg" ("_position" \<beta>))))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" evalB)
###                     ("_cargs" ("_position" b)
###                       ("_applC" ("_position" fst) ("_position" t)))))
###                 ("_applC" ("_position" \<Psi>)
###                   ("_tuple" ("_position" s)
###                     ("_tuple_args" ("_position" t)
###                       ("_tuple_arg" ("_position" \<beta>)))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" BExpr_low) ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.VDM_valid" ("_position" c1)
###           ("_applC" ("_position" Sec) ("_position" \<Phi>))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>VDM_OBJ.Ctxt_valid"
###             ("\<^const>Set.member" ("_position" c2)
###               ("_applC" ("_position" Sec) ("_position" \<Psi>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" Iff)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c1) ("_position" c2))))
###         ("_applC" ("_position" Sec)
###           ("_lambda"
###             ("_pattern" ("_position" s)
###               ("_patterns" ("_position" t) ("_position" \<beta>)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" evalB)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" fst) ("_position" t))))
###                 ("_applC" ("_position" \<Phi>)
###                   ("_tuple" ("_position" s)
###                     ("_tuple_args" ("_position" t)
###                       ("_tuple_arg" ("_position" \<beta>))))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" evalB)
###                     ("_cargs" ("_position" b)
###                       ("_applC" ("_position" fst) ("_position" t)))))
###                 ("_applC" ("_position" \<Psi>)
###                   ("_tuple" ("_position" s)
###                     ("_tuple_args" ("_position" t)
###                       ("_tuple_arg" ("_position" \<beta>)))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" BExpr_low) ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.Ctxt_valid"
###           ("\<^const>Set.member" ("_position" c1)
###             ("_applC" ("_position" Sec) ("_position" \<Phi>)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>VDM_OBJ.VDM_valid" ("_position" c2)
###             ("_applC" ("_position" Sec) ("_position" \<Psi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" Iff)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c1) ("_position" c2))))
###         ("_applC" ("_position" Sec)
###           ("_lambda"
###             ("_pattern" ("_position" s)
###               ("_patterns" ("_position" t) ("_position" \<beta>)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" evalB)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" fst) ("_position" t))))
###                 ("_applC" ("_position" \<Phi>)
###                   ("_tuple" ("_position" s)
###                     ("_tuple_args" ("_position" t)
###                       ("_tuple_arg" ("_position" \<beta>))))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" evalB)
###                     ("_cargs" ("_position" b)
###                       ("_applC" ("_position" fst) ("_position" t)))))
###                 ("_applC" ("_position" \<Psi>)
###                   ("_tuple" ("_position" s)
###                     ("_tuple_args" ("_position" t)
###                       ("_tuple_arg" ("_position" \<beta>)))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" BExpr_low) ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM_OBJ.VDM_valid" ("_position" c1)
###           ("_applC" ("_position" Sec) ("_position" \<Phi>))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>VDM_OBJ.VDM_valid" ("_position" c2)
###             ("_applC" ("_position" Sec) ("_position" \<Psi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.Ctxt_valid"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" Iff)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c1) ("_position" c2))))
###         ("_applC" ("_position" Sec)
###           ("_lambda"
###             ("_pattern" ("_position" s)
###               ("_patterns" ("_position" t) ("_position" \<beta>)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" evalB)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" fst) ("_position" t))))
###                 ("_applC" ("_position" \<Phi>)
###                   ("_tuple" ("_position" s)
###                     ("_tuple_args" ("_position" t)
###                       ("_tuple_arg" ("_position" \<beta>))))))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" evalB)
###                     ("_cargs" ("_position" b)
###                       ("_applC" ("_position" fst) ("_position" t)))))
###                 ("_applC" ("_position" \<Psi>)
###                   ("_tuple" ("_position" s)
###                     ("_tuple_args" ("_position" t)
###                       ("_tuple_arg" ("_position" \<beta>)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 763 of "$AFP/SIFPL/VS_OBJ.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###       ("_position" low)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G)
###       ("_applC" ("_position" New)
###         ("_cargs" ("_position" x) ("_position" C)))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" l) ("_position" r))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member" ("_position" l)
###                 ("_applC" ("_position" Dom)
###                   ("_applC" ("_position" snd) ("_position" r))))
###               ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                 ("_position" \<beta>)
###                 ("\<^const>HOL.conj" ("_position" t)
###                   ("\<^const>HOL.eq" ("_position" s)
###                     ("_tuple"
###                       ("_applC" ("_position" update)
###                         ("_cargs"
###                           ("_applC" ("_position" fst) ("_position" r))
###                           ("_cargs" ("_position" x)
###                             ("_applC" ("_position" RVal)
###                               ("_applC" ("_position" Loc)
###                                 ("_position" l))))))
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" l)
###                             ("_tuple_arg"
###                               ("_tuple" ("_position" C)
###                                 ("_tuple_arg" ("\<^const>List.list.Nil")))))
###                           ("_applC" ("_position" snd)
###                             ("_position" r)))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###       ("_position" low)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G)
###       ("_applC" ("_position" New)
###         ("_cargs" ("_position" x) ("_position" C)))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" l) ("_position" r))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member" ("_position" l)
###                 ("_applC" ("_position" Dom)
###                   ("_applC" ("_position" snd) ("_position" r))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                   ("_position" \<beta>) ("_position" t))
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_tuple"
###                     ("_applC" ("_position" update)
###                       ("_cargs" ("_applC" ("_position" fst) ("_position" r))
###                         ("_cargs" ("_position" x)
###                           ("_applC" ("_position" RVal)
###                             ("_applC" ("_position" Loc) ("_position" l))))))
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" l)
###                           ("_tuple_arg"
###                             ("_tuple" ("_position" C)
###                               ("_tuple_arg" ("\<^const>List.list.Nil")))))
###                         ("_applC" ("_position" snd)
###                           ("_position" r))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###       ("_position" low)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G)
###       ("_applC" ("_position" New)
###         ("_cargs" ("_position" x) ("_position" C)))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" l) ("_position" r))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member" ("_position" l)
###                 ("_applC" ("_position" Dom)
###                   ("_applC" ("_position" snd) ("_position" r))))
###               ("\<^const>HOL.eq"
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                   ("_position" \<beta>)
###                   ("\<^const>HOL.conj" ("_position" t) ("_position" s)))
###                 ("_tuple"
###                   ("_applC" ("_position" update)
###                     ("_cargs" ("_applC" ("_position" fst) ("_position" r))
###                       ("_cargs" ("_position" x)
###                         ("_applC" ("_position" RVal)
###                           ("_applC" ("_position" Loc) ("_position" l))))))
###                   ("_tuple_arg"
###                     ("\<^const>List.list.Cons"
###                       ("_tuple" ("_position" l)
###                         ("_tuple_arg"
###                           ("_tuple" ("_position" C)
###                             ("_tuple_arg" ("\<^const>List.list.Nil")))))
###                       ("_applC" ("_position" snd)
###                         ("_position" r)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 823 of "$AFP/SIFPL/VS_OBJ.thy") produces 3 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" y))
###         ("_position" low)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G)
###       ("_applC" ("_position" Get)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" y) ("_position" f))))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" C)
###                   ("_idts" ("_position" Flds) ("_position" v)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                   ("_position" y))
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" l))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" lookup)
###                     ("_cargs" ("_applC" ("_position" snd) ("_position" r))
###                       ("_position" l)))
###                   ("_applC" ("_position" Some)
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" Flds)))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" lookup)
###                       ("_cargs" ("_position" Flds) ("_position" f)))
###                     ("_applC" ("_position" Some) ("_position" v)))
###                   ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                     ("_position" \<beta>)
###                     ("\<^const>HOL.conj" ("_position" t)
###                       ("\<^const>HOL.eq" ("_position" s)
###                         ("_tuple"
###                           ("_applC" ("_position" update)
###                             ("_cargs"
###                               ("_applC" ("_position" fst) ("_position" r))
###                               ("_cargs" ("_position" x) ("_position" v))))
###                           ("_tuple_arg"
###                             ("_applC" ("_position" snd)
###                               ("_position" r))))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" y))
###         ("_position" low)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G)
###       ("_applC" ("_position" Get)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" y) ("_position" f))))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" C)
###                   ("_idts" ("_position" Flds) ("_position" v)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                   ("_position" y))
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" l))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" lookup)
###                     ("_cargs" ("_applC" ("_position" snd) ("_position" r))
###                       ("_position" l)))
###                   ("_applC" ("_position" Some)
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" Flds)))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" lookup)
###                       ("_cargs" ("_position" Flds) ("_position" f)))
###                     ("_applC" ("_position" Some) ("_position" v)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                       ("_position" \<beta>) ("_position" t))
###                     ("\<^const>HOL.eq" ("_position" s)
###                       ("_tuple"
###                         ("_applC" ("_position" update)
###                           ("_cargs"
###                             ("_applC" ("_position" fst) ("_position" r))
###                             ("_cargs" ("_position" x) ("_position" v))))
###                         ("_tuple_arg"
###                           ("_applC" ("_position" snd)
###                             ("_position" r)))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" y))
###         ("_position" low)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G)
###       ("_applC" ("_position" Get)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" y) ("_position" f))))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" C)
###                   ("_idts" ("_position" Flds) ("_position" v)))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                   ("_position" y))
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" l))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" lookup)
###                     ("_cargs" ("_applC" ("_position" snd) ("_position" r))
###                       ("_position" l)))
###                   ("_applC" ("_position" Some)
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" Flds)))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" lookup)
###                       ("_cargs" ("_position" Flds) ("_position" f)))
###                     ("_applC" ("_position" Some) ("_position" v)))
###                   ("\<^const>HOL.eq"
###                     ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                       ("_position" \<beta>)
###                       ("\<^const>HOL.conj" ("_position" t) ("_position" s)))
###                     ("_tuple"
###                       ("_applC" ("_position" update)
###                         ("_cargs"
###                           ("_applC" ("_position" fst) ("_position" r))
###                           ("_cargs" ("_position" x) ("_position" v))))
###                       ("_tuple_arg"
###                         ("_applC" ("_position" snd)
###                           ("_position" r))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 871 of "$AFP/SIFPL/VS_OBJ.thy") produces 5 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###         ("_position" low)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" Expr_low) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G)
###       ("_applC" ("_position" Put)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" f) ("_position" e))))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" C) ("_position" Flds))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                   ("_position" x))
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" l))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                     ("_position" \<beta>)
###                     ("\<^const>HOL.conj" ("_position" t)
###                       ("_applC" ("_position" lookup)
###                         ("_cargs"
###                           ("_applC" ("_position" snd) ("_position" r))
###                           ("_position" l)))))
###                   ("_applC" ("_position" Some)
###                     ("_tuple" ("_position" C)
###                       ("_tuple_arg" ("_position" Flds)))))
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_tuple" ("_applC" ("_position" fst) ("_position" r))
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" l)
###                           ("_tuple_arg"
###                             ("_tuple" ("_position" C)
###                               ("_tuple_arg"
###                                 ("\<^const>List.list.Cons"
###                                   ("_tuple" ("_position" f)
###                                     ("_tuple_arg"
### ("_applC" ("_position" evalE)
###   ("_cargs" ("_position" e) ("_applC" ("_position" fst) ("_position" r))))))
###                                   ("_position" Flds))))))
###                         ("_applC" ("_position" snd)
###                           ("_position" r))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###         ("_position" low)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" Expr_low) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G)
###       ("_applC" ("_position" Put)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" f) ("_position" e))))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" C) ("_position" Flds))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                   ("_position" x))
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" l))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                   ("_position" \<beta>)
###                   ("\<^const>HOL.conj" ("_position" t)
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" lookup)
###                         ("_cargs"
###                           ("_applC" ("_position" snd) ("_position" r))
###                           ("_position" l)))
###                       ("_applC" ("_position" Some)
###                         ("_tuple" ("_position" C)
###                           ("_tuple_arg" ("_position" Flds)))))))
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_tuple" ("_applC" ("_position" fst) ("_position" r))
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" l)
###                           ("_tuple_arg"
###                             ("_tuple" ("_position" C)
###                               ("_tuple_arg"
###                                 ("\<^const>List.list.Cons"
###                                   ("_tuple" ("_position" f)
###                                     ("_tuple_arg"
### ("_applC" ("_position" evalE)
###   ("_cargs" ("_position" e) ("_applC" ("_position" fst) ("_position" r))))))
###                                   ("_position" Flds))))))
###                         ("_applC" ("_position" snd)
###                           ("_position" r))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###         ("_position" low)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" Expr_low) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G)
###       ("_applC" ("_position" Put)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" f) ("_position" e))))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" C) ("_position" Flds))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                   ("_position" x))
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" l))))
###               ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                 ("_position" \<beta>)
###                 ("\<^const>HOL.conj" ("_position" t)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" lookup)
###                         ("_cargs"
###                           ("_applC" ("_position" snd) ("_position" r))
###                           ("_position" l)))
###                       ("_applC" ("_position" Some)
###                         ("_tuple" ("_position" C)
###                           ("_tuple_arg" ("_position" Flds)))))
###                     ("\<^const>HOL.eq" ("_position" s)
###                       ("_tuple" ("_applC" ("_position" fst) ("_position" r))
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" l)
###                               ("_tuple_arg"
###                                 ("_tuple" ("_position" C)
###                                   ("_tuple_arg"
###                                     ("\<^const>List.list.Cons"
### ("_tuple" ("_position" f)
###   ("_tuple_arg"
###     ("_applC" ("_position" evalE)
###       ("_cargs" ("_position" e)
###         ("_applC" ("_position" fst) ("_position" r))))))
### ("_position" Flds))))))
###                             ("_applC" ("_position" snd)
###                               ("_position" r))))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###         ("_position" low)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" Expr_low) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G)
###       ("_applC" ("_position" Put)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" f) ("_position" e))))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" C) ("_position" Flds))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                   ("_position" x))
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" l))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                   ("_position" \<beta>) ("_position" t))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" lookup)
###                       ("_cargs" ("_applC" ("_position" snd) ("_position" r))
###                         ("_position" l)))
###                     ("_applC" ("_position" Some)
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" Flds)))))
###                   ("\<^const>HOL.eq" ("_position" s)
###                     ("_tuple" ("_applC" ("_position" fst) ("_position" r))
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" l)
###                             ("_tuple_arg"
###                               ("_tuple" ("_position" C)
###                                 ("_tuple_arg"
###                                   ("\<^const>List.list.Cons"
###                                     ("_tuple" ("_position" f)
### ("_tuple_arg"
###   ("_applC" ("_position" evalE)
###     ("_cargs" ("_position" e)
###       ("_applC" ("_position" fst) ("_position" r))))))
###                                     ("_position" Flds))))))
###                           ("_applC" ("_position" snd)
###                             ("_position" r)))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###         ("_position" low)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" Expr_low) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM_OBJ.VDM_deriv" ("_position" G)
###       ("_applC" ("_position" Put)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" f) ("_position" e))))
###       ("_applC" ("_position" Sec)
###         ("_lambda"
###           ("_pattern" ("_position" s)
###             ("_patterns" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" l)
###                 ("_idts" ("_position" C) ("_position" Flds))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                   ("_position" x))
###                 ("_applC" ("_position" RVal)
###                   ("_applC" ("_position" Loc) ("_position" l))))
###               ("\<^const>HOL.eq"
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                   ("_position" \<beta>)
###                   ("\<^const>HOL.conj" ("_position" t)
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" lookup)
###                           ("_cargs"
###                             ("_applC" ("_position" snd) ("_position" r))
###                             ("_position" l)))
###                         ("_applC" ("_position" Some)
###                           ("_tuple" ("_position" C)
###                             ("_tuple_arg" ("_position" Flds)))))
###                       ("_position" s))))
###                 ("_tuple" ("_applC" ("_position" fst) ("_position" r))
###                   ("_tuple_arg"
###                     ("\<^const>List.list.Cons"
###                       ("_tuple" ("_position" l)
###                         ("_tuple_arg"
###                           ("_tuple" ("_position" C)
###                             ("_tuple_arg"
###                               ("\<^const>List.list.Cons"
###                                 ("_tuple" ("_position" f)
###                                   ("_tuple_arg"
###                                     ("_applC" ("_position" evalE)
### ("_cargs" ("_position" e) ("_applC" ("_position" fst) ("_position" r))))))
###                                 ("_position" Flds))))))
###                       ("_applC" ("_position" snd)
###                         ("_position" r)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1006 of "$AFP/SIFPL/VS_OBJ.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" PhiWhileOp)
###       ("_cargs" ("_position" b) ("_position" \<Phi>)))
###     ("_lambda" ("_position" \<Psi>)
###       ("_lambda"
###         ("_pattern" ("_position" s)
###           ("_patterns" ("_position" t) ("_position" \<beta>)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" evalB)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" fst) ("_position" t))))
###             ("\<^const>HOL.Ex_binder" ("_position" r)
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<Phi>)
###                   ("_tuple" ("_position" r)
###                     ("_tuple_args" ("_position" t)
###                       ("_tuple_arg" ("_position" \<beta>)))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" w) ("_position" \<gamma>))
###                   ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                     ("_position" \<gamma>)
###                     ("\<^const>HOL.implies" ("_position" w)
###                       ("_applC" ("_position" \<Psi>)
###                         ("_tuple" ("_position" s)
###                           ("_tuple_args" ("_position" w)
###                             ("_tuple_arg" ("_position" \<gamma>)))))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" t)))))
###             ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###               ("_position" \<beta>) ("_position" t))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" PhiWhileOp)
###       ("_cargs" ("_position" b) ("_position" \<Phi>)))
###     ("_lambda" ("_position" \<Psi>)
###       ("_lambda"
###         ("_pattern" ("_position" s)
###           ("_patterns" ("_position" t) ("_position" \<beta>)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" evalB)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" fst) ("_position" t))))
###             ("\<^const>HOL.Ex_binder" ("_position" r)
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<Phi>)
###                   ("_tuple" ("_position" r)
###                     ("_tuple_args" ("_position" t)
###                       ("_tuple_arg" ("_position" \<beta>)))))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" w) ("_position" \<gamma>))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                       ("_position" \<gamma>) ("_position" w))
###                     ("_applC" ("_position" \<Psi>)
###                       ("_tuple" ("_position" s)
###                         ("_tuple_args" ("_position" w)
###                           ("_tuple_arg" ("_position" \<gamma>))))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" t)))))
###             ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###               ("_position" \<beta>) ("_position" t))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1123 of "$AFP/SIFPL/VS_OBJ.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evalB)
###         ("_cargs" ("_position" b)
###           ("_applC" ("_position" fst) ("_position" t)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" \<Phi>)
###           ("_tuple" ("_position" r)
###             ("_tuple_args" ("_position" t)
###               ("_tuple_arg" ("_position" \<beta>))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" w) ("_position" \<gamma>))
###             ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###               ("_position" \<gamma>)
###               ("\<^const>HOL.implies" ("_position" w)
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" b)
###                     ("_tuple_args" ("_position" \<Phi>)
###                       ("_tuple_args" ("_position" \<gamma>)
###                         ("_tuple_args" ("_position" s)
###                           ("_tuple_arg" ("_position" w))))))
###                   ("_position" var)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" b)
###         ("_tuple_args" ("_position" \<Phi>)
###           ("_tuple_args" ("_position" \<beta>)
###             ("_tuple_args" ("_position" s)
###               ("_tuple_arg" ("_position" t))))))
###       ("_position" var))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evalB)
###         ("_cargs" ("_position" b)
###           ("_applC" ("_position" fst) ("_position" t)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" \<Phi>)
###           ("_tuple" ("_position" r)
###             ("_tuple_args" ("_position" t)
###               ("_tuple_arg" ("_position" \<beta>))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" w) ("_position" \<gamma>))
###             ("\<^const>HOL.implies"
###               ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                 ("_position" \<gamma>) ("_position" w))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" b)
###                   ("_tuple_args" ("_position" \<Phi>)
###                     ("_tuple_args" ("_position" \<gamma>)
###                       ("_tuple_args" ("_position" s)
###                         ("_tuple_arg" ("_position" w))))))
###                 ("_position" var))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" b)
###         ("_tuple_args" ("_position" \<Phi>)
###           ("_tuple_args" ("_position" \<beta>)
###             ("_tuple_args" ("_position" s)
###               ("_tuple_arg" ("_position" t))))))
###       ("_position" var))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "varp"
  Proving monotonicity ...
### Ambiguous input (line 1697 of "$AFP/SIFPL/VS_OBJ.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" G)
###           ("_tuple_args" ("_position" c1)
###             ("_tuple_arg"
###               ("_applC" ("_position" Sec) ("_position" \<Phi>)))))
###         ("_position" Deriv)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" G)
###             ("_tuple_args" ("_position" c2)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Sec) ("_position" \<Psi>)))))
###           ("_position" Deriv)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" Comp)
###             ("_cargs" ("_position" c1) ("_position" c2)))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder" ("_position" r)
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" \<Phi>)
###                       ("_tuple" ("_position" r)
###                         ("_tuple_args" ("_position" t)
###                           ("_tuple_arg" ("_position" \<beta>)))))
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" w) ("_position" \<gamma>))
###                       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                         ("_position" \<gamma>)
###                         ("\<^const>HOL.implies" ("_position" w)
###                           ("_applC" ("_position" \<Psi>)
###                             ("_tuple" ("_position" s)
###                               ("_tuple_args" ("_position" w)
###                                 ("_tuple_arg"
###                                   ("_position" \<gamma>)))))))))))))))
###       ("_position" Deriv))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" G)
###           ("_tuple_args" ("_position" c1)
###             ("_tuple_arg"
###               ("_applC" ("_position" Sec) ("_position" \<Phi>)))))
###         ("_position" Deriv)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" G)
###             ("_tuple_args" ("_position" c2)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Sec) ("_position" \<Psi>)))))
###           ("_position" Deriv)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" Comp)
###             ("_cargs" ("_position" c1) ("_position" c2)))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder" ("_position" r)
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" \<Phi>)
###                       ("_tuple" ("_position" r)
###                         ("_tuple_args" ("_position" t)
###                           ("_tuple_arg" ("_position" \<beta>)))))
###                     ("\<^const>HOL.All_binder"
###                       ("_idts" ("_position" w) ("_position" \<gamma>))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                           ("_position" \<gamma>) ("_position" w))
###                         ("_applC" ("_position" \<Psi>)
###                           ("_tuple" ("_position" s)
###                             ("_tuple_args" ("_position" w)
###                               ("_tuple_arg"
###                                 ("_position" \<gamma>))))))))))))))
###       ("_position" Deriv))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1709 of "$AFP/SIFPL/VS_OBJ.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###       ("_position" low)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" New)
###             ("_cargs" ("_position" x) ("_position" C)))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" l) ("_position" r))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.not_member" ("_position" l)
###                       ("_applC" ("_position" Dom)
###                         ("_applC" ("_position" snd) ("_position" r))))
###                     ("\<^const>HOL.eq"
###                       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                         ("_position" \<beta>)
###                         ("\<^const>HOL.conj" ("_position" t)
###                           ("_position" s)))
###                       ("_tuple"
###                         ("_applC" ("_position" update)
###                           ("_cargs"
###                             ("_applC" ("_position" fst) ("_position" r))
###                             ("_cargs" ("_position" x)
###                               ("_applC" ("_position" RVal)
###                                 ("_applC" ("_position" Loc)
###                                   ("_position" l))))))
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" l)
###                               ("_tuple_arg"
###                                 ("_tuple" ("_position" C)
###                                   ("_tuple_arg"
###                                     ("\<^const>List.list.Nil")))))
###                             ("_applC" ("_position" snd)
###                               ("_position" r)))))))))))))
###       ("_position" Deriv))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###       ("_position" low)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" New)
###             ("_cargs" ("_position" x) ("_position" C)))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" l) ("_position" r))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.not_member" ("_position" l)
###                       ("_applC" ("_position" Dom)
###                         ("_applC" ("_position" snd) ("_position" r))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                         ("_position" \<beta>) ("_position" t))
###                       ("\<^const>HOL.eq" ("_position" s)
###                         ("_tuple"
###                           ("_applC" ("_position" update)
###                             ("_cargs"
###                               ("_applC" ("_position" fst) ("_position" r))
###                               ("_cargs" ("_position" x)
###                                 ("_applC" ("_position" RVal)
###                                   ("_applC" ("_position" Loc)
###                                     ("_position" l))))))
###                           ("_tuple_arg"
###                             ("\<^const>List.list.Cons"
###                               ("_tuple" ("_position" l)
###                                 ("_tuple_arg"
###                                   ("_tuple" ("_position" C)
###                                     ("_tuple_arg"
### ("\<^const>List.list.Nil")))))
###                               ("_applC" ("_position" snd)
###                                 ("_position" r))))))))))))))
###       ("_position" Deriv))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###       ("_position" low)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" New)
###             ("_cargs" ("_position" x) ("_position" C)))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" l) ("_position" r))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.not_member" ("_position" l)
###                       ("_applC" ("_position" Dom)
###                         ("_applC" ("_position" snd) ("_position" r))))
###                     ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                       ("_position" \<beta>)
###                       ("\<^const>HOL.conj" ("_position" t)
###                         ("\<^const>HOL.eq" ("_position" s)
###                           ("_tuple"
###                             ("_applC" ("_position" update)
###                               ("_cargs"
###                                 ("_applC" ("_position" fst) ("_position" r))
###                                 ("_cargs" ("_position" x)
###                                   ("_applC" ("_position" RVal)
###                                     ("_applC" ("_position" Loc)
### ("_position" l))))))
###                             ("_tuple_arg"
###                               ("\<^const>List.list.Cons"
###                                 ("_tuple" ("_position" l)
###                                   ("_tuple_arg"
###                                     ("_tuple" ("_position" C)
### ("_tuple_arg" ("\<^const>List.list.Nil")))))
###                                 ("_applC" ("_position" snd)
###                                   ("_position" r)))))))))))))))
###       ("_position" Deriv))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1716 of "$AFP/SIFPL/VS_OBJ.thy") produces 3 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" y))
###         ("_position" low)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" Get)
###             ("_cargs" ("_position" x)
###               ("_cargs" ("_position" y) ("_position" f))))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" r)
###                     ("_idts" ("_position" l)
###                       ("_idts" ("_position" C)
###                         ("_idts" ("_position" Flds) ("_position" v)))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                         ("_position" y))
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" l))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" lookup)
###                           ("_cargs"
###                             ("_applC" ("_position" snd) ("_position" r))
###                             ("_position" l)))
###                         ("_applC" ("_position" Some)
###                           ("_tuple" ("_position" C)
###                             ("_tuple_arg" ("_position" Flds)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" lookup)
###                             ("_cargs" ("_position" Flds) ("_position" f)))
###                           ("_applC" ("_position" Some) ("_position" v)))
###                         ("\<^const>HOL.eq"
###                           ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                             ("_position" \<beta>)
###                             ("\<^const>HOL.conj" ("_position" t)
###                               ("_position" s)))
###                           ("_tuple"
###                             ("_applC" ("_position" update)
###                               ("_cargs"
###                                 ("_applC" ("_position" fst) ("_position" r))
###                                 ("_cargs" ("_position" x) ("_position" v))))
###                             ("_tuple_arg"
###                               ("_applC" ("_position" snd)
###                                 ("_position" r))))))))))))))
###       ("_position" Deriv))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" y))
###         ("_position" low)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" Get)
###             ("_cargs" ("_position" x)
###               ("_cargs" ("_position" y) ("_position" f))))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" r)
###                     ("_idts" ("_position" l)
###                       ("_idts" ("_position" C)
###                         ("_idts" ("_position" Flds) ("_position" v)))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                         ("_position" y))
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" l))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" lookup)
###                           ("_cargs"
###                             ("_applC" ("_position" snd) ("_position" r))
###                             ("_position" l)))
###                         ("_applC" ("_position" Some)
###                           ("_tuple" ("_position" C)
###                             ("_tuple_arg" ("_position" Flds)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" lookup)
###                             ("_cargs" ("_position" Flds) ("_position" f)))
###                           ("_applC" ("_position" Some) ("_position" v)))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                             ("_position" \<beta>) ("_position" t))
###                           ("\<^const>HOL.eq" ("_position" s)
###                             ("_tuple"
###                               ("_applC" ("_position" update)
###                                 ("_cargs"
###                                   ("_applC" ("_position" fst)
###                                     ("_position" r))
###                                   ("_cargs" ("_position" x)
###                                     ("_position" v))))
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" snd)
###                                   ("_position" r)))))))))))))))
###       ("_position" Deriv))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" y))
###         ("_position" low)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" Get)
###             ("_cargs" ("_position" x)
###               ("_cargs" ("_position" y) ("_position" f))))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" r)
###                     ("_idts" ("_position" l)
###                       ("_idts" ("_position" C)
###                         ("_idts" ("_position" Flds) ("_position" v)))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                         ("_position" y))
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" l))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" lookup)
###                           ("_cargs"
###                             ("_applC" ("_position" snd) ("_position" r))
###                             ("_position" l)))
###                         ("_applC" ("_position" Some)
###                           ("_tuple" ("_position" C)
###                             ("_tuple_arg" ("_position" Flds)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" lookup)
###                             ("_cargs" ("_position" Flds) ("_position" f)))
###                           ("_applC" ("_position" Some) ("_position" v)))
###                         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                           ("_position" \<beta>)
###                           ("\<^const>HOL.conj" ("_position" t)
###                             ("\<^const>HOL.eq" ("_position" s)
###                               ("_tuple"
###                                 ("_applC" ("_position" update)
###                                   ("_cargs"
###                                     ("_applC" ("_position" fst)
### ("_position" r))
###                                     ("_cargs" ("_position" x)
### ("_position" v))))
###                                 ("_tuple_arg"
###                                   ("_applC" ("_position" snd)
###                                     ("_position" r))))))))))))))))
###       ("_position" Deriv))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1724 of "$AFP/SIFPL/VS_OBJ.thy") produces 7 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###         ("_position" low)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" Expr_low) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" Put)
###             ("_cargs" ("_position" x)
###               ("_cargs" ("_position" f) ("_position" e))))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" r)
###                     ("_idts" ("_position" l)
###                       ("_idts" ("_position" C)
###                         ("_idts" ("_position" F) ("_position" h)))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                         ("_position" x))
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" l))))
###                     ("\<^const>HOL.eq"
###                       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                         ("_position" \<beta>)
###                         ("\<^const>HOL.conj" ("_position" t)
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.eq"
###                               ("_applC" ("_position" lookup)
###                                 ("_cargs"
###                                   ("_applC" ("_position" snd)
###                                     ("_position" r))
###                                   ("_position" l)))
###                               ("_applC" ("_position" Some)
###                                 ("_tuple" ("_position" C)
###                                   ("_tuple_arg" ("_position" F)))))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.eq" ("_position" h)
###                                 ("\<^const>List.list.Cons"
###                                   ("_tuple" ("_position" l)
###                                     ("_tuple_arg"
### ("_tuple" ("_position" C)
###   ("_tuple_arg"
###     ("\<^const>List.list.Cons"
###       ("_tuple" ("_position" f)
###         ("_tuple_arg"
###           ("_applC" ("_position" evalE)
###             ("_cargs" ("_position" e)
###               ("_applC" ("_position" fst) ("_position" r))))))
###       ("_position" F))))))
###                                   ("_applC" ("_position" snd)
###                                     ("_position" r))))
###                               ("_position" s)))))
###                       ("_tuple" ("_applC" ("_position" fst) ("_position" r))
###                         ("_tuple_arg" ("_position" h)))))))))))
###       ("_position" Deriv))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###         ("_position" low)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" Expr_low) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" Put)
###             ("_cargs" ("_position" x)
###               ("_cargs" ("_position" f) ("_position" e))))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" r)
###                     ("_idts" ("_position" l)
###                       ("_idts" ("_position" C)
###                         ("_idts" ("_position" F) ("_position" h)))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                         ("_position" x))
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" l))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                           ("_position" \<beta>)
###                           ("\<^const>HOL.conj" ("_position" t)
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.eq"
###                                 ("_applC" ("_position" lookup)
###                                   ("_cargs"
###                                     ("_applC" ("_position" snd)
### ("_position" r))
###                                     ("_position" l)))
###                                 ("_applC" ("_position" Some)
###                                   ("_tuple" ("_position" C)
###                                     ("_tuple_arg" ("_position" F)))))
###                               ("_position" h))))
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" l)
###                             ("_tuple_arg"
###                               ("_tuple" ("_position" C)
###                                 ("_tuple_arg"
###                                   ("\<^const>List.list.Cons"
###                                     ("_tuple" ("_position" f)
### ("_tuple_arg"
###   ("_applC" ("_position" evalE)
###     ("_cargs" ("_position" e)
###       ("_applC" ("_position" fst) ("_position" r))))))
###                                     ("_position" F))))))
###                           ("_applC" ("_position" snd) ("_position" r))))
###                       ("\<^const>HOL.eq" ("_position" s)
###                         ("_tuple"
###                           ("_applC" ("_position" fst) ("_position" r))
###                           ("_tuple_arg" ("_position" h))))))))))))
###       ("_position" Deriv))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###         ("_position" low)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" Expr_low) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" Put)
###             ("_cargs" ("_position" x)
###               ("_cargs" ("_position" f) ("_position" e))))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" r)
###                     ("_idts" ("_position" l)
###                       ("_idts" ("_position" C)
###                         ("_idts" ("_position" F) ("_position" h)))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                         ("_position" x))
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" l))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                         ("_position" \<beta>) ("_position" t))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" lookup)
###                             ("_cargs"
###                               ("_applC" ("_position" snd) ("_position" r))
###                               ("_position" l)))
###                           ("_applC" ("_position" Some)
###                             ("_tuple" ("_position" C)
###                               ("_tuple_arg" ("_position" F)))))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.eq" ("_position" h)
###                             ("\<^const>List.list.Cons"
###                               ("_tuple" ("_position" l)
###                                 ("_tuple_arg"
###                                   ("_tuple" ("_position" C)
###                                     ("_tuple_arg"
### ("\<^const>List.list.Cons"
###   ("_tuple" ("_position" f)
###     ("_tuple_arg"
###       ("_applC" ("_position" evalE)
###         ("_cargs" ("_position" e)
###           ("_applC" ("_position" fst) ("_position" r))))))
###   ("_position" F))))))
###                               ("_applC" ("_position" snd) ("_position" r))))
###                           ("\<^const>HOL.eq" ("_position" s)
###                             ("_tuple"
###                               ("_applC" ("_position" fst) ("_position" r))
###                               ("_tuple_arg" ("_position" h))))))))))))))
###       ("_position" Deriv))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###         ("_position" low)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" Expr_low) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" Put)
###             ("_cargs" ("_position" x)
###               ("_cargs" ("_position" f) ("_position" e))))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" r)
###                     ("_idts" ("_position" l)
###                       ("_idts" ("_position" C)
###                         ("_idts" ("_position" F) ("_position" h)))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                         ("_position" x))
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" l))))
###                     ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                       ("_position" \<beta>)
###                       ("\<^const>HOL.conj" ("_position" t)
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" lookup)
###                               ("_cargs"
###                                 ("_applC" ("_position" snd) ("_position" r))
###                                 ("_position" l)))
###                             ("_applC" ("_position" Some)
###                               ("_tuple" ("_position" C)
###                                 ("_tuple_arg" ("_position" F)))))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.eq" ("_position" h)
###                               ("\<^const>List.list.Cons"
###                                 ("_tuple" ("_position" l)
###                                   ("_tuple_arg"
###                                     ("_tuple" ("_position" C)
### ("_tuple_arg"
###   ("\<^const>List.list.Cons"
###     ("_tuple" ("_position" f)
###       ("_tuple_arg"
###         ("_applC" ("_position" evalE)
###           ("_cargs" ("_position" e)
###             ("_applC" ("_position" fst) ("_position" r))))))
###     ("_position" F))))))
###                                 ("_applC" ("_position" snd)
###                                   ("_position" r))))
###                             ("\<^const>HOL.eq" ("_position" s)
###                               ("_tuple"
###                                 ("_applC" ("_position" fst) ("_position" r))
###                                 ("_tuple_arg" ("_position" h)))))))))))))))
###       ("_position" Deriv))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###         ("_position" low)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" Expr_low) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" Put)
###             ("_cargs" ("_position" x)
###               ("_cargs" ("_position" f) ("_position" e))))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" r)
###                     ("_idts" ("_position" l)
###                       ("_idts" ("_position" C)
###                         ("_idts" ("_position" F) ("_position" h)))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                         ("_position" x))
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" l))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                         ("_position" \<beta>)
###                         ("\<^const>HOL.conj" ("_position" t)
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" lookup)
###                               ("_cargs"
###                                 ("_applC" ("_position" snd) ("_position" r))
###                                 ("_position" l)))
###                             ("_applC" ("_position" Some)
###                               ("_tuple" ("_position" C)
###                                 ("_tuple_arg" ("_position" F)))))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq" ("_position" h)
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" l)
###                               ("_tuple_arg"
###                                 ("_tuple" ("_position" C)
###                                   ("_tuple_arg"
###                                     ("\<^const>List.list.Cons"
### ("_tuple" ("_position" f)
###   ("_tuple_arg"
###     ("_applC" ("_position" evalE)
###       ("_cargs" ("_position" e)
###         ("_applC" ("_position" fst) ("_position" r))))))
### ("_position" F))))))
###                             ("_applC" ("_position" snd) ("_position" r))))
###                         ("\<^const>HOL.eq" ("_position" s)
###                           ("_tuple"
###                             ("_applC" ("_position" fst) ("_position" r))
###                             ("_tuple_arg" ("_position" h)))))))))))))
###       ("_position" Deriv))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###         ("_position" low)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" Expr_low) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" Put)
###             ("_cargs" ("_position" x)
###               ("_cargs" ("_position" f) ("_position" e))))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" r)
###                     ("_idts" ("_position" l)
###                       ("_idts" ("_position" C)
###                         ("_idts" ("_position" F) ("_position" h)))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                         ("_position" x))
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" l))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                           ("_position" \<beta>)
###                           ("\<^const>HOL.conj" ("_position" t)
###                             ("_applC" ("_position" lookup)
###                               ("_cargs"
###                                 ("_applC" ("_position" snd) ("_position" r))
###                                 ("_position" l)))))
###                         ("_applC" ("_position" Some)
###                           ("_tuple" ("_position" C)
###                             ("_tuple_arg" ("_position" F)))))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq" ("_position" h)
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" l)
###                               ("_tuple_arg"
###                                 ("_tuple" ("_position" C)
###                                   ("_tuple_arg"
###                                     ("\<^const>List.list.Cons"
### ("_tuple" ("_position" f)
###   ("_tuple_arg"
###     ("_applC" ("_position" evalE)
###       ("_cargs" ("_position" e)
###         ("_applC" ("_position" fst) ("_position" r))))))
### ("_position" F))))))
###                             ("_applC" ("_position" snd) ("_position" r))))
###                         ("\<^const>HOL.eq" ("_position" s)
###                           ("_tuple"
###                             ("_applC" ("_position" fst) ("_position" r))
###                             ("_tuple_arg" ("_position" h)))))))))))))
###       ("_position" Deriv))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" CONTEXT) ("_position" x))
###         ("_position" low)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" GAMMA) ("_position" f))
###           ("_position" low)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" Expr_low) ("_position" e))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" G)
###         ("_tuple_args"
###           ("_applC" ("_position" Put)
###             ("_cargs" ("_position" x)
###               ("_cargs" ("_position" f) ("_position" e))))
###           ("_tuple_arg"
###             ("_applC" ("_position" Sec)
###               ("_lambda"
###                 ("_pattern" ("_position" s)
###                   ("_patterns" ("_position" t) ("_position" \<beta>)))
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" r)
###                     ("_idts" ("_position" l)
###                       ("_idts" ("_position" C)
###                         ("_idts" ("_position" F) ("_position" h)))))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_applC" ("_position" fst) ("_position" r))
###                         ("_position" x))
###                       ("_applC" ("_position" RVal)
###                         ("_applC" ("_position" Loc) ("_position" l))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" r)
###                         ("_position" \<beta>)
###                         ("\<^const>HOL.conj" ("_position" t)
###                           ("\<^const>HOL.conj"
###                             ("\<^const>HOL.eq"
###                               ("_applC" ("_position" lookup)
###                                 ("_cargs"
###                                   ("_applC" ("_position" snd)
###                                     ("_position" r))
###                                   ("_position" l)))
###                               ("_applC" ("_position" Some)
###                                 ("_tuple" ("_position" C)
###                                   ("_tuple_arg" ("_position" F)))))
###                             ("\<^const>HOL.eq" ("_position" h)
###                               ("\<^const>List.list.Cons"
###                                 ("_tuple" ("_position" l)
###                                   ("_tuple_arg"
###                                     ("_tuple" ("_position" C)
### ("_tuple_arg"
###   ("\<^const>List.list.Cons"
###     ("_tuple" ("_position" f)
###       ("_tuple_arg"
###         ("_applC" ("_position" evalE)
###           ("_cargs" ("_position" e)
###             ("_applC" ("_position" fst) ("_position" r))))))
###     ("_position" F))))))
###                                 ("_applC" ("_position" snd)
###                                   ("_position" r)))))))
###                       ("\<^const>HOL.eq" ("_position" s)
###                         ("_tuple"
###                           ("_applC" ("_position" fst) ("_position" r))
###                           ("_tuple_arg" ("_position" h))))))))))))
###       ("_position" Deriv))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "Derivp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "VS_exprp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "VS_Bexprp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "VS_comp"
  Proving monotonicity ...
consts
  SemExpr :: "Expr => TP => bool"
consts
  SemBExpr :: "BExpr => TP => bool"
### theory "Draft.VS_OBJ"
### 2.402s elapsed time, 3.122s cpu time, 0.995s GC time
Loading theory "Draft.ContextOBJ" (required by "Draft.ContextOBJMoreTemplates")
consts
  Fill :: "CtxtProg => OBJ => OBJ"
consts
  EVars :: "Expr => Var set"
consts
  BVars :: "BExpr => Var set"
consts
  Vars :: "OBJ => Var set"
### Ambiguous input (line 98 of "$AFP/SIFPL/ContextOBJ.thy") produces 3 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" secure) ("_position" C)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" secure) ("_position" D)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" s)
###               ("_idts" ("_position" t) ("_position" \<beta>)))
###             ("\<^const>HOL.eq"
###               ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                 ("_position" \<beta>)
###                 ("\<^const>HOL.implies" ("_position" t)
###                   ("_applC" ("_position" evalB)
###                     ("_cargs" ("_position" b)
###                       ("_applC" ("_position" fst) ("_position" s))))))
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" t))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" secure)
###       ("_applC" ("_position" Iff)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" C) ("_position" D)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" secure) ("_position" C)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" secure) ("_position" D)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" s)
###               ("_idts" ("_position" t) ("_position" \<beta>)))
###             ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###               ("_position" \<beta>)
###               ("\<^const>HOL.implies" ("_position" t)
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" evalB)
###                     ("_cargs" ("_position" b)
###                       ("_applC" ("_position" fst) ("_position" s))))
###                   ("_applC" ("_position" evalB)
###                     ("_cargs" ("_position" b)
###                       ("_applC" ("_position" fst) ("_position" t))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" secure)
###       ("_applC" ("_position" Iff)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" C) ("_position" D)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" secure) ("_position" C)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" secure) ("_position" D)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" s)
###               ("_idts" ("_position" t) ("_position" \<beta>)))
###             ("\<^const>HOL.implies"
###               ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                 ("_position" \<beta>) ("_position" t))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" evalB)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" fst) ("_position" s))))
###                 ("_applC" ("_position" evalB)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" fst) ("_position" t)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" secure)
###       ("_applC" ("_position" Iff)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" C) ("_position" D)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 134 of "$AFP/SIFPL/ContextOBJ.thy") produces 12 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" m))
###     ("\<^const>HOL.implies"
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" n)
###         ("_position" k))
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" k))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" s)
###             ("_idts" ("_position" t)
###               ("_idts" ("_position" ss) ("_position" tt))))
###           ("\<^const>HOL.implies"
###             ("\<^const>OBJ.SemN" ("_position" s)
###               ("_applC" ("_position" While)
###                 ("_cargs" ("_position" b) ("_position" C)))
###               ("_position" n) ("_position" ss))
###             ("\<^const>HOL.implies"
###               ("\<^const>OBJ.SemN" ("_position" t)
###                 ("_applC" ("_position" While)
###                   ("_cargs" ("_position" b) ("_position" C)))
###                 ("_position" m) ("_position" tt))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" secure) ("_position" C))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s)
###                       ("_idts" ("_position" ss) ("_position" \<beta>)))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                         ("_position" \<beta>) ("_position" ss))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" evalB)
###                           ("_cargs" ("_position" b)
###                             ("_applC" ("_position" fst) ("_position" s))))
###                         ("_applC" ("_position" evalB)
###                           ("_cargs" ("_position" b)
###                             ("_applC" ("_position" fst)
###                               ("_position" ss)))))))
###                   ("\<^const>HOL.All_binder" ("_position" \<beta>)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                         ("_position" \<beta>) ("_position" t))
###                       ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###                         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" ss)
###                           ("_position" \<gamma>)
###                           ("\<^const>HOL.conj" ("_position" tt)
###                             ("_applC" ("_position" Pbij_extends)
###                               ("_cargs" ("_position" \<gamma>)
###                                 ("_position" \<beta>)))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" m))
###     ("\<^const>HOL.implies"
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" n)
###         ("_position" k))
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" k))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" s)
###             ("_idts" ("_position" t)
###               ("_idts" ("_position" ss) ("_position" tt))))
###           ("\<^const>HOL.implies"
###             ("\<^const>OBJ.SemN" ("_position" s)
###               ("_applC" ("_position" While)
###                 ("_cargs" ("_position" b) ("_position" C)))
###               ("_position" n) ("_position" ss))
###             ("\<^const>HOL.implies"
###               ("\<^const>OBJ.SemN" ("_position" t)
###                 ("_applC" ("_position" While)
###                   ("_cargs" ("_position" b) ("_position" C)))
###                 ("_position" m) ("_position" tt))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" secure) ("_position" C))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s)
###                       ("_idts" ("_position" ss) ("_position" \<beta>)))
###                     ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                       ("_position" \<beta>)
###                       ("\<^const>HOL.implies" ("_position" ss)
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" evalB)
###                             ("_cargs" ("_position" b)
###                               ("_applC" ("_position" fst) ("_position" s))))
###                           ("_applC" ("_position" evalB)
###                             ("_cargs" ("_position" b)
###                               ("_applC" ("_position" fst)
###                                 ("_position" ss))))))))
###                   ("\<^const>HOL.All_binder" ("_position" \<beta>)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                         ("_position" \<beta>) ("_position" t))
###                       ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###                         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" ss)
###                           ("_position" \<gamma>)
###                           ("\<^const>HOL.conj" ("_position" tt)
###                             ("_applC" ("_position" Pbij_extends)
###                               ("_cargs" ("_position" \<gamma>)
###                                 ("_position" \<beta>)))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" m))
###     ("\<^const>HOL.implies"
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" n)
###         ("_position" k))
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" k))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" s)
###             ("_idts" ("_position" t)
###               ("_idts" ("_position" ss) ("_position" tt))))
###           ("\<^const>HOL.implies"
###             ("\<^const>OBJ.SemN" ("_position" s)
###               ("_applC" ("_position" While)
###                 ("_cargs" ("_position" b) ("_position" C)))
###               ("_position" n) ("_position" ss))
###             ("\<^const>HOL.implies"
###               ("\<^const>OBJ.SemN" ("_position" t)
###                 ("_applC" ("_position" While)
###                   ("_cargs" ("_position" b) ("_position" C)))
###                 ("_position" m) ("_position" tt))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" secure) ("_position" C))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s)
###                       ("_idts" ("_position" ss) ("_position" \<beta>)))
###                     ("\<^const>HOL.eq"
###                       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                         ("_position" \<beta>)
###                         ("\<^const>HOL.implies" ("_position" ss)
###                           ("_applC" ("_position" evalB)
###                             ("_cargs" ("_position" b)
###                               ("_applC" ("_position" fst)
###                                 ("_position" s))))))
###                       ("_applC" ("_position" evalB)
###                         ("_cargs" ("_position" b)
###                           ("_applC" ("_position" fst) ("_position" ss))))))
###                   ("\<^const>HOL.All_binder" ("_position" \<beta>)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                         ("_position" \<beta>) ("_position" t))
###                       ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###                         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" ss)
###                           ("_position" \<gamma>)
###                           ("\<^const>HOL.conj" ("_position" tt)
###                             ("_applC" ("_position" Pbij_extends)
###                               ("_cargs" ("_position" \<gamma>)
###                                 ("_position" \<beta>)))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" m))
###     ("\<^const>HOL.implies"
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" n)
###         ("_position" k))
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" k))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" s)
###             ("_idts" ("_position" t)
###               ("_idts" ("_position" ss) ("_position" tt))))
###           ("\<^const>HOL.implies"
###             ("\<^const>OBJ.SemN" ("_position" s)
###               ("_applC" ("_position" While)
###                 ("_cargs" ("_position" b) ("_position" C)))
###               ("_position" n) ("_position" ss))
###             ("\<^const>HOL.implies"
###               ("\<^const>OBJ.SemN" ("_position" t)
###                 ("_applC" ("_position" While)
###                   ("_cargs" ("_position" b) ("_position" C)))
###                 ("_position" m) ("_position" tt))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" secure) ("_position" C))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s)
###                       ("_idts" ("_position" ss) ("_position" \<beta>)))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                         ("_position" \<beta>) ("_position" ss))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" evalB)
###                           ("_cargs" ("_position" b)
###                             ("_applC" ("_position" fst) ("_position" s))))
###                         ("_applC" ("_position" evalB)
###                           ("_cargs" ("_position" b)
###                             ("_applC" ("_position" fst)
###                               ("_position" ss)))))))
###                   ("\<^const>HOL.All_binder" ("_position" \<beta>)
###                     ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                       ("_position" \<beta>)
###                       ("\<^const>HOL.implies" ("_position" t)
###                         ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###                           ("\<^const>VS_OBJ.twiddle_syntax" ("_position" ss)
###                             ("_position" \<gamma>)
###                             ("\<^const>HOL.conj" ("_position" tt)
###                               ("_applC" ("_position" Pbij_extends)
###                                 ("_cargs" ("_position" \<gamma>)
###                                   ("_position" \<beta>))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" m))
###     ("\<^const>HOL.implies"
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" n)
###         ("_position" k))
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" k))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" s)
###             ("_idts" ("_position" t)
###               ("_idts" ("_position" ss) ("_position" tt))))
###           ("\<^const>HOL.implies"
###             ("\<^const>OBJ.SemN" ("_position" s)
###               ("_applC" ("_position" While)
###                 ("_cargs" ("_position" b) ("_position" C)))
###               ("_position" n) ("_position" ss))
###             ("\<^const>HOL.implies"
###               ("\<^const>OBJ.SemN" ("_position" t)
###                 ("_applC" ("_position" While)
###                   ("_cargs" ("_position" b) ("_position" C)))
###                 ("_position" m) ("_position" tt))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" secure) ("_position" C))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s)
###                       ("_idts" ("_position" ss) ("_position" \<beta>)))
###                     ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                       ("_position" \<beta>)
###                       ("\<^const>HOL.implies" ("_position" ss)
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" evalB)
###                             ("_cargs" ("_position" b)
###                               ("_applC" ("_position" fst) ("_position" s))))
###                           ("_applC" ("_position" evalB)
###                             ("_cargs" ("_position" b)
###                               ("_applC" ("_position" fst)
###                                 ("_position" ss))))))))
###                   ("\<^const>HOL.All_binder" ("_position" \<beta>)
###                     ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                       ("_position" \<beta>)
###                       ("\<^const>HOL.implies" ("_position" t)
###                         ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###                           ("\<^const>VS_OBJ.twiddle_syntax" ("_position" ss)
###                             ("_position" \<gamma>)
###                             ("\<^const>HOL.conj" ("_position" tt)
###                               ("_applC" ("_position" Pbij_extends)
###                                 ("_cargs" ("_position" \<gamma>)
###                                   ("_position" \<beta>))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" m))
###     ("\<^const>HOL.implies"
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" n)
###         ("_position" k))
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" k))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" s)
###             ("_idts" ("_position" t)
###               ("_idts" ("_position" ss) ("_position" tt))))
###           ("\<^const>HOL.implies"
###             ("\<^const>OBJ.SemN" ("_position" s)
###               ("_applC" ("_position" While)
###                 ("_cargs" ("_position" b) ("_position" C)))
###               ("_position" n) ("_position" ss))
###             ("\<^const>HOL.implies"
###               ("\<^const>OBJ.SemN" ("_position" t)
###                 ("_applC" ("_position" While)
###                   ("_cargs" ("_position" b) ("_position" C)))
###                 ("_position" m) ("_position" tt))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" secure) ("_position" C))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s)
###                       ("_idts" ("_position" ss) ("_position" \<beta>)))
###                     ("\<^const>HOL.eq"
###                       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                         ("_position" \<beta>)
###                         ("\<^const>HOL.implies" ("_position" ss)
###                           ("_applC" ("_position" evalB)
###                             ("_cargs" ("_position" b)
###                               ("_applC" ("_position" fst)
###                                 ("_position" s))))))
###                       ("_applC" ("_position" evalB)
###                         ("_cargs" ("_position" b)
###                           ("_applC" ("_position" fst) ("_position" ss))))))
###                   ("\<^const>HOL.All_binder" ("_position" \<beta>)
###                     ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                       ("_position" \<beta>)
###                       ("\<^const>HOL.implies" ("_position" t)
###                         ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###                           ("\<^const>VS_OBJ.twiddle_syntax" ("_position" ss)
###                             ("_position" \<gamma>)
###                             ("\<^const>HOL.conj" ("_position" tt)
###                               ("_applC" ("_position" Pbij_extends)
###                                 ("_cargs" ("_position" \<gamma>)
###                                   ("_position" \<beta>))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" m))
###     ("\<^const>HOL.implies"
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" n)
###         ("_position" k))
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" k))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" s)
###             ("_idts" ("_position" t)
###               ("_idts" ("_position" ss) ("_position" tt))))
###           ("\<^const>HOL.implies"
###             ("\<^const>OBJ.SemN" ("_position" s)
###               ("_applC" ("_position" While)
###                 ("_cargs" ("_position" b) ("_position" C)))
###               ("_position" n) ("_position" ss))
###             ("\<^const>HOL.implies"
###               ("\<^const>OBJ.SemN" ("_position" t)
###                 ("_applC" ("_position" While)
###                   ("_cargs" ("_position" b) ("_position" C)))
###                 ("_position" m) ("_position" tt))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" secure) ("_position" C))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s)
###                       ("_idts" ("_position" ss) ("_position" \<beta>)))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                         ("_position" \<beta>) ("_position" ss))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" evalB)
###                           ("_cargs" ("_position" b)
###                             ("_applC" ("_position" fst) ("_position" s))))
###                         ("_applC" ("_position" evalB)
###                           ("_cargs" ("_position" b)
###                             ("_applC" ("_position" fst)
###                               ("_position" ss)))))))
###                   ("\<^const>HOL.All_binder" ("_position" \<beta>)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                         ("_position" \<beta>) ("_position" t))
###                       ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###                         ("\<^const>HOL.conj"
###                           ("\<^const>VS_OBJ.twiddle_syntax" ("_position" ss)
###                             ("_position" \<gamma>) ("_position" tt))
###                           ("_applC" ("_position" Pbij_extends)
###                             ("_cargs" ("_position" \<gamma>)
###                               ("_position" \<beta>))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" m))
###     ("\<^const>HOL.implies"
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" n)
###         ("_position" k))
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" k))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" s)
###             ("_idts" ("_position" t)
###               ("_idts" ("_position" ss) ("_position" tt))))
###           ("\<^const>HOL.implies"
###             ("\<^const>OBJ.SemN" ("_position" s)
###               ("_applC" ("_position" While)
###                 ("_cargs" ("_position" b) ("_position" C)))
###               ("_position" n) ("_position" ss))
###             ("\<^const>HOL.implies"
###               ("\<^const>OBJ.SemN" ("_position" t)
###                 ("_applC" ("_position" While)
###                   ("_cargs" ("_position" b) ("_position" C)))
###                 ("_position" m) ("_position" tt))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" secure) ("_position" C))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s)
###                       ("_idts" ("_position" ss) ("_position" \<beta>)))
###                     ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                       ("_position" \<beta>)
###                       ("\<^const>HOL.implies" ("_position" ss)
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" evalB)
###                             ("_cargs" ("_position" b)
###                               ("_applC" ("_position" fst) ("_position" s))))
###                           ("_applC" ("_position" evalB)
###                             ("_cargs" ("_position" b)
###                               ("_applC" ("_position" fst)
###                                 ("_position" ss))))))))
###                   ("\<^const>HOL.All_binder" ("_position" \<beta>)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                         ("_position" \<beta>) ("_position" t))
###                       ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###                         ("\<^const>HOL.conj"
###                           ("\<^const>VS_OBJ.twiddle_syntax" ("_position" ss)
###                             ("_position" \<gamma>) ("_position" tt))
###                           ("_applC" ("_position" Pbij_extends)
###                             ("_cargs" ("_position" \<gamma>)
###                               ("_position" \<beta>))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" m))
###     ("\<^const>HOL.implies"
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" n)
###         ("_position" k))
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" k))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" s)
###             ("_idts" ("_position" t)
###               ("_idts" ("_position" ss) ("_position" tt))))
###           ("\<^const>HOL.implies"
###             ("\<^const>OBJ.SemN" ("_position" s)
###               ("_applC" ("_position" While)
###                 ("_cargs" ("_position" b) ("_position" C)))
###               ("_position" n) ("_position" ss))
###             ("\<^const>HOL.implies"
###               ("\<^const>OBJ.SemN" ("_position" t)
###                 ("_applC" ("_position" While)
###                   ("_cargs" ("_position" b) ("_position" C)))
###                 ("_position" m) ("_position" tt))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" secure) ("_position" C))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s)
###                       ("_idts" ("_position" ss) ("_position" \<beta>)))
###                     ("\<^const>HOL.eq"
###                       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                         ("_position" \<beta>)
###                         ("\<^const>HOL.implies" ("_position" ss)
###                           ("_applC" ("_position" evalB)
###                             ("_cargs" ("_position" b)
###                               ("_applC" ("_position" fst)
###                                 ("_position" s))))))
###                       ("_applC" ("_position" evalB)
###                         ("_cargs" ("_position" b)
###                           ("_applC" ("_position" fst) ("_position" ss))))))
###                   ("\<^const>HOL.All_binder" ("_position" \<beta>)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                         ("_position" \<beta>) ("_position" t))
###                       ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###                         ("\<^const>HOL.conj"
###                           ("\<^const>VS_OBJ.twiddle_syntax" ("_position" ss)
###                             ("_position" \<gamma>) ("_position" tt))
###                           ("_applC" ("_position" Pbij_extends)
###                             ("_cargs" ("_position" \<gamma>)
###                               ("_position" \<beta>))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" m))
###     ("\<^const>HOL.implies"
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" n)
###         ("_position" k))
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" k))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" s)
###             ("_idts" ("_position" t)
###               ("_idts" ("_position" ss) ("_position" tt))))
###           ("\<^const>HOL.implies"
###             ("\<^const>OBJ.SemN" ("_position" s)
###               ("_applC" ("_position" While)
###                 ("_cargs" ("_position" b) ("_position" C)))
###               ("_position" n) ("_position" ss))
###             ("\<^const>HOL.implies"
###               ("\<^const>OBJ.SemN" ("_position" t)
###                 ("_applC" ("_position" While)
###                   ("_cargs" ("_position" b) ("_position" C)))
###                 ("_position" m) ("_position" tt))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" secure) ("_position" C))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s)
###                       ("_idts" ("_position" ss) ("_position" \<beta>)))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                         ("_position" \<beta>) ("_position" ss))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" evalB)
###                           ("_cargs" ("_position" b)
###                             ("_applC" ("_position" fst) ("_position" s))))
###                         ("_applC" ("_position" evalB)
###                           ("_cargs" ("_position" b)
###                             ("_applC" ("_position" fst)
###                               ("_position" ss)))))))
###                   ("\<^const>HOL.All_binder" ("_position" \<beta>)
###                     ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                       ("_position" \<beta>)
###                       ("\<^const>HOL.implies" ("_position" t)
###                         ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###                           ("\<^const>HOL.conj"
###                             ("\<^const>VS_OBJ.twiddle_syntax"
###                               ("_position" ss) ("_position" \<gamma>)
###                               ("_position" tt))
###                             ("_applC" ("_position" Pbij_extends)
###                               ("_cargs" ("_position" \<gamma>)
###                                 ("_position" \<beta>)))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 178 of "$AFP/SIFPL/ContextOBJ.thy") produces 3 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" secure) ("_position" C)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" s)
###             ("_idts" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.eq"
###             ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###               ("_position" \<beta>)
###               ("\<^const>HOL.implies" ("_position" t)
###                 ("_applC" ("_position" evalB)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" fst) ("_position" s))))))
###             ("_applC" ("_position" evalB)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" fst) ("_position" t)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" secure)
###       ("_applC" ("_position" While)
###         ("_cargs" ("_position" b) ("_position" C))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" secure) ("_position" C)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" s)
###             ("_idts" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###             ("_position" \<beta>)
###             ("\<^const>HOL.implies" ("_position" t)
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" evalB)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" fst) ("_position" s))))
###                 ("_applC" ("_position" evalB)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" fst) ("_position" t)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" secure)
###       ("_applC" ("_position" While)
###         ("_cargs" ("_position" b) ("_position" C))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" secure) ("_position" C)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" s)
###             ("_idts" ("_position" t) ("_position" \<beta>)))
###           ("\<^const>HOL.implies"
###             ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###               ("_position" \<beta>) ("_position" t))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" s))))
###               ("_applC" ("_position" evalB)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" fst) ("_position" t))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" secure)
###       ("_applC" ("_position" While)
###         ("_cargs" ("_position" b) ("_position" C))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  Expr_noLoc :: "Expr => bool"
consts
  BExpr_noLoc :: "BExpr => bool"
### Ambiguous input (line 241 of "$AFP/SIFPL/ContextOBJ.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_applC" ("_position" noLowDPs)
###       ("_tuple" ("_position" s) ("_tuple_arg" ("_position" h))))
###     ("\<^const>HOL.implies"
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" EVars) ("_position" e)) ("_position" X))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" Expr_noLoc) ("_position" e))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.All_binder" ("_position" x)
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.member" ("_position" x) ("_position" X))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" CONTEXT) ("_position" x))
###                 ("_position" low))))
###           ("\<^const>HOL.implies"
###             ("\<^const>VS_OBJ.twiddleStore_syntax" ("_position" s)
###               ("_position" \<beta>) ("_position" t))
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" twiddleHeap)
###                 ("_cargs" ("_position" \<beta>)
###                   ("_cargs" ("_position" h) ("_position" k))))
###               ("_applC" ("_position" noLowDPs)
###                 ("_tuple"
###                   ("_lambda" ("_position" y)
###                     ("\<^const>HOL.If"
###                       ("\<^const>HOL.eq" ("_position" x) ("_position" y))
###                       ("_applC" ("_position" evalE)
###                         ("_cargs" ("_position" e) ("_position" s)))
###                       ("_applC" ("_position" s) ("_position" y))))
###                   ("_tuple_arg" ("_position" h)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_applC" ("_position" noLowDPs)
###       ("_tuple" ("_position" s) ("_tuple_arg" ("_position" h))))
###     ("\<^const>HOL.implies"
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" EVars) ("_position" e)) ("_position" X))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" Expr_noLoc) ("_position" e))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.All_binder" ("_position" x)
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.member" ("_position" x) ("_position" X))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" CONTEXT) ("_position" x))
###                 ("_position" low))))
###           ("\<^const>VS_OBJ.twiddleStore_syntax" ("_position" s)
###             ("_position" \<beta>)
###             ("\<^const>HOL.implies" ("_position" t)
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" twiddleHeap)
###                   ("_cargs" ("_position" \<beta>)
###                     ("_cargs" ("_position" h) ("_position" k))))
###                 ("_applC" ("_position" noLowDPs)
###                   ("_tuple"
###                     ("_lambda" ("_position" y)
###                       ("\<^const>HOL.If"
###                         ("\<^const>HOL.eq" ("_position" x) ("_position" y))
###                         ("_applC" ("_position" evalE)
###                           ("_cargs" ("_position" e) ("_position" s)))
###                         ("_applC" ("_position" s) ("_position" y))))
###                     ("_tuple_arg" ("_position" h))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_applC" ("_position" noLowDPs)
###       ("_tuple" ("_position" s) ("_tuple_arg" ("_position" h))))
###     ("\<^const>HOL.implies"
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" EVars) ("_position" e)) ("_position" X))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" Expr_noLoc) ("_position" e))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.All_binder" ("_position" x)
###             ("\<^const>HOL.implies"
###               ("\<^const>Set.member" ("_position" x) ("_position" X))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" CONTEXT) ("_position" x))
###                 ("_position" low))))
###           ("\<^const>HOL.implies"
###             ("\<^const>VS_OBJ.twiddleStore_syntax" ("_position" s)
###               ("_position" \<beta>)
###               ("\<^const>HOL.implies" ("_position" t)
###                 ("_applC" ("_position" twiddleHeap)
###                   ("_cargs" ("_position" \<beta>)
###                     ("_cargs" ("_position" h) ("_position" k))))))
###             ("_applC" ("_position" noLowDPs)
###               ("_tuple"
###                 ("_lambda" ("_position" y)
###                   ("\<^const>HOL.If"
###                     ("\<^const>HOL.eq" ("_position" x) ("_position" y))
###                     ("_applC" ("_position" evalE)
###                       ("_cargs" ("_position" e) ("_position" s)))
###                     ("_applC" ("_position" s) ("_position" y))))
###                 ("_tuple_arg" ("_position" h))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 275 of "$AFP/SIFPL/ContextOBJ.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_applC" ("_position" noLowDPs)
###       ("_tuple" ("_position" s) ("_tuple_arg" ("_position" h))))
###     ("\<^const>HOL.implies"
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" EVars) ("_position" e)) ("_position" X))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" Expr_noLoc) ("_position" e))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" h) ("_position" l)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" Flds)))))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.All_binder" ("_position" x)
###               ("\<^const>HOL.implies"
###                 ("\<^const>Set.member" ("_position" x) ("_position" X))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" CONTEXT) ("_position" x))
###                   ("_position" low))))
###             ("\<^const>HOL.implies"
###               ("\<^const>VS_OBJ.twiddleStore_syntax" ("_position" s)
###                 ("_position" \<beta>) ("_position" t))
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" twiddleHeap)
###                   ("_cargs" ("_position" \<beta>)
###                     ("_cargs" ("_position" h) ("_position" k))))
###                 ("_applC" ("_position" noLowDPs)
###                   ("_tuple" ("_position" s)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" l)
###                           ("_tuple_args" ("_position" C)
###                             ("_tuple_arg"
###                               ("\<^const>List.list.Cons"
###                                 ("_tuple" ("_position" f)
###                                   ("_tuple_arg"
###                                     ("_applC" ("_position" evalE)
### ("_cargs" ("_position" e) ("_position" s)))))
###                                 ("_position" Flds)))))
###                         ("_position" h)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_applC" ("_position" noLowDPs)
###       ("_tuple" ("_position" s) ("_tuple_arg" ("_position" h))))
###     ("\<^const>HOL.implies"
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" EVars) ("_position" e)) ("_position" X))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" Expr_noLoc) ("_position" e))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" h) ("_position" l)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" Flds)))))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.All_binder" ("_position" x)
###               ("\<^const>HOL.implies"
###                 ("\<^const>Set.member" ("_position" x) ("_position" X))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" CONTEXT) ("_position" x))
###                   ("_position" low))))
###             ("\<^const>VS_OBJ.twiddleStore_syntax" ("_position" s)
###               ("_position" \<beta>)
###               ("\<^const>HOL.implies" ("_position" t)
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" twiddleHeap)
###                     ("_cargs" ("_position" \<beta>)
###                       ("_cargs" ("_position" h) ("_position" k))))
###                   ("_applC" ("_position" noLowDPs)
###                     ("_tuple" ("_position" s)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" l)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_arg"
###                                 ("\<^const>List.list.Cons"
###                                   ("_tuple" ("_position" f)
###                                     ("_tuple_arg"
### ("_applC" ("_position" evalE) ("_cargs" ("_position" e) ("_position" s)))))
###                                   ("_position" Flds)))))
###                           ("_position" h))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_applC" ("_position" noLowDPs)
###       ("_tuple" ("_position" s) ("_tuple_arg" ("_position" h))))
###     ("\<^const>HOL.implies"
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" EVars) ("_position" e)) ("_position" X))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" Expr_noLoc) ("_position" e))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" h) ("_position" l)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" Flds)))))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.All_binder" ("_position" x)
###               ("\<^const>HOL.implies"
###                 ("\<^const>Set.member" ("_position" x) ("_position" X))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" CONTEXT) ("_position" x))
###                   ("_position" low))))
###             ("\<^const>HOL.implies"
###               ("\<^const>VS_OBJ.twiddleStore_syntax" ("_position" s)
###                 ("_position" \<beta>)
###                 ("\<^const>HOL.implies" ("_position" t)
###                   ("_applC" ("_position" twiddleHeap)
###                     ("_cargs" ("_position" \<beta>)
###                       ("_cargs" ("_position" h) ("_position" k))))))
###               ("_applC" ("_position" noLowDPs)
###                 ("_tuple" ("_position" s)
###                   ("_tuple_arg"
###                     ("\<^const>List.list.Cons"
###                       ("_tuple" ("_position" l)
###                         ("_tuple_args" ("_position" C)
###                           ("_tuple_arg"
###                             ("\<^const>List.list.Cons"
###                               ("_tuple" ("_position" f)
###                                 ("_tuple_arg"
###                                   ("_applC" ("_position" evalE)
###                                     ("_cargs" ("_position" e)
### ("_position" s)))))
###                               ("_position" Flds)))))
###                       ("_position" h))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  CtxtVars :: "Var set => CtxtProg => bool"
### Ambiguous input (line 371 of "$AFP/SIFPL/ContextOBJ.thy") produces 18 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" m))
###     ("\<^const>HOL.implies"
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" n)
###         ("_position" k))
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" k))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" C)
###             ("_idts" ("_position" J)
###               ("_idts" ("_position" s)
###                 ("_idts" ("_position" t)
###                   ("_idts" ("_position" ss)
###                     ("_idts" ("_position" tt)
###                       ("_idts" ("_position" \<beta>) ("_position" X))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>OBJ.SemN" ("_position" s) ("_position" J)
###               ("_position" n) ("_position" t))
###             ("\<^const>HOL.implies"
###               ("\<^const>OBJ.SemN" ("_position" ss) ("_position" J)
###                 ("_position" m) ("_position" tt))
###               ("\<^const>HOL.implies"
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                   ("_position" \<beta>)
###                   ("\<^const>HOL.implies" ("_position" ss)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq" ("_position" J)
###                         ("_applC" ("_position" Fill)
###                           ("_cargs" ("_position" C) ("_position" I))))
###                       ("\<^const>HOL.implies"
###                         ("_applC" ("_position" LOW)
###                           ("_cargs" ("_position" X) ("_position" C)))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" LOW)
###                             ("_cargs" ("_position" X)
###                               ("_position" Ctxt_Body)))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>HOL.eq" ("_position" body)
###                               ("_applC" ("_position" Fill)
###                                 ("_cargs" ("_position" Ctxt_Body)
###                                   ("_position" I))))
###                             ("_applC" ("_position" secure)
###                               ("_position" I))))))))
###                 ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>VS_OBJ.twiddle_syntax" ("_position" t)
###                       ("_position" \<gamma>) ("_position" tt))
###                     ("_applC" ("_position" Pbij_extends)
###                       ("_cargs" ("_position" \<gamma>)
###                         ("_position" \<beta>)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" m))
###     ("\<^const>HOL.implies"
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" n)
###         ("_position" k))
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" k))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" C)
###             ("_idts" ("_position" J)
###               ("_idts" ("_position" s)
###                 ("_idts" ("_position" t)
###                   ("_idts" ("_position" ss)
###                     ("_idts" ("_position" tt)
###                       ("_idts" ("_position" \<beta>) ("_position" X))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>OBJ.SemN" ("_position" s) ("_position" J)
###               ("_position" n) ("_position" t))
###             ("\<^const>HOL.implies"
###               ("\<^const>OBJ.SemN" ("_position" ss) ("_position" J)
###                 ("_position" m) ("_position" tt))
###               ("\<^const>HOL.implies"
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                   ("_position" \<beta>)
###                   ("\<^const>HOL.implies" ("_position" ss)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq" ("_position" J)
###                         ("_applC" ("_position" Fill)
###                           ("_cargs" ("_position" C) ("_position" I))))
###                       ("\<^const>HOL.implies"
###                         ("_applC" ("_position" LOW)
###                           ("_cargs" ("_position" X) ("_position" C)))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" LOW)
###                             ("_cargs" ("_position" X)
###                               ("_position" Ctxt_Body)))
###                           ("\<^const>HOL.eq" ("_position" body)
###                             ("_applC" ("_position" Fill)
###                               ("_cargs" ("_position" Ctxt_Body)
###                                 ("_position" I)))))))))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" secure) ("_position" I))
###                   ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###                     ("\<^const>HOL.conj"
###                       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" t)
###                         ("_position" \<gamma>) ("_position" tt))
###                       ("_applC" ("_position" Pbij_extends)
###                         ("_cargs" ("_position" \<gamma>)
###                           ("_position" \<beta>))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" m))
###     ("\<^const>HOL.implies"
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" n)
###         ("_position" k))
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" k))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" C)
###             ("_idts" ("_position" J)
###               ("_idts" ("_position" s)
###                 ("_idts" ("_position" t)
###                   ("_idts" ("_position" ss)
###                     ("_idts" ("_position" tt)
###                       ("_idts" ("_position" \<beta>) ("_position" X))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>OBJ.SemN" ("_position" s) ("_position" J)
###               ("_position" n) ("_position" t))
###             ("\<^const>HOL.implies"
###               ("\<^const>OBJ.SemN" ("_position" ss) ("_position" J)
###                 ("_position" m) ("_position" tt))
###               ("\<^const>HOL.implies"
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                   ("_position" \<beta>)
###                   ("\<^const>HOL.implies" ("_position" ss)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq" ("_position" J)
###                         ("_applC" ("_position" Fill)
###                           ("_cargs" ("_position" C) ("_position" I))))
###                       ("_applC" ("_position" LOW)
###                         ("_cargs" ("_position" X) ("_position" C))))))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" LOW)
###                     ("_cargs" ("_position" X) ("_position" Ctxt_Body)))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.eq" ("_position" body)
###                       ("_applC" ("_position" Fill)
###                         ("_cargs" ("_position" Ctxt_Body) ("_position" I))))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" secure) ("_position" I))
###                       ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###                         ("\<^const>HOL.conj"
###                           ("\<^const>VS_OBJ.twiddle_syntax" ("_position" t)
###                             ("_position" \<gamma>) ("_position" tt))
###                           ("_applC" ("_position" Pbij_extends)
###                             ("_cargs" ("_position" \<gamma>)
###                               ("_position" \<beta>))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" m))
###     ("\<^const>HOL.implies"
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" n)
###         ("_position" k))
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" k))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" C)
###             ("_idts" ("_position" J)
###               ("_idts" ("_position" s)
###                 ("_idts" ("_position" t)
###                   ("_idts" ("_position" ss)
###                     ("_idts" ("_position" tt)
###                       ("_idts" ("_position" \<beta>) ("_position" X))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>OBJ.SemN" ("_position" s) ("_position" J)
###               ("_position" n) ("_position" t))
###             ("\<^const>HOL.implies"
###               ("\<^const>OBJ.SemN" ("_position" ss) ("_position" J)
###                 ("_position" m) ("_position" tt))
###               ("\<^const>HOL.implies"
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                   ("_position" \<beta>)
###                   ("\<^const>HOL.implies" ("_position" ss)
###                     ("\<^const>HOL.eq" ("_position" J)
###                       ("_applC" ("_position" Fill)
###                         ("_cargs" ("_position" C) ("_position" I))))))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" LOW)
###                     ("_cargs" ("_position" X) ("_position" C)))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" LOW)
###                       ("_cargs" ("_position" X) ("_position" Ctxt_Body)))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq" ("_position" body)
###                         ("_applC" ("_position" Fill)
###                           ("_cargs" ("_position" Ctxt_Body)
###                             ("_position" I))))
###                       ("\<^const>HOL.implies"
###                         ("_applC" ("_position" secure) ("_position" I))
###                         ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###                           ("\<^const>HOL.conj"
###                             ("\<^const>VS_OBJ.twiddle_syntax"
###                               ("_position" t) ("_position" \<gamma>)
###                               ("_position" tt))
###                             ("_applC" ("_position" Pbij_extends)
###                               ("_cargs" ("_position" \<gamma>)
###                                 ("_position" \<beta>)))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" m))
###     ("\<^const>HOL.implies"
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" n)
###         ("_position" k))
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" k))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" C)
###             ("_idts" ("_position" J)
###               ("_idts" ("_position" s)
###                 ("_idts" ("_position" t)
###                   ("_idts" ("_position" ss)
###                     ("_idts" ("_position" tt)
###                       ("_idts" ("_position" \<beta>) ("_position" X))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>OBJ.SemN" ("_position" s) ("_position" J)
###               ("_position" n) ("_position" t))
###             ("\<^const>HOL.implies"
###               ("\<^const>OBJ.SemN" ("_position" ss) ("_position" J)
###                 ("_position" m) ("_position" tt))
###               ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                 ("_position" \<beta>)
###                 ("\<^const>HOL.implies" ("_position" ss)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.eq" ("_position" J)
###                       ("_applC" ("_position" Fill)
###                         ("_cargs" ("_position" C) ("_position" I))))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" LOW)
###                         ("_cargs" ("_position" X) ("_position" C)))
###                       ("\<^const>HOL.implies"
###                         ("_applC" ("_position" LOW)
###                           ("_cargs" ("_position" X)
###                             ("_position" Ctxt_Body)))
###                         ("\<^const>HOL.implies"
###                           ("\<^const>HOL.eq" ("_position" body)
###                             ("_applC" ("_position" Fill)
###                               ("_cargs" ("_position" Ctxt_Body)
###                                 ("_position" I))))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" secure) ("_position" I))
###                             ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###                               ("\<^const>HOL.conj"
###                                 ("\<^const>VS_OBJ.twiddle_syntax"
###                                   ("_position" t) ("_position" \<gamma>)
###                                   ("_position" tt))
###                                 ("_applC" ("_position" Pbij_extends)
###                                   ("_cargs" ("_position" \<gamma>)
###                                     ("_position" \<beta>)))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" m))
###     ("\<^const>HOL.implies"
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" n)
###         ("_position" k))
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" k))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" C)
###             ("_idts" ("_position" J)
###               ("_idts" ("_position" s)
###                 ("_idts" ("_position" t)
###                   ("_idts" ("_position" ss)
###                     ("_idts" ("_position" tt)
###                       ("_idts" ("_position" \<beta>) ("_position" X))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>OBJ.SemN" ("_position" s) ("_position" J)
###               ("_position" n) ("_position" t))
###             ("\<^const>HOL.implies"
###               ("\<^const>OBJ.SemN" ("_position" ss) ("_position" J)
###                 ("_position" m) ("_position" tt))
###               ("\<^const>HOL.implies"
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                   ("_position" \<beta>) ("_position" ss))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" J)
###                     ("_applC" ("_position" Fill)
###                       ("_cargs" ("_position" C) ("_position" I))))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" LOW)
###                       ("_cargs" ("_position" X) ("_position" C)))
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" LOW)
###                         ("_cargs" ("_position" X) ("_position" Ctxt_Body)))
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.eq" ("_position" body)
###                           ("_applC" ("_position" Fill)
###                             ("_cargs" ("_position" Ctxt_Body)
###                               ("_position" I))))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" secure) ("_position" I))
###                           ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###                             ("\<^const>HOL.conj"
###                               ("\<^const>VS_OBJ.twiddle_syntax"
###                                 ("_position" t) ("_position" \<gamma>)
###                                 ("_position" tt))
###                               ("_applC" ("_position" Pbij_extends)
###                                 ("_cargs" ("_position" \<gamma>)
###                                   ("_position" \<beta>))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" m))
###     ("\<^const>HOL.implies"
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" n)
###         ("_position" k))
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" k))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" C)
###             ("_idts" ("_position" J)
###               ("_idts" ("_position" s)
###                 ("_idts" ("_position" t)
###                   ("_idts" ("_position" ss)
###                     ("_idts" ("_position" tt)
###                       ("_idts" ("_position" \<beta>) ("_position" X))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>OBJ.SemN" ("_position" s) ("_position" J)
###               ("_position" n) ("_position" t))
###             ("\<^const>HOL.implies"
###               ("\<^const>OBJ.SemN" ("_position" ss) ("_position" J)
###                 ("_position" m) ("_position" tt))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                     ("_position" \<beta>)
###                     ("\<^const>HOL.implies" ("_position" ss)
###                       ("_position" J)))
###                   ("_applC" ("_position" Fill)
###                     ("_cargs" ("_position" C) ("_position" I))))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" LOW)
###                     ("_cargs" ("_position" X) ("_position" C)))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" LOW)
###                       ("_cargs" ("_position" X) ("_position" Ctxt_Body)))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq" ("_position" body)
###                         ("_applC" ("_position" Fill)
###                           ("_cargs" ("_position" Ctxt_Body)
###                             ("_position" I))))
###                       ("\<^const>HOL.implies"
###                         ("_applC" ("_position" secure) ("_position" I))
###                         ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###                           ("\<^const>HOL.conj"
###                             ("\<^const>VS_OBJ.twiddle_syntax"
###                               ("_position" t) ("_position" \<gamma>)
###                               ("_position" tt))
###                             ("_applC" ("_position" Pbij_extends)
###                               ("_cargs" ("_position" \<gamma>)
###                                 ("_position" \<beta>)))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" m))
###     ("\<^const>HOL.implies"
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" n)
###         ("_position" k))
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" k))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" C)
###             ("_idts" ("_position" J)
###               ("_idts" ("_position" s)
###                 ("_idts" ("_position" t)
###                   ("_idts" ("_position" ss)
###                     ("_idts" ("_position" tt)
###                       ("_idts" ("_position" \<beta>) ("_position" X))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>OBJ.SemN" ("_position" s) ("_position" J)
###               ("_position" n) ("_position" t))
###             ("\<^const>HOL.implies"
###               ("\<^const>OBJ.SemN" ("_position" ss) ("_position" J)
###                 ("_position" m) ("_position" tt))
###               ("\<^const>HOL.implies"
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                   ("_position" \<beta>)
###                   ("\<^const>HOL.implies" ("_position" ss)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq" ("_position" J)
###                         ("_applC" ("_position" Fill)
###                           ("_cargs" ("_position" C) ("_position" I))))
###                       ("\<^const>HOL.implies"
###                         ("_applC" ("_position" LOW)
###                           ("_cargs" ("_position" X) ("_position" C)))
###                         ("_applC" ("_position" LOW)
###                           ("_cargs" ("_position" X)
###                             ("_position" Ctxt_Body)))))))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" body)
###                     ("_applC" ("_position" Fill)
###                       ("_cargs" ("_position" Ctxt_Body) ("_position" I))))
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" secure) ("_position" I))
###                     ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###                       ("\<^const>HOL.conj"
###                         ("\<^const>VS_OBJ.twiddle_syntax" ("_position" t)
###                           ("_position" \<gamma>) ("_position" tt))
###                         ("_applC" ("_position" Pbij_extends)
###                           ("_cargs" ("_position" \<gamma>)
###                             ("_position" \<beta>)))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" m))
###     ("\<^const>HOL.implies"
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" n)
###         ("_position" k))
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" k))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" C)
###             ("_idts" ("_position" J)
###               ("_idts" ("_position" s)
###                 ("_idts" ("_position" t)
###                   ("_idts" ("_position" ss)
###                     ("_idts" ("_position" tt)
###                       ("_idts" ("_position" \<beta>) ("_position" X))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>OBJ.SemN" ("_position" s) ("_position" J)
###               ("_position" n) ("_position" t))
###             ("\<^const>HOL.implies"
###               ("\<^const>OBJ.SemN" ("_position" ss) ("_position" J)
###                 ("_position" m) ("_position" tt))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                     ("_position" \<beta>)
###                     ("\<^const>HOL.implies" ("_position" ss)
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.eq" ("_position" J)
###                           ("_applC" ("_position" Fill)
###                             ("_cargs" ("_position" C) ("_position" I))))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" LOW)
###                             ("_cargs" ("_position" X) ("_position" C)))
###                           ("\<^const>HOL.implies"
###                             ("_applC" ("_position" LOW)
###                               ("_cargs" ("_position" X)
###                                 ("_position" Ctxt_Body)))
###                             ("_position" body))))))
###                   ("_applC" ("_position" Fill)
###                     ("_cargs" ("_position" Ctxt_Body) ("_position" I))))
###                 ("\<^const>HOL.implies"
###                   ("_applC" ("_position" secure) ("_position" I))
###                   ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###                     ("\<^const>HOL.conj"
###                       ("\<^const>VS_OBJ.twiddle_syntax" ("_position" t)
###                         ("_position" \<gamma>) ("_position" tt))
###                       ("_applC" ("_position" Pbij_extends)
###                         ("_cargs" ("_position" \<gamma>)
###                           ("_position" \<beta>))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" m))
###     ("\<^const>HOL.implies"
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" n)
###         ("_position" k))
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" k))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" C)
###             ("_idts" ("_position" J)
###               ("_idts" ("_position" s)
###                 ("_idts" ("_position" t)
###                   ("_idts" ("_position" ss)
###                     ("_idts" ("_position" tt)
###                       ("_idts" ("_position" \<beta>) ("_position" X))))))))
###           ("\<^const>HOL.implies"
###             ("\<^const>OBJ.SemN" ("_position" s) ("_position" J)
###               ("_position" n) ("_position" t))
###             ("\<^const>HOL.implies"
###               ("\<^const>OBJ.SemN" ("_position" ss) ("_position" J)
###                 ("_position" m) ("_position" tt))
###               ("\<^const>HOL.implies"
###                 ("\<^const>VS_OBJ.twiddle_syntax" ("_position" s)
###                   ("_position" \<beta>)
###                   ("\<^const>HOL.implies" ("_position" ss)
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.eq" ("_position" J)
###                         ("_applC" ("_position" Fill)
###                           ("_cargs" ("_position" C) ("_position" I))))
###                       ("\<^const>HOL.implies"
###                         ("_applC" ("_position" LOW)
###                           ("_cargs" ("_position" X) ("_position" C)))
###                         ("\<^const>HOL.implies"
###                           ("_applC" ("_position" LOW)
###                             ("_cargs" ("_position" X)
###                               ("_position" Ctxt_Body)))
###                           ("\<^const>HOL.implies"
###                             ("\<^const>HOL.eq" ("_position" body)
###                               ("_applC" ("_position" Fill)
###                                 ("_cargs" ("_position" Ctxt_Body)
###                                   ("_position" I))))
###                             ("_applC" ("_position" secure)
###                               ("_position" I))))))))
###                 ("\<^const>HOL.Ex_binder" ("_position" \<gamma>)
###                   ("\<^const>VS_OBJ.twiddle_syntax" ("_position" t)
###                     ("_position" \<gamma>)
###                     ("\<^const>HOL.conj" ("_position" tt)
###                       ("_applC" ("_position" Pbij_extends)
###                         ("_cargs" ("_position" \<gamma>)
###                           ("_position" \<beta>))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.ContextOBJ"
### 0.925s elapsed time, 1.566s cpu time, 0.886s GC time
Loading theory "Draft.ContextOBJMoreTemplates"
val templateLemmas =
   [("ContextOBJ.Secure_comp",
     "[| secure ?C; secure ?D |] ==> secure (Comp ?C ?D)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("ContextOBJ.BExpr_lemma",
     "[| BVars ?b <= ?X; ALL x. x : ?X --> CONTEXT x = low;
         BExpr_noLoc ?b |]
      ==> BExpr_low ?b",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 8, template_var 1),
          template_var 0),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("ContextOBJ.Expr_lemma1",
     "[| Expr_noLoc ?e; EVars ?e <= ?X; !!x. x : ?X ==> CONTEXT x = low |]
      ==> Expr_low ?e",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 1),
          template_var 0),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("ContextOBJ.secureI_secureFillI",
     "[| secure ?I; LOW ?X ?C; LOW ?X Ctxt_Body; body = Fill Ctxt_Body ?I |]
      ==> secure (Fill ?C ?I)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            ),
        template_equation
         (template_hole 1,
          template_app
           (template_app (template_hole 0, template_hole 3),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("ContextOBJ.Secure_while",
     "[| secure ?C;
         ALL s t \<beta>.
            s \<equiv>\<^sub>\<beta> t -->
            evalB ?b (fst s) = evalB ?b (fst t) |]
      ==> secure (While ?b ?C)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("ContextOBJ.Secure_iff",
     "[| secure ?C; secure ?D;
         ALL s t \<beta>.
            s \<equiv>\<^sub>\<beta> t -->
            evalB ?b (fst s) = evalB ?b (fst t) |]
      ==> secure (Iff ?b ?C ?D)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 8,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 1))
           ))),
    ("ContextOBJ.Expr_lemma2",
     "[| noLowDPs (?s, ?h); EVars ?e <= ?X; Expr_noLoc ?e;
         !!x. x : ?X ==> CONTEXT x = low; ?s  \<approx>\<^sub>?\<beta> ?t;
         twiddleHeap ?\<beta> ?h ?k |]
      ==> noLowDPs (%y. if ?x = y then evalE ?e ?s else ?s y, ?h)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 14,
              template_app
               (template_app (template_hole 13, template_var 7),
                template_var 6))
            ),
        template_inequation
         (less_equals, template_app (template_hole 11, template_var 5),
          template_var 4),
        template_predicate
         (template_app (template_hole 10, template_var 5)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 7),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 6),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_hole 14,
             template_app
              (template_app (template_hole 13, t_empty), template_var 6))
           ))),
    ("ContextOBJ.SecureForAttackingContext",
     "[| secure ?I; LOW ?X ?C; LOW ?X Ctxt_Body;
         ?s \<equiv>\<^sub>?\<beta> ?ss; ?s , Fill ?C ?I \<Down> ?t ;
         ?ss , Fill ?C ?I \<Down> ?tt ; body = Fill Ctxt_Body ?I;
         CONTEXT res = low |]
      ==> EX \<gamma>.
             (\<gamma>, fst ?t res, fst ?tt res) : twiddleVal &
             Pbij_extends \<gamma> ?\<beta>",
     template_implication
      ([template_predicate
         (template_app (template_hole 19, template_var 7)),
        template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 6),
              template_hole 17)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 16, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 15, template_var 3),
                template_app
                 (template_app (template_hole 14, template_var 5),
                  template_var 7)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 15, template_var 2),
                template_app
                 (template_app (template_hole 14, template_var 5),
                  template_var 7)),
              template_var 0)
            ),
        template_equation
         (template_hole 12,
          template_app
           (template_app (template_hole 14, template_hole 17),
            template_var 7)),
        template_equation
         (template_app (template_hole 10, template_hole 9),
          template_hole 8)],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("ContextOBJ.Expr_lemma3",
     "[| noLowDPs (?s, ?h); EVars ?e <= ?X; Expr_noLoc ?e;
         lookup ?h ?l = Some (?C, ?Flds); !!x. x : ?X ==> CONTEXT x = low;
         ?s  \<approx>\<^sub>?\<beta> ?t; twiddleHeap ?\<beta> ?h ?k |]
      ==> noLowDPs (?s, (?l, ?C, (?f, evalE ?e ?s) # ?Flds) # ?h)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 20,
              template_app
               (template_app (template_hole 19, template_var 10),
                template_var 9))
            ),
        template_inequation
         (less_equals, template_app (template_hole 17, template_var 8),
          template_var 7),
        template_predicate
         (template_app (template_hole 16, template_var 8)),
        template_equation
         (template_app
           (template_app (template_hole 14, template_var 9),
            template_var 6),
          template_app
           (template_hole 13,
            template_app
             (template_app (template_hole 12, template_var 5),
              template_var 4))),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 10),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 9),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_hole 20,
             template_app
              (template_app (template_hole 19, template_var 10),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 6),
                     template_app
                      (template_app (template_hole 12, template_var 5),
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app
                            (template_app (template_hole 1, template_var 0),
                             template_app
                              (template_app
                                (template_hole 0, template_var 8),
                               template_var 10))),
                         template_var 4)))),
                 template_var 9)))
           ))),
    ("ContextOBJ.secureI_secureFillI_Aux",
     "[| ?n <= ?k; ?m <= ?k;  ?s , ?J \<rightarrow>\<^sub>?n  ?t ;
          ?ss , ?J \<rightarrow>\<^sub>?m  ?tt ;
         ?s \<equiv>\<^sub>?\<beta> ?ss; ?J = Fill ?C ?I; LOW ?X ?C;
         LOW ?X Ctxt_Body; body = Fill Ctxt_Body ?I; secure ?I |]
      ==> EX \<gamma>.
             ?t \<equiv>\<^sub>\<gamma> ?tt &
             Pbij_extends \<gamma> ?\<beta>",
     template_implication
      ([template_inequation (less_equals, template_var 11, template_var 10),
        template_inequation (less_equals, template_var 9, template_var 10),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 8),
                  template_app
                   (template_app (template_hole 12, template_var 7),
                    template_app
                     (template_app (template_hole 11, template_var 11),
                      template_var 6)))),
              template_hole 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 5),
                  template_app
                   (template_app (template_hole 12, template_var 7),
                    template_app
                     (template_app (template_hole 11, template_var 9),
                      template_var 4)))),
              template_hole 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 3),
                template_var 8),
              template_var 5)
            ),
        template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 7, template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_hole 5)
            ),
        template_equation
         (template_hole 4,
          template_app
           (template_app (template_hole 7, template_hole 5),
            template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("ContextOBJ.secure_while_aux",
     "[| ?n <= ?k; ?m <= ?k;  ?s , While ?b ?C \<rightarrow>\<^sub>?n  ?ss ;
          ?t , While ?b ?C \<rightarrow>\<^sub>?m  ?tt ; secure ?C;
         !!s ss \<beta>.
            s \<equiv>\<^sub>\<beta> ss ==>
            evalB ?b (fst s) = evalB ?b (fst ss);
         ?s \<equiv>\<^sub>?\<beta> ?t |]
      ==> EX \<gamma>.
             ?ss \<equiv>\<^sub>\<gamma> ?tt &
             Pbij_extends \<gamma> ?\<beta>",
     template_implication
      ([template_inequation (less_equals, template_var 9, template_var 8),
        template_inequation (less_equals, template_var 7, template_var 8),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 6),
                  template_app
                   (template_app
                     (template_hole 13,
                      template_app
                       (template_app (template_hole 12, template_var 5),
                        template_var 4)),
                    template_app
                     (template_app (template_hole 11, template_var 9),
                      template_var 3)))),
              template_hole 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 2),
                  template_app
                   (template_app
                     (template_hole 13,
                      template_app
                       (template_app (template_hole 12, template_var 5),
                        template_var 4)),
                    template_app
                     (template_app (template_hole 11, template_var 7),
                      template_var 1)))),
              template_hole 10)
            ),
        template_predicate (template_app (template_hole 9, template_var 4)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 0),
                template_var 6),
              template_var 2)
            )],
       template_predicate (template_app (template_hole 2, t_empty))))]:
   (string * thm * template) list
### theory "Draft.ContextOBJMoreTemplates"
### 0.400s elapsed time, 0.597s cpu time, 0.081s GC time
val it = (): unit
