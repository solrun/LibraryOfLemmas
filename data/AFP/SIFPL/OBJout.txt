Loading theory "Draft.OBJ" (required by "Draft.OBJMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.OBJMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.OBJMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.OBJMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
consts
  lookup :: "('a * 'b) list => 'a => 'b option"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.555s cpu time, 0.046s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.OBJMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.211s elapsed time, 0.867s cpu time, 0.046s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.OBJMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.324s elapsed time, 1.294s cpu time, 0.143s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.OBJMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  evalE :: "Expr => (Var => Val) => Val"
Found termination order: "size <*mlex*> {}"
consts
  evalB :: "BExpr => (Var => Val) => bool"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.000s elapsed time, 3.775s cpu time, 0.907s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.075s elapsed time, 3.914s cpu time, 0.854s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "Semnp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.965s elapsed time, 6.146s cpu time, 1.114s GC time
Loading theory "Draft.Templates" (required by "Draft.OBJMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 199 of "$AFP/SIFPL/OBJ.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>Sem" ("_position" s) ("_position" c) ("_position" t))
###     ("\<^const>HOL.Ex_binder" ("_position" n)
###       ("\<^const>OBJ.SemN" ("_position" s) ("_position" c) ("_position" n)
###         ("_position" t)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Sem" ("_position" s) ("_position" c)
###     ("\<^const>HOL.eq" ("_position" t)
###       ("\<^const>HOL.Ex_binder" ("_position" n)
###         ("\<^const>OBJ.SemN" ("_position" s) ("_position" c) ("_position" n)
###           ("_position" t))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>Sem" ("_position" s) ("_position" c) ("_position" t))
###     ("\<^const>OBJ.SemN"
###       ("\<^const>HOL.Ex_binder" ("_position" n) ("_position" s))
###       ("_position" c) ("_position" n) ("_position" t))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Sem" ("_position" s) ("_position" c)
###     ("\<^const>HOL.eq" ("_position" t)
###       ("\<^const>OBJ.SemN"
###         ("\<^const>HOL.Ex_binder" ("_position" n) ("_position" s))
###         ("_position" c) ("_position" n) ("_position" t)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.146s cpu time, 0.032s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.OBJMoreTemplates")
### theory "Draft.OBJ"
### 2.452s elapsed time, 7.441s cpu time, 1.228s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.504s elapsed time, 0.832s cpu time, 0.037s GC time
Loading theory "Draft.OBJMoreTemplates"
val templateLemmas =
   [("OBJ.DomAppend", "Dom ?L <= Dom ((?a, ?b) # ?L)",
     template_inequation
      (less_equals, template_app (template_hole 2, template_var 2),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("OBJ.DomAppendUnion", "Dom (?a @ ?ab) = Dom ?a Un Dom ?ab",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("OBJ.Sem_no_zero_height_derivs",
     " ?s , ?c \<rightarrow>\<^sub>0  ?t  ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_app
                     (template_app (template_hole 3, template_hole 2),
                      template_var 0)))),
              template_hole 1)
            )],
       template_predicate (template_hole 0))),
    ("OBJ.DomUnion", "Dom ((?a, ?b) # ?L) = {?a} Un Dom ?L",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0)),
         template_app (template_hole 5, template_var 0)))),
    ("OBJ.Sem_no_zero_height_derivsAux",
     "ALL s t.  s , ?c \<rightarrow>\<^sub>0  t  --> False",
     template_predicate (template_app (template_hole 8, t_empty))),
    ("OBJ.lookupSomeAppend1",
     "lookup ?L1.0 ?l = Some ?c ==> lookup (?L1.0 @ ?L2.0) ?l = Some ?c",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)),
           template_var 2),
         template_app (template_hole 1, template_var 1)))),
    ("OBJ.lookupNoneAppend",
     "[| lookup ?L1.0 ?l = None; lookup ?L2.0 ?l = None |]
      ==> lookup (?L1.0 @ ?L2.0) ?l = None",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_hole 1),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 0), template_var 1),
          template_hole 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_hole 1))),
    ("OBJ.lookupSomeAppend2",
     "[| lookup ?L2.0 ?l = Some ?c; Dom ?L1.0 Int Dom ?L2.0 = {} |]
      ==> lookup (?L1.0 @ ?L2.0) ?l = Some ?c",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 3), template_var 2),
          template_app (template_hole 5, template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0)),
            template_app (template_hole 2, template_var 3)),
          template_hole 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3)),
           template_var 2),
         template_app (template_hole 5, template_var 1)))),
    ("OBJ.Sem_eval_cases",
     "[|  ?s , Skip \<rightarrow>\<^sub>?n  ?t ;
         [| ?n = Suc 0; ?t = ?s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_app
                   (template_app (template_hole 7, template_hole 6),
                    template_app
                     (template_app (template_hole 5, template_var 2),
                      template_var 1)))),
              template_hole 4)
            ),
        template_implication
         ([template_equation
            (template_var 2,
             template_app (template_hole 2, template_hole 1))],
          template_implication
           ([template_equation (template_var 1, template_var 3)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("OBJ.Sem_eval_cases",
     "[|  ?s , Call \<rightarrow>\<^sub>?n  ?t ;
         !!n. [| ?n = Suc n;  ?s , body \<rightarrow>\<^sub>n  ?t  |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_app
                   (template_app (template_hole 7, template_hole 6),
                    template_app
                     (template_app (template_hole 5, template_var 2),
                      template_var 1)))),
              template_hole 4)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("OBJ.Sem_eval_cases",
     "[|  ?s , Assign ?x ?e \<rightarrow>\<^sub>?n  ?t ;
         [| ?n = Suc 0;
            ?t = (update (fst ?s) ?x (evalE ?e (fst ?s)), snd ?s) |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 5),
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app
                       (template_app (template_hole 11, template_var 4),
                        template_var 3)),
                    template_app
                     (template_app (template_hole 10, template_var 2),
                      template_var 1)))),
              template_hole 9)
            ),
        template_implication
         ([template_equation
            (template_var 2,
             template_app (template_hole 7, template_hole 6))],
          template_implication
           ([template_equation
              (template_var 1,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 5)),
                       template_var 4),
                     template_app
                      (template_app (template_hole 1, template_var 3),
                       template_app (template_hole 2, template_var 5)))),
                 template_app (template_hole 0, template_var 5)))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("OBJ.Sem_eval_cases",
     "[|  ?s , Comp ?c1.0 ?c2.0 \<rightarrow>\<^sub>?n  ?t ;
         !!n r m.
            [| ?n = Suc (max n m);  ?s , ?c1.0 \<rightarrow>\<^sub>n  r ;
                r , ?c2.0 \<rightarrow>\<^sub>m  ?t  |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 5),
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app (template_hole 7, template_var 4),
                        template_var 3)),
                    template_app
                     (template_app (template_hole 6, template_var 2),
                      template_var 1)))),
              template_hole 5)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("OBJ.Sem_eval_cases",
     "[|  ?s , New ?x ?C \<rightarrow>\<^sub>?n  ?t ;
         !!l. [| ?n = Suc 0;
                 ?t =
                 (update (fst ?s) ?x (RVal (Loc l)), (l, ?C, []) # snd ?s);
                 l ~: Dom (snd ?s) |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 23,
                template_app
                 (template_app (template_hole 22, template_var 5),
                  template_app
                   (template_app
                     (template_hole 21,
                      template_app
                       (template_app (template_hole 20, template_var 4),
                        template_var 3)),
                    template_app
                     (template_app (template_hole 19, template_var 2),
                      template_var 1)))),
              template_hole 18)
            ),
        template_predicate (template_app (template_hole 17, t_empty))],
       template_predicate (template_var 0))),
    ("OBJ.Sem_eval_cases",
     "[|  ?s , Get ?x ?y ?F \<rightarrow>\<^sub>?n  ?t ;
         !!l C Flds v.
            [| ?n = Suc 0; ?t = (update (fst ?s) ?x v, snd ?s);
               fst ?s ?y = RVal (Loc l); lookup (snd ?s) l = Some (C, Flds);
               lookup Flds ?F = Some v |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 27,
                template_app
                 (template_app (template_hole 26, template_var 6),
                  template_app
                   (template_app
                     (template_hole 25,
                      template_app
                       (template_app
                         (template_app (template_hole 24, template_var 5),
                          template_var 4),
                        template_var 3)),
                    template_app
                     (template_app (template_hole 23, template_var 2),
                      template_var 1)))),
              template_hole 22)
            ),
        template_predicate (template_app (template_hole 21, t_empty))],
       template_predicate (template_var 0))),
    ("OBJ.Sem_eval_cases",
     "[|  ?s , Put ?x ?F ?e \<rightarrow>\<^sub>?n  ?t ;
         !!l C Flds.
            [| ?n = Suc 0;
               ?t =
               (fst ?s, (l, C, (?F, evalE ?e (fst ?s)) # Flds) # snd ?s);
               fst ?s ?x = RVal (Loc l);
               lookup (snd ?s) l = Some (C, Flds) |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 27,
                template_app
                 (template_app (template_hole 26, template_var 6),
                  template_app
                   (template_app
                     (template_hole 25,
                      template_app
                       (template_app
                         (template_app (template_hole 24, template_var 5),
                          template_var 4),
                        template_var 3)),
                    template_app
                     (template_app (template_hole 23, template_var 2),
                      template_var 1)))),
              template_hole 22)
            ),
        template_predicate (template_app (template_hole 21, t_empty))],
       template_predicate (template_var 0))),
    ("OBJ.Sem_eval_cases",
     "[|  ?s , Iff ?b ?c1.0 ?c2.0 \<rightarrow>\<^sub>?n  ?t ;
         !!n. [| ?n = Suc n; evalB ?b (fst ?s);
                  ?s , ?c1.0 \<rightarrow>\<^sub>n  ?t  |]
              ==> ?P;
         !!n. [| ?n = Suc n; ~ evalB ?b (fst ?s);
                  ?s , ?c2.0 \<rightarrow>\<^sub>n  ?t  |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 6),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app
                         (template_app (template_hole 8, template_var 5),
                          template_var 4),
                        template_var 3)),
                    template_app
                     (template_app (template_hole 7, template_var 2),
                      template_var 1)))),
              template_hole 6)
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("OBJ.Sem_eval_cases",
     "[|  ?s , While ?b ?c \<rightarrow>\<^sub>?n  ?t ;
         !!n r m.
            [| ?n = Suc (max n m); evalB ?b (fst ?s);
                ?s , ?c \<rightarrow>\<^sub>n  r ;
                r , While ?b ?c \<rightarrow>\<^sub>m  ?t  |]
            ==> ?P;
         [| ?n = Suc 0; ?t = ?s; ~ evalB ?b (fst ?s) |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 5),
                  template_app
                   (template_app
                     (template_hole 13,
                      template_app
                       (template_app (template_hole 12, template_var 4),
                        template_var 3)),
                    template_app
                     (template_app (template_hole 11, template_var 2),
                      template_var 1)))),
              template_hole 10)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_implication
         ([template_equation
            (template_var 2,
             template_app (template_hole 6, template_hole 2))],
          template_implication
           ([template_equation (template_var 1, template_var 5)],
            template_implication
             ([template_negation
                (
                   template_predicate
                    (
                       template_app
                        (template_app (template_hole 4, template_var 4),
                         template_app (template_hole 3, template_var 5))
                       )
                   )],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.OBJMoreTemplates"
### 0.342s elapsed time, 0.460s cpu time, 0.043s GC time
val it = (): unit
