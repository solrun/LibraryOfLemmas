Loading theory "Draft.OBJ" (required by "Draft.PBIJMoreTemplates" via "Draft.PBIJ")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.PBIJMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.PBIJMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.PBIJMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
consts
  lookup :: "('a * 'b) list => 'a => 'b option"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.137s elapsed time, 0.570s cpu time, 0.041s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.PBIJMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.221s elapsed time, 0.910s cpu time, 0.041s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PBIJMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.326s elapsed time, 1.316s cpu time, 0.119s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.PBIJMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  evalE :: "Expr => (Var => Val) => Val"
Found termination order: "size <*mlex*> {}"
consts
  evalB :: "BExpr => (Var => Val) => bool"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.967s elapsed time, 3.644s cpu time, 0.820s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.037s elapsed time, 3.779s cpu time, 0.791s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "Semnp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.952s elapsed time, 6.062s cpu time, 1.047s GC time
Loading theory "Draft.Templates" (required by "Draft.PBIJMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 199 of "$AFP/SIFPL/OBJ.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>Sem" ("_position" s) ("_position" c) ("_position" t))
###     ("\<^const>HOL.Ex_binder" ("_position" n)
###       ("\<^const>OBJ.SemN" ("_position" s) ("_position" c) ("_position" n)
###         ("_position" t)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Sem" ("_position" s) ("_position" c)
###     ("\<^const>HOL.eq" ("_position" t)
###       ("\<^const>HOL.Ex_binder" ("_position" n)
###         ("\<^const>OBJ.SemN" ("_position" s) ("_position" c) ("_position" n)
###           ("_position" t))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>Sem" ("_position" s) ("_position" c) ("_position" t))
###     ("\<^const>OBJ.SemN"
###       ("\<^const>HOL.Ex_binder" ("_position" n) ("_position" s))
###       ("_position" c) ("_position" n) ("_position" t))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Sem" ("_position" s) ("_position" c)
###     ("\<^const>HOL.eq" ("_position" t)
###       ("\<^const>OBJ.SemN"
###         ("\<^const>HOL.Ex_binder" ("_position" n) ("_position" s))
###         ("_position" c) ("_position" n) ("_position" t)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.064s elapsed time, 0.141s cpu time, 0.034s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PBIJMoreTemplates")
### theory "Draft.OBJ"
### 2.441s elapsed time, 7.378s cpu time, 1.165s GC time
Loading theory "Draft.PBIJ" (required by "Draft.PBIJMoreTemplates")
### theory "Draft.PBIJ"
### 0.084s elapsed time, 0.172s cpu time, 0.000s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.510s elapsed time, 0.928s cpu time, 0.043s GC time
Loading theory "Draft.PBIJMoreTemplates"
val templateLemmas =
   [("PBIJ.Pbij_extends_reflexive", "Pbij_extends ?\<beta> ?\<beta>",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("PBIJ.mkId1", "mkId ?h : Pbij",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("PBIJ.Pbij_inverse_extends_twice",
     "Pbij_extends (Pbij_inverse (Pbij_inverse ?\<beta>)) ?\<beta>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_hole 0, template_var 0))),
           template_var 0)
         )),
    ("PBIJ.Pbij_inverse_Dom",
     "Pbij_Dom ?\<beta> = Pbij_Rng (Pbij_inverse ?\<beta>)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("PBIJ.Pbij_inverse_Rng",
     "Pbij_Dom (Pbij_inverse ?\<beta>) = Pbij_Rng ?\<beta>",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("PBIJ.mkId2", "Pbij_Dom (mkId ?h) = Dom ?h",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("PBIJ.mkId2b", "Pbij_Rng (mkId ?h) = Dom ?h",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("PBIJ.Pbij_compose_Dom",
     "Pbij_Dom (Pbij_compose ?\<beta> ?\<gamma>) <= Pbij_Dom ?\<beta>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("PBIJ.Pbij_compose_Rng",
     "Pbij_Rng (Pbij_compose ?\<beta> ?\<gamma>) <= Pbij_Rng ?\<gamma>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("PBIJ.Pbij_extends_inverse",
     "Pbij_extends ?\<gamma> (Pbij_inverse ?\<beta>) =
      Pbij_extends (Pbij_inverse ?\<gamma>) ?\<beta>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("PBIJ.Pbij_inverse_Pbij",
     "?\<beta> : Pbij ==> Pbij_inverse ?\<beta> : Pbij",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_hole 1)
           ))),
    ("PBIJ.mkId4", "?l : Dom ?h ==> (?l, ?l) : mkId ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("PBIJ.Pbij_inverseI",
     "(?l1.0, ?l2.0) : ?\<beta> ==> (?l2.0, ?l1.0) : Pbij_inverse ?\<beta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("PBIJ.Pbij_inverseD",
     "(?l1.0, ?l2.0) : Pbij_inverse ?\<beta> ==> (?l2.0, ?l1.0) : ?\<beta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2)),
             template_var 0)
           ))),
    ("PBIJ.Pbij_extends_transitive",
     "[| Pbij_extends ?\<beta> ?\<gamma>;
         Pbij_extends ?\<gamma> ?\<delta> |]
      ==> Pbij_extends ?\<beta> ?\<delta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("PBIJ.Pbij_compose_Pbij",
     "[| ?\<beta> : Pbij; ?\<gamma> : Pbij |]
      ==> Pbij_compose ?\<beta> ?\<gamma> : Pbij",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("PBIJ.mkId4b", "(?l, ?ll) : mkId ?h ==> ?l : Dom ?h & ?l = ?ll",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("PBIJ.Pbij_inverse_DomRng",
     "?\<gamma> = Pbij_inverse ?\<beta> ==>
      Pbij_Dom ?\<beta> = Pbij_Rng ?\<gamma> &
      Pbij_Dom ?\<gamma> = Pbij_Rng ?\<beta>",
     template_implication
      ([template_equation
         (template_var 1, template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_app (template_hole 0, template_var 1))),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("PBIJ.Pbij_inverse_Inverse",
     "?\<gamma> = Pbij_inverse ?\<beta> ==>
      ((?l, ?ll) : ?\<beta>) = ((?ll, ?l) : ?\<gamma>)",
     template_implication
      ([template_equation
         (template_var 3, template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 3)))),
    ("PBIJ.Pbij_inverse_extends_twice_Aux",
     "[| ?\<delta> = Pbij_inverse ?\<epsilon>;
         Pbij_extends ?\<epsilon> ?\<gamma>;
         ?\<gamma> = Pbij_inverse ?\<beta> |]
      ==> Pbij_extends ?\<delta> ?\<beta>",
     template_implication
      ([template_equation
         (template_var 3, template_app (template_hole 1, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_var 1, template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3), template_var 0)
           ))),
    ("PBIJ.Pbij_composeI",
     "[| (?l1.0, ?l2.0) : ?\<beta>; (?l2.0, ?l3.0) : ?\<gamma> |]
      ==> (?l1.0, ?l3.0) : Pbij_compose ?\<beta> ?\<gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("PBIJ.Pbij_composeD",
     "(?l1.0, ?l3.0) : Pbij_compose ?\<beta> ?\<gamma> ==>
      EX l2. (?l1.0, l2) : ?\<beta> & (l2, ?l3.0) : ?\<gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("PBIJ.Pbij_injective",
     "?\<beta> : Pbij ==>
      ALL l l1 l2. (l1, l) : ?\<beta> --> (l2, l) : ?\<beta> --> l1 = l2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_hole 5)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("PBIJ.Pbij_insert",
     "[| ?\<beta> : Pbij; ?l ~: Pbij_Rng ?\<beta>;
         ?ll ~: Pbij_Dom ?\<beta> |]
      ==> insert (?ll, ?l) ?\<beta> : Pbij",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_hole 6)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app (template_hole 3, template_var 2))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_app (template_hole 2, template_var 2))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1)),
                 template_var 2)),
             template_hole 6)
           )))]:
   (string * thm * template) list
### theory "Draft.PBIJMoreTemplates"
### 0.343s elapsed time, 0.480s cpu time, 0.049s GC time
val it = (): unit
