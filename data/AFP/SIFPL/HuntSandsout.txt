Loading theory "Draft.Lattice" (required by "Draft.HuntSandsMoreTemplates" via "Draft.HuntSands")
Loading theory "Draft.IMP" (required by "Draft.HuntSandsMoreTemplates" via "Draft.HuntSands" via "Draft.VDM")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.HuntSandsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.HuntSandsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.Lattice"
### 0.037s elapsed time, 0.180s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.HuntSandsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.139s elapsed time, 0.577s cpu time, 0.045s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.HuntSandsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.276s elapsed time, 1.073s cpu time, 0.131s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.HuntSandsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.333s elapsed time, 1.334s cpu time, 0.131s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.HuntSandsMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
consts
  evalE :: "Expr => (Var => Val) => Val"
consts
  evalB :: "BExpr => (Var => Val) => bool"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Semnp"
  Proving monotonicity ...
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.981s elapsed time, 3.714s cpu time, 0.863s GC time
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.050s elapsed time, 3.918s cpu time, 0.863s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 128 of "$AFP/SIFPL/IMP.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>Sem" ("_position" s) ("_position" c) ("_position" t))
###     ("\<^const>HOL.Ex_binder" ("_position" n)
###       ("\<^const>IMP.SemN" ("_position" s) ("_position" c) ("_position" n)
###         ("_position" t)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Sem" ("_position" s) ("_position" c)
###     ("\<^const>HOL.eq" ("_position" t)
###       ("\<^const>HOL.Ex_binder" ("_position" n)
###         ("\<^const>IMP.SemN" ("_position" s) ("_position" c) ("_position" n)
###           ("_position" t))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>Sem" ("_position" s) ("_position" c) ("_position" t))
###     ("\<^const>IMP.SemN"
###       ("\<^const>HOL.Ex_binder" ("_position" n) ("_position" s))
###       ("_position" c) ("_position" n) ("_position" t))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Sem" ("_position" s) ("_position" c)
###     ("\<^const>HOL.eq" ("_position" t)
###       ("\<^const>IMP.SemN"
###         ("\<^const>HOL.Ex_binder" ("_position" n) ("_position" s))
###         ("_position" c) ("_position" n) ("_position" t)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.IMP"
### 1.734s elapsed time, 6.011s cpu time, 1.083s GC time
Loading theory "Draft.VDM" (required by "Draft.HuntSandsMoreTemplates" via "Draft.HuntSands")
### Ambiguous input (line 55 of "$AFP/SIFPL/VDM.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>Ctxt_valid" ("_position" G))
###     ("\<^const>HOL.All_binder" ("_position" A)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" A) ("_position" G))
###         ("\<^const>Set.member" ("\<^fixed>Ctxt_valid" ("_position" Call))
###           ("_position" A))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>Ctxt_valid" ("_position" G))
###     ("\<^const>HOL.All_binder" ("_position" A)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_position" A) ("_position" G))
###         ("\<^const>VDM.VDM_valid" ("_position" Call) ("_position" A))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 61 of "$AFP/SIFPL/VDM.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>Ctxt_validn" ("_position" n) ("_position" G))
###     ("\<^const>HOL.All_binder" ("_position" m)
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" n))
###         ("\<^const>HOL.All_binder" ("_position" A)
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.member" ("_position" A) ("_position" G))
###             ("\<^const>Set.member"
###               ("\<^fixed>Ctxt_validn" ("_position" m) ("_position" Call))
###               ("_position" A))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>Ctxt_validn" ("_position" n) ("_position" G))
###     ("\<^const>HOL.All_binder" ("_position" m)
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" n))
###         ("\<^const>HOL.All_binder" ("_position" A)
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.member" ("_position" A) ("_position" G))
###             ("\<^const>VDM.VDM_validn" ("_position" m) ("_position" Call)
###               ("_position" A))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 89 of "$AFP/SIFPL/VDM.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>valid" ("_position" G) ("_position" c) ("_position" A))
###     ("\<^const>HOL.implies" ("\<^const>VDM.Ctxt_valid" ("_position" G))
###       ("\<^const>VDM.VDM_valid" ("_position" c) ("_position" A)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>valid" ("_position" G) ("_position" c) ("_position" A))
###     ("\<^const>HOL.implies" ("\<^const>VDM.Ctxt_valid" ("_position" G))
###       ("\<^const>Set.member" ("\<^const>VDM.Ctxt_valid" ("_position" c))
###         ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 96 of "$AFP/SIFPL/VDM.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>validn" ("_position" G) ("_position" n) ("_position" c)
###       ("_position" A))
###     ("\<^const>HOL.implies"
###       ("\<^const>VDM.Ctxt_validn" ("_position" n) ("_position" G))
###       ("\<^const>Set.member"
###         ("\<^const>VDM.Ctxt_validn" ("_position" n) ("_position" c))
###         ("_position" A)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>validn" ("_position" G) ("_position" n) ("_position" c)
###       ("_position" A))
###     ("\<^const>HOL.implies"
###       ("\<^const>VDM.Ctxt_validn" ("_position" n) ("_position" G))
###       ("\<^const>VDM.VDM_validn" ("_position" n) ("_position" c)
###         ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 107 of "$AFP/SIFPL/VDM.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM.Ctxt_validn" ("_position" n) ("_position" G)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("\<^const>VDM.Ctxt_validn" ("_position" n) ("_position" Call))
###           ("_position" A)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM.Ctxt_validn" ("_position" n)
###       ("\<^const>Set.union" ("_Finset" ("_position" A)) ("_position" G)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>VDM.Ctxt_validn" ("_position" n) ("_position" G)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>VDM.VDM_validn" ("_position" n) ("_position" Call)
###           ("_position" A)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM.Ctxt_validn" ("_position" n)
###       ("\<^const>Set.union" ("_Finset" ("_position" A)) ("_position" G)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "VDM_proofp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 246 of "$AFP/SIFPL/VDM.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>HOL.implies"
###           ("\<^const>VDM.Ctxt_validn" ("_position" n)
###             ("\<^const>Set.union" ("_Finset" ("_position" A))
###               ("_position" G)))
###           ("\<^const>Set.member"
###             ("\<^const>VDM.Ctxt_validn" ("_position" n) ("_position" body))
###             ("_position" A))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>VDM.Ctxt_validn" ("_position" n) ("_position" G))
###       ("\<^const>VDM.VDM_validn" ("_position" n) ("_position" Call)
###         ("_position" A)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>HOL.implies"
###           ("\<^const>VDM.Ctxt_validn" ("_position" n)
###             ("\<^const>Set.union" ("_Finset" ("_position" A))
###               ("_position" G)))
###           ("\<^const>VDM.VDM_validn" ("_position" n) ("_position" body)
###             ("_position" A))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>VDM.Ctxt_validn" ("_position" n) ("_position" G))
###       ("\<^const>VDM.VDM_validn" ("_position" n) ("_position" Call)
###         ("_position" A)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>HOL.implies"
###           ("\<^const>VDM.Ctxt_validn" ("_position" n)
###             ("\<^const>Set.union" ("_Finset" ("_position" A))
###               ("_position" G)))
###           ("\<^const>Set.member"
###             ("\<^const>VDM.Ctxt_validn" ("_position" n) ("_position" body))
###             ("_position" A))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>VDM.Ctxt_validn" ("_position" n) ("_position" G))
###       ("\<^const>Set.member"
###         ("\<^const>VDM.Ctxt_validn" ("_position" n) ("_position" Call))
###         ("_position" A)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" n)
###         ("\<^const>HOL.implies"
###           ("\<^const>VDM.Ctxt_validn" ("_position" n)
###             ("\<^const>Set.union" ("_Finset" ("_position" A))
###               ("_position" G)))
###           ("\<^const>VDM.VDM_validn" ("_position" n) ("_position" body)
###             ("_position" A))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>VDM.Ctxt_validn" ("_position" n) ("_position" G))
###       ("\<^const>Set.member"
###         ("\<^const>VDM.Ctxt_validn" ("_position" n) ("_position" Call))
###         ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 300 of "$AFP/SIFPL/VDM.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM.VDM_deriv" ("\<^const>Set.empty") ("_position" c)
###       ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("\<^const>VDM.Ctxt_valid" ("_position" c))
###       ("_position" A))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM.VDM_deriv" ("\<^const>Set.empty") ("_position" c)
###       ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM.VDM_valid" ("_position" c) ("_position" A))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Tree"
### 2.010s elapsed time, 6.295s cpu time, 1.119s GC time
Loading theory "Draft.Templates" (required by "Draft.HuntSandsMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 471 of "$AFP/SIFPL/VDM.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>IMP.Sem"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" SSpec)
###         ("_cargs" ("_position" c)
###           ("_cargs" ("_position" s) ("_position" t))))
###       ("_position" s))
###     ("_position" c) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" SSpec)
###     ("\<^const>IMP.Sem"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" c)
###           ("_cargs" ("_position" s) ("_position" t)))
###         ("_position" s))
###       ("_position" c) ("_position" t))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" SSpec)
###     ("_cargs" ("_position" c)
###       ("\<^const>IMP.Sem"
###         ("\<^const>HOL.eq" ("_applC" ("_position" s) ("_position" t))
###           ("_position" s))
###         ("_position" c) ("_position" t)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" SSpec)
###     ("_cargs" ("_position" c)
###       ("_cargs" ("_position" s)
###         ("\<^const>IMP.Sem"
###           ("\<^const>HOL.eq" ("_position" t) ("_position" s))
###           ("_position" c) ("_position" t))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" SSpec)
###       ("_cargs" ("_position" c) ("_cargs" ("_position" s) ("_position" t))))
###     ("\<^const>IMP.Sem" ("_position" s) ("_position" c) ("_position" t))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 474 of "$AFP/SIFPL/VDM.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("\<^const>VDM.Ctxt_valid" ("_position" c))
###     ("_applC" ("_position" SSpec) ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>VDM.VDM_valid" ("_position" c)
###     ("_applC" ("_position" SSpec) ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 480 of "$AFP/SIFPL/VDM.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("\<^const>VDM.Ctxt_valid" ("_position" c))
###       ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" t))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" SSpec)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" s) ("_position" t))))
###         ("_applC" ("_position" A)
###           ("_cargs" ("_position" s) ("_position" t)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM.VDM_valid" ("_position" c) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" t))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" SSpec)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" s) ("_position" t))))
###         ("_applC" ("_position" A)
###           ("_cargs" ("_position" s) ("_position" t)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### Ambiguous input (line 565 of "$AFP/SIFPL/VDM.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("\<^const>VDM.Ctxt_valid" ("_position" c))
###       ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM.VDM_deriv" ("\<^const>Set.empty") ("_position" c)
###       ("_position" A))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM.VDM_valid" ("_position" c) ("_position" A)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM.VDM_deriv" ("\<^const>Set.empty") ("_position" c)
###       ("_position" A))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Templates"
### 0.056s elapsed time, 0.112s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.HuntSandsMoreTemplates")
### theory "Draft.VDM"
### 0.475s elapsed time, 0.988s cpu time, 0.081s GC time
Loading theory "Draft.HuntSands" (required by "Draft.HuntSandsMoreTemplates")
### Ambiguous input (line 34 of "$AFP/SIFPL/HuntSands.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ARSsecure)
###       ("_cargs" ("_position" A)
###         ("_cargs" ("_position" R)
###           ("_cargs" ("_position" S) ("_position" c)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member" ("\<^const>VDM.Ctxt_valid" ("_position" c))
###         ("_position" A))
###       ("_applC" ("_position" RSsecure)
###         ("_cargs" ("_position" R)
###           ("_cargs" ("_position" S) ("_position" c)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ARSsecure)
###       ("_cargs" ("_position" A)
###         ("_cargs" ("_position" R)
###           ("_cargs" ("_position" S) ("_position" c)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>VDM.VDM_valid" ("_position" c) ("_position" A))
###       ("_applC" ("_position" RSsecure)
###         ("_cargs" ("_position" R)
###           ("_cargs" ("_position" S) ("_position" c)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 46 of "$AFP/SIFPL/HuntSands.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("\<^const>VDM.Ctxt_valid" ("_position" c))
###       ("_applC" ("_position" Sec)
###         ("_cargs" ("_position" A)
###           ("_cargs" ("_position" R)
###             ("_cargs" ("_position" S) ("_position" \<Phi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" ARSsecure)
###       ("_cargs" ("_position" A)
###         ("_cargs" ("_position" R)
###           ("_cargs" ("_position" S) ("_position" c)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM.VDM_valid" ("_position" c)
###       ("_applC" ("_position" Sec)
###         ("_cargs" ("_position" A)
###           ("_cargs" ("_position" R)
###             ("_cargs" ("_position" S) ("_position" \<Phi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" ARSsecure)
###       ("_cargs" ("_position" A)
###         ("_cargs" ("_position" R)
###           ("_cargs" ("_position" S) ("_position" c)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/SIFPL/HuntSands.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" ARSsecure)
###       ("_cargs" ("_position" A)
###         ("_cargs" ("_position" R)
###           ("_cargs" ("_position" S) ("_position" c))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("\<^const>VDM.Ctxt_valid" ("_position" c))
###       ("_applC" ("_position" Sec)
###         ("_cargs" ("_position" A)
###           ("_cargs" ("_position" R)
###             ("_cargs" ("_position" S)
###               ("_lambda" ("_pattern" ("_position" r) ("_position" t))
###                 ("\<^const>HOL.Ex_binder" ("_position" s)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>IMP.Sem" ("_position" s) ("_position" c)
###                       ("_position" r))
###                     ("_applC" ("_position" R)
###                       ("_cargs" ("_position" s) ("_position" t)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" ARSsecure)
###       ("_cargs" ("_position" A)
###         ("_cargs" ("_position" R)
###           ("_cargs" ("_position" S) ("_position" c))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>VDM.VDM_valid" ("_position" c)
###       ("_applC" ("_position" Sec)
###         ("_cargs" ("_position" A)
###           ("_cargs" ("_position" R)
###             ("_cargs" ("_position" S)
###               ("_lambda" ("_pattern" ("_position" r) ("_position" t))
###                 ("\<^const>HOL.Ex_binder" ("_position" s)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>IMP.Sem" ("_position" s) ("_position" c)
###                       ("_position" r))
###                     ("_applC" ("_position" R)
###                       ("_cargs" ("_position" s) ("_position" t)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "HS_Ep"
  Proving monotonicity ...
Proofs for inductive predicate(s) "HS_Bp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "HSp"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.547s elapsed time, 1.139s cpu time, 0.108s GC time
Proofs for inductive predicate(s) "varp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "varDp"
  Proving monotonicity ...
### Ambiguous input (line 1011 of "$AFP/SIFPL/HuntSands.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" p)
###         ("_tuple_args" ("_position" G)
###           ("_tuple_args" ("_position" c) ("_tuple_arg" ("_position" H)))))
###       ("_position" HS)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<Phi>)
###       ("\<^const>VDM.VDM_valid" ("_position" c)
###         ("_applC" ("_position" Sec)
###           ("_cargs"
###             ("_applC" ("_position" Q)
###               ("_cargs" ("_position" p) ("_position" H)))
###             ("_cargs"
###               ("_applC" ("_position" EQ)
###                 ("_cargs" ("_position" G) ("_position" q)))
###               ("_cargs"
###                 ("_applC" ("_position" EQ)
###                   ("_cargs" ("_position" H) ("_position" q)))
###                 ("_position" \<Phi>)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" p)
###         ("_tuple_args" ("_position" G)
###           ("_tuple_args" ("_position" c) ("_tuple_arg" ("_position" H)))))
###       ("_position" HS)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<Phi>)
###       ("\<^const>Set.member" ("\<^const>VDM.Ctxt_valid" ("_position" c))
###         ("_applC" ("_position" Sec)
###           ("_cargs"
###             ("_applC" ("_position" Q)
###               ("_cargs" ("_position" p) ("_position" H)))
###             ("_cargs"
###               ("_applC" ("_position" EQ)
###                 ("_cargs" ("_position" G) ("_position" q)))
###               ("_cargs"
###                 ("_applC" ("_position" EQ)
###                   ("_cargs" ("_position" H) ("_position" q)))
###                 ("_position" \<Phi>)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "Derivp"
  Proving monotonicity ...
### theory "Draft.HuntSands"
### 1.668s elapsed time, 2.315s cpu time, 0.207s GC time
Loading theory "Draft.HuntSandsMoreTemplates"
val templateLemmas =
   [("HuntSands.Q_transitive", "transitive (Q ?q ?G)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("HuntSands.PhiWhilePOp_Monotone",
     "Monotone (PhiWhilePOp ?A ?b ?\<Phi>)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("HuntSands.PhiWhilePMonotone", "Monotone (PhiWhileP ?A ?b)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("HuntSands.IfDMonotone", "Monotone (%T (s, t). EQ ?G ?p s t)",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("HuntSands.WhileDMonotone", "Monotone (%T (s, t). EQ ?G ?q s t)",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("HuntSands.Fix_lemma",
     "Monotone ?\<phi> ==> ?\<phi> (FIX ?\<phi>) = FIX ?\<phi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_var 0, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("HuntSands.DerivProp_Aux", "(?X, ?c, ?A) : Deriv ==> DProp ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 0))),
              template_hole 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("HuntSands.Prop4A",
     " \<Turnstile> ?c : Sec ?A ?R ?S ?\<Phi>  ==> ARSsecure ?A ?R ?S ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 4)
           ))),
    ("HuntSands.varMonotone_byFIX",
     "Monotone (%\<Phi> (s, t). (?b, ?A, \<Phi>, s, t) : var)",
     template_predicate (template_app (template_hole 7, t_empty))),
    ("HuntSands.Deriv_derivable",
     "(?X, ?c, ?A) : Deriv ==> ?X \<rhd> ?c : ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 0))),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             template_hole 0)
           ))),
    ("HuntSands.HuntSands33",
     "(?p, ?G, ?c, ?H) : HS ==> secure ?p ?G ?c ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_app
                     (template_app (template_hole 2, template_var 1),
                      template_var 0)))),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("HuntSands.HuntSands33_1",
     "(?p, ?G, ?c, ?H) : HS ==> secure1 ?p ?G ?c ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_app
                     (template_app (template_hole 2, template_var 1),
                      template_var 0)))),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("HuntSands.HuntSands33_2",
     "(?p, ?G, ?c, ?H) : HS ==> secure2 ?q ?G ?c ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_app
                     (template_app (template_hole 2, template_var 2),
                      template_var 1)))),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("HuntSands.Fix1",
     "[| Monotone ?\<phi>; FIX ?\<phi> (?s, ?t) |]
      ==> ?\<phi> (FIX ?\<phi>) (?s, ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_var 2,
               template_app (template_hole 1, template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("HuntSands.Fix2",
     "[| Monotone ?\<phi>; ?\<phi> (FIX ?\<phi>) (?s, ?t) |]
      ==> FIX ?\<phi> (?s, ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_var 2,
                template_app (template_hole 1, template_var 2)),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("HuntSands.EQ_LEQ",
     "[| EQ ?G ?p ?s ?t; LEQ ?pp ?p |] ==> EQ ?G ?pp ?s ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("HuntSands.Theorem3_derivAux",
     "(?p, ?G, ?c, ?H) : HS ==> Theorem3derivProp ?X ?p ?G ?c ?H ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 5),
                  template_app
                   (template_app (template_hole 3, template_var 4),
                    template_app
                     (template_app (template_hole 2, template_var 3),
                      template_var 2)))),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("HuntSands.varDQ", "(?b, Q ?q ?G, ?s, ?t) : varD ==> Q ?q ?G ?s ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 2, template_var 3),
                        template_var 2)),
                    template_app
                     (template_app (template_hole 1, template_var 1),
                      template_var 0)))),
              template_hole 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("HuntSands.varD_transitive",
     "[| (?b, ?A, ?s, ?t) : varD; transitive ?A |] ==> ?A ?s ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_app
                     (template_app (template_hole 2, template_var 1),
                      template_var 0)))),
              template_hole 1)
            ),
        template_predicate
         (template_app (template_hole 0, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("HuntSands.FIXvarFIX",
     "PhiWhileP ?A ?b = (%\<Phi> (s, t). (?b, ?A, \<Phi>, s, t) : var)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       t_empty)),
    ("HuntSands.FIXvarFIX'",
     "PhiWhileP ?A ?b ?\<Phi> = (%(s, t). (?b, ?A, ?\<Phi>, s, t) : var)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 2), template_var 1),
         template_var 0),
       template_app (template_hole 6, t_empty))),
    ("HuntSands.secureEQUIV",
     "secure ?p ?G ?c ?H =
      (ALL q. secure1 ?p ?G ?c ?H & secure2 q ?G ?c ?H)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app (template_hole 3, t_empty))),
    ("HuntSands.varFIXvar",
     "PhiWhileP ?A ?b ?\<Phi> (?s, ?t) = ((?b, ?A, ?\<Phi>, ?s, ?t) : var)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app (template_hole 2, template_var 4),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 0))))),
         template_hole 0))),
    ("HuntSands.FIXvar",
     "PhiWhileP ?A ?b ?\<Phi> (?s, ?t) ==> (?b, ?A, ?\<Phi>, ?s, ?t) : var",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app
                  (template_app (template_hole 2, template_var 4),
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_app
                      (template_app (template_hole 5, template_var 1),
                       template_var 0))))),
             template_hole 0)
           ))),
    ("HuntSands.Sec1_deriv",
     "(?p, ?G, ?c, ?H) : HS ==> ?X \<rhd> ?c : Q ?p ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_app
                     (template_app (template_hole 6, template_var 2),
                      template_var 1)))),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 1)))),
             template_hole 0)
           ))),
    ("HuntSands.varFIX",
     "(?b, ?A, ?\<Phi>, ?s, ?t) : var ==> PhiWhileP ?A ?b ?\<Phi> (?s, ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_app
                     (template_app (template_hole 3, template_var 2),
                      template_app
                       (template_app (template_hole 2, template_var 1),
                        template_var 0))))),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 4),
               template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))
           ))),
    ("HuntSands.AssignMonotone",
     "Monotone
       (%T (s, t). EX r. s = update r ?x (evalE ?e r) & EQ ?G ?p r t)",
     template_predicate (template_app (template_hole 7, t_empty))),
    ("HuntSands.CompMonotone",
     "Monotone
       (%T (s, t). EX r. ?A r t & (ALL w. EQ ?K ?q r w --> ?B s w))",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("HuntSands.IfPMonotone2",
     "Monotone
       (%T (s, t).
           (evalB ?b t --> ?A (s, t)) & (~ evalB ?b t --> T (s, t)))",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("HuntSands.IfPMonotone1",
     "Monotone
       (%T (s, t).
           (evalB ?b t --> T (s, t)) & (~ evalB ?b t --> ?B (s, t)))",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("HuntSands.HS_Aux1",
     "(?p, ?G, ?c, ?H) : HS ==> ALL x. LEQ (?G x) (?H x) | LEQ ?p (?H x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_app
                     (template_app (template_hole 4, template_var 1),
                      template_var 0)))),
              template_hole 3)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("HuntSands.SKIP",
     "?X \<rhd> Skip : Sec (Q ?p ?H) (EQ ?G ?q) (EQ ?G ?q)
                        (%(s, t). EQ ?G ?q s t)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 4),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_var 3),
                           template_var 2)),
                       template_app
                        (template_app (template_hole 2, template_var 1),
                         template_var 0)),
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 0)),
                   template_app (template_hole 1, t_empty))))),
           template_hole 0)
         )),
    ("HuntSands.Prop4B",
     "ARSsecure ?A ?R ?S ?c ==>
       \<Turnstile> ?c : Sec ?A ?R ?S
                          (%(r, t). EX s. s , ?c \<Down> r  & ?R s t) ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 0),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 2),
                 template_var 1),
               template_app (template_hole 3, t_empty)))
           ))),
    ("HuntSands.Sec2",
     "(?p, ?G, ?c, ?H) : HS ==>
      EX \<Phi>.
          \<Turnstile> ?c : Sec (Q ?p ?H) (EQ ?G ?q) (EQ ?H ?q) \<Phi> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_app
                     (template_app (template_hole 6, template_var 2),
                      template_var 1)))),
              template_hole 5)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("HuntSands.if_algorithmic",
     "[| EX x. LEQ ?p (?H x) & LEQ (?H x) ?q;
         \<nexists>x. LEQ ?p (?H x) & LEQ (?H x) ?q |]
      ==> False",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_negation
         (template_predicate (template_app (template_hole 4, t_empty)))],
       template_predicate (template_hole 0))),
    ("HuntSands.HS_E_eval",
     "[| (?G, ?e, ?t) : HS_E; EQ ?G ?q ?r ?s; LEQ ?t ?q |]
      ==> evalE ?e ?r = evalE ?e ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 5),
                  template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 3))),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 4), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 4),
           template_var 0)))),
    ("HuntSands.HS_B_eval",
     "[| (?G, ?b, ?t) : HS_B; EQ ?G ?pp ?r ?s; LEQ ?t ?pp |]
      ==> evalB ?b ?r = evalB ?b ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 5),
                  template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 3))),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 4), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 4),
           template_var 0)))),
    ("HuntSands.DerivMono",
     "(?X, ?c, ?B) : Deriv ==>
      EX A R S \<phi>.
         ?B = Sec A R S (\<phi> (FIX \<phi>)) & Monotone \<phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_app
                   (template_app (template_hole 8, template_var 1),
                    template_var 0))),
              template_hole 7)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("HuntSands.Theorem4",
     "(?p, ?G, ?c, ?H) : HS ==>
      EX \<Phi>. ?X \<rhd> ?c : Sec (Q ?p ?H) (EQ ?G ?q) (EQ ?H ?q) \<Phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 5),
                  template_app
                   (template_app (template_hole 10, template_var 4),
                    template_app
                     (template_app (template_hole 9, template_var 3),
                      template_var 2)))),
              template_hole 8)
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("HuntSands.varDMonotoneInAssertion",
     "[| (?b, ?A, ?s, ?t) : varD; !!s t. ?A s t ==> ?B s t |]
      ==> (?b, ?B, ?s, ?t) : varD",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_app
                     (template_app (template_hole 2, template_var 2),
                      template_var 1)))),
              template_hole 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1)))),
             template_hole 1)
           ))),
    ("HuntSands.varDMonotoneInPhi",
     "[| (?b, ?A, ?s, ?t) : varD;
         !!s t. ?\<Phi> (s, t) ==> ?\<Psi> (s, t) |]
      ==> (?b, ?A, ?s, ?t) : varD",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 5),
                  template_app
                   (template_app (template_hole 5, template_var 4),
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 2)))),
              template_hole 3)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 5),
                 template_app
                  (template_app (template_hole 5, template_var 4),
                   template_app
                    (template_app (template_hole 4, template_var 3),
                     template_var 2)))),
             template_hole 3)
           ))),
    ("HuntSands.varMonotoneAux",
     "[| (?b, ?A, ?\<Phi>, ?s, ?t) : var;
         !!s t. ?\<Phi> (s, t) ==> ?\<Psi> (s, t) |]
      ==> (?b, ?A, ?\<Psi>, ?s, ?t) : var",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 5),
                  template_app
                   (template_app (template_hole 4, template_var 4),
                    template_app
                     (template_app (template_hole 3, template_var 3),
                      template_app
                       (template_app (template_hole 2, template_var 2),
                        template_var 1))))),
              template_hole 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 5),
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 1))))),
             template_hole 1)
           ))),
    ("HuntSands.CALL",
     "[| ({?B} Un ?X) \<rhd> body : Sec ?A ?R ?S (?\<phi> (FIX ?\<phi>));
         Monotone ?\<phi>; ?B = Sec ?A ?R ?S (FIX ?\<phi>) |]
      ==> ?X \<rhd> Call : ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_var 5),
                          template_hole 8)),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 7, template_hole 6),
                    template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 5, template_var 3),
                          template_var 2),
                        template_var 1),
                      template_app
                       (template_var 0,
                        template_app (template_hole 4, template_var 0)))))),
              template_hole 3)
            ),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_equation
         (template_var 5,
          template_app
           (template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1),
            template_app (template_hole 4, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 11, template_var 4),
                 template_app
                  (template_app (template_hole 7, template_hole 0),
                   template_var 5))),
             template_hole 3)
           ))),
    ("HuntSands.IF_alg_derivable_from_If",
     "[| (?G, ?b, ?p) : HS_B; (?p, ?G, ?c1.0, ?H) : HS;
         (?p, ?G, ?c2.0, ?H) : HS |]
      ==> (?p, ?G, Iff ?b ?c1.0 ?c2.0, ?H) : HS",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_app
                   (template_app (template_hole 7, template_var 4),
                    template_var 3))),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_var 5),
                    template_app
                     (template_app (template_hole 2, template_var 2),
                      template_var 1)))),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_var 5),
                    template_app
                     (template_app (template_hole 2, template_var 0),
                      template_var 1)))),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app
                  (template_app (template_hole 3, template_var 5),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 4),
                           template_var 2),
                         template_var 0)),
                     template_var 1)))),
             template_hole 1)
           ))),
    ("HuntSands.IF_derivable_from_If_alg",
     "[| (?G, ?b, ?t) : HS_B; (LUB ?p ?t, ?G, ?c1.0, ?H) : HS;
         (LUB ?p ?t, ?G, ?c2.0, ?H) : HS |]
      ==> (?p, ?G, Iff ?b ?c1.0 ?c2.0, ?H) : HS",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 6),
                  template_app
                   (template_app (template_hole 8, template_var 5),
                    template_var 4))),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 3, template_var 6),
                    template_app
                     (template_app (template_hole 2, template_var 2),
                      template_var 1)))),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 3, template_var 6),
                    template_app
                     (template_app (template_hole 2, template_var 0),
                      template_var 1)))),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_app (template_hole 3, template_var 6),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 5),
                           template_var 2),
                         template_var 0)),
                     template_var 1)))),
             template_hole 1)
           ))),
    ("HuntSands.WHILE_DIAGONAL",
     "[| ?X \<rhd> ?c : Sec (Q ?p ?G) (EQ ?G ?q) (EQ ?G ?q) ?\<Phi>;
         ~ LEQ ?p ?q |]
      ==> ?X \<rhd> While ?b
                     ?c : Sec (Q ?p ?G) (EQ ?G ?q) (EQ ?G ?q)
                           (%(s, t). EQ ?G ?q s t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 6),
                  template_app
                   (template_app (template_hole 8, template_var 5),
                    template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_hole 7,
                            template_app
                             (template_app
                               (template_hole 6, template_var 4),
                              template_var 3)),
                          template_app
                           (template_app (template_hole 5, template_var 3),
                            template_var 2)),
                        template_app
                         (template_app (template_hole 5, template_var 3),
                          template_var 2)),
                      template_var 1)))),
              template_hole 4)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 2)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_var 6),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 5)),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 7,
                           template_app
                            (template_app (template_hole 6, template_var 4),
                             template_var 3)),
                         template_app
                          (template_app (template_hole 5, template_var 3),
                           template_var 2)),
                       template_app
                        (template_app (template_hole 5, template_var 3),
                         template_var 2)),
                     template_app (template_hole 0, t_empty))))),
             template_hole 4)
           ))),
    ("HuntSands.WHILE_PARALLEL_tp",
     "[| ?X \<rhd> ?c : Sec (Q ?p ?G) (EQ ?G ?q) (EQ ?G ?q) ?\<Phi>;
         (?G, ?b, ?p) : HS_B; LEQ ?p ?q |]
      ==> ?X \<rhd> While ?b
                     ?c : Sec (Q ?p ?G) (EQ ?G ?q) (EQ ?G ?q)
                           (PhiWhileP (EQ ?G ?q) ?b ?\<Phi>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 6),
                  template_app
                   (template_app (template_hole 11, template_var 5),
                    template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_hole 10,
                            template_app
                             (template_app
                               (template_hole 9, template_var 4),
                              template_var 3)),
                          template_app
                           (template_app (template_hole 8, template_var 3),
                            template_var 2)),
                        template_app
                         (template_app (template_hole 8, template_var 3),
                          template_var 2)),
                      template_var 1)))),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_app
                   (template_app (template_hole 4, template_var 0),
                    template_var 4))),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app (template_hole 12, template_var 6),
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 5)),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 10,
                           template_app
                            (template_app (template_hole 9, template_var 4),
                             template_var 3)),
                         template_app
                          (template_app (template_hole 8, template_var 3),
                           template_var 2)),
                       template_app
                        (template_app (template_hole 8, template_var 3),
                         template_var 2)),
                     template_app
                      (template_app
                        (template_app
                          (template_hole 0,
                           template_app
                            (template_app (template_hole 8, template_var 3),
                             template_var 2)),
                         template_var 0),
                       template_var 1))))),
             template_hole 7)
           ))),
    ("HuntSands.SUB",
     "[| LEQ ?p ?pp; ALL x. LEQ (?G x) (?GG x); ALL x. LEQ (?HH x) (?H x);
         ?X \<rhd> ?c : Sec (Q ?pp ?HH) (EQ ?GG ?q) (EQ ?HH ?q) ?\<Phi> |]
      ==> ?X \<rhd> ?c : Sec (Q ?p ?H) (EQ ?G ?q) (EQ ?H ?q) ?\<Phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 9),
              template_var 8)
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_hole 3,
                            template_app
                             (template_app
                               (template_hole 2, template_var 8),
                              template_var 5)),
                          template_app
                           (template_app (template_hole 1, template_var 6),
                            template_var 1)),
                        template_app
                         (template_app (template_hole 1, template_var 5),
                          template_var 1)),
                      template_var 0)))),
              template_hole 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_app (template_hole 2, template_var 9),
                             template_var 4)),
                         template_app
                          (template_app (template_hole 1, template_var 7),
                           template_var 1)),
                       template_app
                        (template_app (template_hole 1, template_var 4),
                         template_var 1)),
                     template_var 0)))),
             template_hole 0)
           ))),
    ("HuntSands.ASSIGN",
     "[| ?H = upd ?G ?x (LUB ?p ?t);
         ALL s ss. EQ ?G ?t s ss --> evalE ?e s = evalE ?e ss |]
      ==> ?X \<rhd> Assign ?x
                     ?e : Sec (Q ?p ?H) (EQ ?G ?q) (EQ ?H ?q)
                           (%(s, t).
                               EX r. s = update r ?x (evalE ?e r) &
                                     EQ ?G ?q r t)",
     template_implication
      ([template_equation
         (template_var 7,
          template_app
           (template_app
             (template_app (template_hole 18, template_var 6),
              template_var 5),
            template_app
             (template_app (template_hole 17, template_var 4),
              template_var 3))),
        template_predicate (template_app (template_hole 16, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app (template_hole 10, template_var 1),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 8, template_var 5),
                       template_var 2)),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 7,
                           template_app
                            (template_app (template_hole 6, template_var 4),
                             template_var 7)),
                         template_app
                          (template_app (template_hole 14, template_var 6),
                           template_var 0)),
                       template_app
                        (template_app (template_hole 14, template_var 7),
                         template_var 0)),
                     template_app (template_hole 5, t_empty))))),
             template_hole 0)
           ))),
    ("HuntSands.WHILE_PARALLEL_IND_tp",
     "[| ?X \<rhd> ?c : Sec (Q ?p ?G) (EQ ?G ?q) (EQ ?G ?q) ?\<Phi>;
         (?G, ?b, ?p) : HS_B; LEQ ?p ?q |]
      ==> ?X \<rhd> While ?b
                     ?c : Sec (Q ?p ?G) (EQ ?G ?q) (EQ ?G ?q)
                           (%(s, t). (?b, EQ ?G ?q, ?\<Phi>, s, t) : var)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_app (template_hole 18, template_var 6),
                  template_app
                   (template_app (template_hole 17, template_var 5),
                    template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_hole 16,
                            template_app
                             (template_app
                               (template_hole 15, template_var 4),
                              template_var 3)),
                          template_app
                           (template_app (template_hole 14, template_var 3),
                            template_var 2)),
                        template_app
                         (template_app (template_hole 14, template_var 3),
                          template_var 2)),
                      template_var 1)))),
              template_hole 13)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 3),
                  template_app
                   (template_app (template_hole 10, template_var 0),
                    template_var 4))),
              template_hole 9)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 19,
               template_app
                (template_app (template_hole 18, template_var 6),
                 template_app
                  (template_app
                    (template_hole 17,
                     template_app
                      (template_app (template_hole 7, template_var 0),
                       template_var 5)),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 16,
                           template_app
                            (template_app
                              (template_hole 15, template_var 4),
                             template_var 3)),
                         template_app
                          (template_app (template_hole 14, template_var 3),
                           template_var 2)),
                       template_app
                        (template_app (template_hole 14, template_var 3),
                         template_var 2)),
                     template_app (template_hole 6, t_empty))))),
             template_hole 13)
           ))),
    ("HuntSands.WHILE_PARALLEL",
     "[| ?X \<rhd> ?c : Sec (Q ?p ?G) (EQ ?G ?q) (EQ ?G ?q) ?\<Phi>;
         ALL s ss. EQ ?G ?p s ss --> evalB ?b s = evalB ?b ss; LEQ ?p ?q |]
      ==> ?X \<rhd> While ?b
                     ?c : Sec (Q ?p ?G) (EQ ?G ?q) (EQ ?G ?q)
                           (PhiWhileP (EQ ?G ?q) ?b ?\<Phi>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 6),
                  template_app
                   (template_app (template_hole 11, template_var 5),
                    template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_hole 10,
                            template_app
                             (template_app
                               (template_hole 9, template_var 4),
                              template_var 3)),
                          template_app
                           (template_app (template_hole 8, template_var 3),
                            template_var 2)),
                        template_app
                         (template_app (template_hole 8, template_var 3),
                          template_var 2)),
                      template_var 1)))),
              template_hole 7)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app (template_hole 12, template_var 6),
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 5)),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 10,
                           template_app
                            (template_app (template_hole 9, template_var 4),
                             template_var 3)),
                         template_app
                          (template_app (template_hole 8, template_var 3),
                           template_var 2)),
                       template_app
                        (template_app (template_hole 8, template_var 3),
                         template_var 2)),
                     template_app
                      (template_app
                        (template_app
                          (template_hole 0,
                           template_app
                            (template_app (template_hole 8, template_var 3),
                             template_var 2)),
                         template_var 0),
                       template_var 1))))),
             template_hole 7)
           ))),
    ("HuntSands.WHILE_PARALLEL_IND",
     "[| ?X \<rhd> ?c : Sec (Q ?p ?G) (EQ ?G ?q) (EQ ?G ?q) ?\<Phi>;
         ALL s ss. EQ ?G ?p s ss --> evalB ?b s = evalB ?b ss; LEQ ?p ?q |]
      ==> ?X \<rhd> While ?b
                     ?c : Sec (Q ?p ?G) (EQ ?G ?q) (EQ ?G ?q)
                           (%(s, t). (?b, EQ ?G ?q, ?\<Phi>, s, t) : var)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_app (template_hole 18, template_var 6),
                  template_app
                   (template_app (template_hole 17, template_var 5),
                    template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_hole 16,
                            template_app
                             (template_app
                               (template_hole 15, template_var 4),
                              template_var 3)),
                          template_app
                           (template_app (template_hole 14, template_var 3),
                            template_var 2)),
                        template_app
                         (template_app (template_hole 14, template_var 3),
                          template_var 2)),
                      template_var 1)))),
              template_hole 13)
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 19,
               template_app
                (template_app (template_hole 18, template_var 6),
                 template_app
                  (template_app
                    (template_hole 17,
                     template_app
                      (template_app (template_hole 7, template_var 0),
                       template_var 5)),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 16,
                           template_app
                            (template_app
                              (template_hole 15, template_var 4),
                             template_var 3)),
                         template_app
                          (template_app (template_hole 14, template_var 3),
                           template_var 2)),
                       template_app
                        (template_app (template_hole 14, template_var 3),
                         template_var 2)),
                     template_app (template_hole 6, t_empty))))),
             template_hole 13)
           ))),
    ("HuntSands.IF_DIAGONAL",
     "[| ALL x. LEQ (?G x) (?H x) | LEQ ?p (?H x);
         \<nexists>x. LEQ ?p (?H x) & LEQ (?H x) ?q;
         ?X \<rhd> ?c1.0 : Sec (Q ?p ?H) (EQ ?G ?q) (EQ ?H ?q) ?\<Phi>;
         ?X \<rhd> ?c2.0 : Sec (Q ?p ?H) (EQ ?G ?q) (EQ ?H ?q) ?\<Psi> |]
      ==> ?X \<rhd> Iff ?b ?c1.0
                     ?c2.0 : Sec (Q ?p ?H) (EQ ?G ?q) (EQ ?H ?q)
                              (%(s, t). EQ ?H ?q s t)",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty)),
        template_negation
         (template_predicate (template_app (template_hole 10, t_empty))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 5),
                  template_app
                   (template_app (template_hole 6, template_var 4),
                    template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_hole 5,
                            template_app
                             (template_app
                               (template_hole 4, template_var 7),
                              template_var 8)),
                          template_app
                           (template_app (template_hole 3, template_var 9),
                            template_var 6)),
                        template_app
                         (template_app (template_hole 3, template_var 8),
                          template_var 6)),
                      template_var 3)))),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 5),
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_hole 5,
                            template_app
                             (template_app
                               (template_hole 4, template_var 7),
                              template_var 8)),
                          template_app
                           (template_app (template_hole 3, template_var 9),
                            template_var 6)),
                        template_app
                         (template_app (template_hole 3, template_var 8),
                          template_var 6)),
                      template_var 1)))),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 5),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 0),
                         template_var 4),
                       template_var 2)),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_app (template_hole 4, template_var 7),
                             template_var 8)),
                         template_app
                          (template_app (template_hole 3, template_var 9),
                           template_var 6)),
                       template_app
                        (template_app (template_hole 3, template_var 8),
                         template_var 6)),
                     template_app (template_hole 0, t_empty))))),
             template_hole 2)
           ))),
    ("HuntSands.IF_DIAGONAL_tp",
     "[| (?p, ?G, ?c1.0, ?H) : HS | (?p, ?G, ?c2.0, ?H) : HS;
         \<nexists>x. LEQ ?p (?H x) & LEQ (?H x) ?q;
         ?X \<rhd> ?c1.0 : Sec (Q ?p ?H) (EQ ?G ?q) (EQ ?H ?q) ?\<Phi>;
         ?X \<rhd> ?c2.0 : Sec (Q ?p ?H) (EQ ?G ?q) (EQ ?H ?q) ?\<Psi> |]
      ==> ?X \<rhd> Iff ?b ?c1.0
                     ?c2.0 : Sec (Q ?p ?H) (EQ ?G ?q) (EQ ?H ?q)
                              (%(s, t). EQ ?H ?q s t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app
                   (template_hole 17,
                    template_app
                     (template_app (template_hole 16, template_var 9),
                      template_app
                       (template_app (template_hole 15, template_var 8),
                        template_app
                         (template_app (template_hole 14, template_var 7),
                          template_var 6)))),
                  template_hole 13)),
              template_app
               (template_app
                 (template_hole 17,
                  template_app
                   (template_app (template_hole 16, template_var 9),
                    template_app
                     (template_app (template_hole 15, template_var 8),
                      template_app
                       (template_app (template_hole 14, template_var 5),
                        template_var 6)))),
                template_hole 13))
            ),
        template_negation
         (template_predicate (template_app (template_hole 11, t_empty))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_app
                   (template_app (template_hole 6, template_var 7),
                    template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_hole 5,
                            template_app
                             (template_app
                               (template_hole 4, template_var 9),
                              template_var 6)),
                          template_app
                           (template_app (template_hole 3, template_var 8),
                            template_var 4)),
                        template_app
                         (template_app (template_hole 3, template_var 6),
                          template_var 4)),
                      template_var 2)))),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_app
                   (template_app (template_hole 6, template_var 5),
                    template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_hole 5,
                            template_app
                             (template_app
                               (template_hole 4, template_var 9),
                              template_var 6)),
                          template_app
                           (template_app (template_hole 3, template_var 8),
                            template_var 4)),
                        template_app
                         (template_app (template_hole 3, template_var 6),
                          template_var 4)),
                      template_var 1)))),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 3),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 0),
                         template_var 7),
                       template_var 5)),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_app (template_hole 4, template_var 9),
                             template_var 6)),
                         template_app
                          (template_app (template_hole 3, template_var 8),
                           template_var 4)),
                       template_app
                        (template_app (template_hole 3, template_var 6),
                         template_var 4)),
                     template_app (template_hole 0, t_empty))))),
             template_hole 2)
           ))),
    ("HuntSands.COMP",
     "[| ?X \<rhd> ?c1.0 : Sec (Q ?p ?K) (EQ ?G ?q) (EQ ?K ?q) ?\<Phi>;
         ?X \<rhd> ?c2.0 : Sec (Q ?p ?H) (EQ ?K ?q) (EQ ?H ?q) ?\<Psi>;
         ALL x. LEQ (?G x) (?K x) | LEQ ?p (?K x);
         ALL x. LEQ (?K x) (?H x) | LEQ ?p (?H x) |]
      ==> ?X \<rhd> Comp ?c1.0
                     ?c2.0 : Sec (Q ?p ?H) (EQ ?G ?q) (EQ ?H ?q)
                              (%(x, y).
                                  EX z. ?\<Phi> (z, y) &
  (ALL w. EQ ?K ?q z w --> ?\<Psi> (x, w)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 9),
                  template_app
                   (template_app (template_hole 14, template_var 8),
                    template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_hole 13,
                            template_app
                             (template_app
                               (template_hole 12, template_var 7),
                              template_var 6)),
                          template_app
                           (template_app (template_hole 11, template_var 5),
                            template_var 4)),
                        template_app
                         (template_app (template_hole 11, template_var 6),
                          template_var 4)),
                      template_var 3)))),
              template_hole 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 9),
                  template_app
                   (template_app (template_hole 14, template_var 2),
                    template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_hole 13,
                            template_app
                             (template_app
                               (template_hole 12, template_var 7),
                              template_var 1)),
                          template_app
                           (template_app (template_hole 11, template_var 6),
                            template_var 4)),
                        template_app
                         (template_app (template_hole 11, template_var 1),
                          template_var 4)),
                      template_var 0)))),
              template_hole 10)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 16,
               template_app
                (template_app (template_hole 15, template_var 9),
                 template_app
                  (template_app
                    (template_hole 14,
                     template_app
                      (template_app (template_hole 6, template_var 8),
                       template_var 2)),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 13,
                           template_app
                            (template_app
                              (template_hole 12, template_var 7),
                             template_var 1)),
                         template_app
                          (template_app (template_hole 11, template_var 5),
                           template_var 4)),
                       template_app
                        (template_app (template_hole 11, template_var 1),
                         template_var 4)),
                     template_app (template_hole 5, t_empty))))),
             template_hole 10)
           ))),
    ("HuntSands.IF_PARALLEL_tp",
     "[| (?G, ?b, ?p) : HS_B; (?p, ?G, ?c1.0, ?H) : HS;
         (?p, ?G, ?c2.0, ?H) : HS; EX x. LEQ ?p (?H x) & LEQ (?H x) ?q;
         ?X \<rhd> ?c1.0 : Sec (Q ?p ?H) (EQ ?G ?q) (EQ ?H ?q) ?\<Phi>;
         ?X \<rhd> ?c2.0 : Sec (Q ?p ?H) (EQ ?G ?q) (EQ ?H ?q) ?\<Psi> |]
      ==> ?X \<rhd> Iff ?b ?c1.0
                     ?c2.0 : Sec (Q ?p ?H) (EQ ?G ?q) (EQ ?H ?q)
                              (%(r, u).
                                  (evalB ?b u --> ?\<Phi> (r, u)) &
                                  (~ evalB ?b u --> ?\<Psi> (r, u)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 24,
                template_app
                 (template_app (template_hole 23, template_var 9),
                  template_app
                   (template_app (template_hole 22, template_var 8),
                    template_var 7))),
              template_hole 21)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 20,
                template_app
                 (template_app (template_hole 19, template_var 7),
                  template_app
                   (template_app (template_hole 18, template_var 9),
                    template_app
                     (template_app (template_hole 17, template_var 6),
                      template_var 5)))),
              template_hole 16)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 20,
                template_app
                 (template_app (template_hole 19, template_var 7),
                  template_app
                   (template_app (template_hole 18, template_var 9),
                    template_app
                     (template_app (template_hole 17, template_var 4),
                      template_var 5)))),
              template_hole 16)
            ),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 2),
                  template_app
                   (template_app (template_hole 10, template_var 6),
                    template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_hole 9,
                            template_app
                             (template_app
                               (template_hole 8, template_var 7),
                              template_var 5)),
                          template_app
                           (template_app (template_hole 7, template_var 9),
                            template_var 3)),
                        template_app
                         (template_app (template_hole 7, template_var 5),
                          template_var 3)),
                      template_var 1)))),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 2),
                  template_app
                   (template_app (template_hole 10, template_var 4),
                    template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_hole 9,
                            template_app
                             (template_app
                               (template_hole 8, template_var 7),
                              template_var 5)),
                          template_app
                           (template_app (template_hole 7, template_var 9),
                            template_var 3)),
                        template_app
                         (template_app (template_hole 7, template_var 5),
                          template_var 3)),
                      template_var 0)))),
              template_hole 6)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 11, template_var 2),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app
                        (template_app (template_hole 5, template_var 8),
                         template_var 6),
                       template_var 4)),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 9,
                           template_app
                            (template_app (template_hole 8, template_var 7),
                             template_var 5)),
                         template_app
                          (template_app (template_hole 7, template_var 9),
                           template_var 3)),
                       template_app
                        (template_app (template_hole 7, template_var 5),
                         template_var 3)),
                     template_app (template_hole 4, t_empty))))),
             template_hole 6)
           ))),
    ("HuntSands.IF_PARALLEL",
     "[| ALL s ss. EQ ?G ?p s ss --> evalB ?b s = evalB ?b ss;
         ALL x. LEQ (?G x) (?H x) | LEQ ?p (?H x);
         EX x. LEQ ?p (?H x) & LEQ (?H x) ?q;
         ?X \<rhd> ?c1.0 : Sec (Q ?p ?H) (EQ ?G ?q) (EQ ?H ?q) ?\<Phi>;
         ?X \<rhd> ?c2.0 : Sec (Q ?p ?H) (EQ ?G ?q) (EQ ?H ?q) ?\<Psi> |]
      ==> ?X \<rhd> Iff ?b ?c1.0
                     ?c2.0 : Sec (Q ?p ?H) (EQ ?G ?q) (EQ ?H ?q)
                              (%(r, u).
                                  (evalB ?b u --> ?\<Phi> (r, u)) &
                                  (~ evalB ?b u --> ?\<Psi> (r, u)))",
     template_implication
      ([template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_hole 6,
                            template_app
                             (template_app
                               (template_hole 5, template_var 8),
                              template_var 6)),
                          template_app
                           (template_app (template_hole 17, template_var 9),
                            template_var 5)),
                        template_app
                         (template_app (template_hole 17, template_var 6),
                          template_var 5)),
                      template_var 2)))),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_app
                   (template_app (template_hole 7, template_var 1),
                    template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_hole 6,
                            template_app
                             (template_app
                               (template_hole 5, template_var 8),
                              template_var 6)),
                          template_app
                           (template_app (template_hole 17, template_var 9),
                            template_var 5)),
                        template_app
                         (template_app (template_hole 17, template_var 6),
                          template_var 5)),
                      template_var 0)))),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 4),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_app (template_hole 3, template_var 7),
                         template_var 3),
                       template_var 1)),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 6,
                           template_app
                            (template_app (template_hole 5, template_var 8),
                             template_var 6)),
                         template_app
                          (template_app (template_hole 17, template_var 9),
                           template_var 5)),
                       template_app
                        (template_app (template_hole 17, template_var 6),
                         template_var 5)),
                     template_app (template_hole 2, t_empty))))),
             template_hole 4)
           )))]:
   (string * thm * template) list
### theory "Draft.HuntSandsMoreTemplates"
### 0.361s elapsed time, 0.522s cpu time, 0.055s GC time
val it = (): unit
